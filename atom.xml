<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>biubiu的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-22T15:11:08.175Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>biubiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js常用字符串操作方法总结</title>
    <link href="http://yoursite.com/2019/07/16/js%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2019/07/16/js的字符串/</id>
    <published>2019-07-16T13:36:40.000Z</published>
    <updated>2019-07-22T15:11:08.175Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>终于忙完期末了，考研复习也慢慢走上正轨，要抽出更多的时间把以前学的东西总结下来，再在项目中实践，重新学习更深的内容。24小时完全不够用QAQ。</p></blockquote><h2 id="substring-star-stop-slice（star-stop）"><a href="#substring-star-stop-slice（star-stop）" class="headerlink" title="substring(star,stop)/slice（star,stop）"></a>substring(star,stop)/slice（star,stop）</h2><p>最常用的就是对后台传过来的字符串进行<strong>截取处理</strong></p><p>语法：stringObject.substring(start,stop)</p><ul><li>start 必须，并且非负整数</li><li>stop 可选，并且非负整数。如果省略，一直截取到字符串的结尾</li><li>返回一个新的字符串，包含了start处的字符，但不包括stop处的字符</li></ul><p>语法：stringObject.slice(start,end)</p><ul><li>start 截取的片段的起始下标，如果为负数，从后往前截取（-1 指字符串的最后一个字符）</li><li>end  截取的结尾的下标</li><li>返回一个新的字符串，包含了start处的字符，但不包括end处的字符</li></ul><blockquote><p>arrayObject.slice(start,end)与stringObject.slice(start,end)相似用法。注意array.splice与slice的区别在于splice方法会改变原数组并且可以向原数组中添加元素，如果有删除元素则返回是含有删除的元素的数组。</p></blockquote><h2 id="String-split-Array-join"><a href="#String-split-Array-join" class="headerlink" title="String.split()/Array.join()"></a>String.split()/Array.join()</h2><p>语法: stringObject.split(separator,howmany)</p><p>把一个字符串分割成字符串数组</p><ul><li>separator 必须。字符或正则表达式，从该从该参数指定的地方分割 stringObject。</li><li>howmany  可选。该参数可指定返回的数组的最大长度。</li><li>返回一个字符串数组，不包括separator自身</li></ul><p>语法： arrayObject.join(separator)</p><p>数组中的所有元素放入一个字符串。</p><ul><li>separator 数组中的元素形成字符串时连接的符号，默认逗号。</li><li>如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割</li><li>返回一个字符串数组</li></ul><h2 id="String-concat-Array-concat"><a href="#String-concat-Array-concat" class="headerlink" title="String.concat()/Array.concat()"></a>String.concat()/Array.concat()</h2><p>字符串的concat方法其实并不常用，连接两个字符串的时候我们常常用<code>+</code>来代替。这里主要是记录几个数组的连接方法。</p><p>语法:arrayObject.concat(arrayX,arrayX,……,arrayX)</p><ul><li>添加的是数组的元素不是添加一个数组</li><li>返回一个新数组，不改变原数组</li></ul><h2 id="string-replace-regexp-substr-replacement"><a href="#string-replace-regexp-substr-replacement" class="headerlink" title="string.replace(regexp/substr,replacement)"></a>string.replace(regexp/substr,replacement)</h2><ul><li>第一个参数可以使RegExp对象或者一个字符串，第二个参数可以是一个字符串或者一个函数。如果第一个参数是字符串，那么只会替换第一个字符串。如果想替换所有的字符串，则必须使用正则表达式。</li><li>默认只进行第一次匹配操作的替换，想要全局替换，需要置上正则全局标识g</li><li>‘\s”是转移符号用以匹配任何空白字符，包括空格、制表符、换页符等等，</li></ul><h2 id="string-search-regexp-string-indexOf-searchvalue-fromindex"><a href="#string-search-regexp-string-indexOf-searchvalue-fromindex" class="headerlink" title="string.search(regexp)/string.indexOf(searchvalue,fromindex)"></a>string.search(regexp)/string.indexOf(searchvalue,fromindex)</h2><p>语法 string.indexOf(searchvalue,fromindex)</p><ul><li>searchvalue，规定检索的字符串值</li><li>fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。</li><li>返回的检索的字符串第一次出现的位置，如果没有出现，返回-1</li></ul><p>语法 string.search(regexp)</p><ul><li>regexp 该参数可以是需要在 stringObject 中检索的子串，也可以是需要检索的 RegExp 对象。</li><li>要执行忽略大小写的检索，追加标志 i。</li><li>返回值：stringObject 中第一个与 regexp 相匹配的子串的起始位置。</li><li>search() 方法不执行全局匹配，它将忽略标志 g。它同时忽略 regexp 的 lastIndex 属性，</li></ul><p>语法 stringObject.match(searchvalue)<br>     stringObject.match(regexp)</p><ul><li>返回指定的值</li><li>非全局下返回的数组包含index，input，全局模式下只返回匹配结果，没有index，input等，只有结果。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;终于忙完期末了，考研复习也慢慢走上正轨，要抽出更多的时间把以前学的东西总结下来，再在项目中实践，重新学习更深的内容。24小时完全不够用QAQ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;substring-star-stop-slice（
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2019/07/15/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/07/15/正则表达式/</id>
    <published>2019-07-15T14:57:10.000Z</published>
    <updated>2019-07-22T14:55:08.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><strong>修饰符</strong></p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>执行对大小写不敏感的匹配。</td></tr><tr><td>g</td><td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td>m</td><td>执行多行匹配。</td></tr></tbody></table><p><strong>元字符</strong></p><p><img src="\img\js\元字符.png" alt="元字符"></p><p><strong>方括号</strong></p><p><img src="\img\js\方括号.png" alt="方括号"></p><p><strong>量词</strong></p><p><img src="\img\js\量词.png" alt="量词"></p><ul><li>js里面的正则只有前瞻，头部的（后），尾部的（前），所以前瞻就是后面紧跟着的</li><li>匹配有贪婪模式（尽可能多的匹配），非贪婪模式（尽可能少的匹配），默认为贪婪模式，非贪婪模式需要在量词后面加？</li></ul><p><strong>对象属性</strong></p><p>其中的模式（pattern）部分可以是任何简单或者复杂的正则表达式，可以包含字符类、限定符、分组、向前查找以及反向引用。每个正则表达式可带有一个或者多个标注（flags）,用以标明正则表达式的行为。有三个一下标志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var expression = /pattern/flags;</span><br></pre></td></tr></table></figure><ul><li>g：表示全局模式,即模式将被应用到所有字符串，而非在发现第一个匹配项时立即停止。</li><li>i：表示不区分大小写模式。</li><li>m：表示多行模式，即在到达一行文本末尾时还在继续查找下一行中是否存在于模式匹配的项。</li></ul><p><a href="https://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html" target="_blank" rel="noopener">常用正则表达</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;修饰符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;修饰符&lt;/th&gt;
&lt;th
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js遍历方法总结</title>
    <link href="http://yoursite.com/2019/07/04/js%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2019/07/04/js的遍历/</id>
    <published>2019-07-04T00:45:05.000Z</published>
    <updated>2019-07-15T13:38:02.166Z</updated>
    
    <content type="html"><![CDATA[<p>复习之余，把常用的遍历方法总结，方便使用的时候查看。</p><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><p>语法中有thisValue参数的，可以接收第二个参数，用来绑定回调函数内部的this变量，将回调函数内部的this对象，指向第二个参数，间接操作这个参数（一般是数组）。以map为例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class="line"></span><br><span class="line">[1, 2].map(function (e) &#123;</span><br><span class="line">    return this[e];</span><br><span class="line">&#125;, arr)</span><br><span class="line"> // [&apos;b&apos;, &apos;c&apos;]</span><br></pre></td></tr></table></figure><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>语法: array.forEach(function(currentValue, index, arr), thisValue)</p><p> 调用数组的每个元素，并将元素传递给回调函数。<br> <strong>没有返回一个新数组。不能中断，对空数组是不会执行回调函数。</strong></p><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>语法: array.map(function(currentValue,index,arr), thisValue)</p><p>按照原始数组元素顺序依次处理元素，结果放在一个新数组里返回。<br><strong>返回一个新数组，不会改变原始数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*------从接口得到数据------*/</span><br><span class="line">const users=res.items.map(item =&gt; (&#123;</span><br><span class="line">    url: item.html_url,</span><br><span class="line">    img: item.avatar_url,</span><br><span class="line">    name: item.login,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>语法：array.filter(function(currentValue,index,arr), thisValue)</p><p>创建一个新的数组，指定数组中符合条件的放入新数组。<br><strong>返回一个新数组，按照约定条件筛选数组元素时比较常用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*-----去重问题----*/</span><br><span class="line">var arr = [1, 2, 2, 3, 4, 5, 5, 6, 7, 7,8,8,0,8,6,3,4,56,2];</span><br><span class="line">var arr2 = arr.filter((x, index,self)=&gt;self.indexOf(x)===index)</span><br><span class="line">console.log(arr2); //[1, 2, 3, 4, 5, 6, 7, 8, 0, 56]</span><br></pre></td></tr></table></figure><h4 id="every-some"><a href="#every-some" class="headerlink" title="every()/some()"></a>every()/some()</h4><p>语法: array.every(function(currentValue,index,arr), thisValue)</p><p>对整个数组进行检查，如有一个元素满足，整个表达式返回false，且其余元素不检查。否则返回true。</p><p><strong>不会改变原数组</strong></p><p>语法:array.some(function(currentValue,index,arr),thisValue)</p><p>对整个数组进行检查，如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。反之返回false。</p><p><strong>不会改变原数组</strong></p><p>   这两个方法在实际开发中，大有可用之处。比如在判定用户是否勾选了不可操作的数据，或者是否勾选了一条可以操作的数据可以使用这两个方法遍历循环数组。</p><h4 id="reduce-reduceRight"><a href="#reduce-reduceRight" class="headerlink" title="reduce()/reduceRight()"></a>reduce()/reduceRight()</h4><p>语法:arr.reduce(callback,[initialValue])</p><p>callback （执行数组中每个值的函数，包含四个参数）</p><ul><li>previousValue 必选。上一次调用回调返回的值，或者是提供的初始值（initialValue）</li><li>currentValue 必选。数组中当前被处理的元素</li><li>index 可选。当前元素在数组中的索引。</li><li>arr    可选。当前元素所属的数组对象。</li></ul><p>initialValue （作为第一次调用 callback 的第一个参数。）</p><p>将数组元素做“叠加”处理， <strong>返回一个值。</strong> reduce方向从左向右，reduceRight方向从右向左</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4];</span><br><span class="line">var sum = arr.reduce(function(prev, cur, index, arr) &#123;</span><br><span class="line">    console.log(prev, cur, index);</span><br><span class="line">    return prev + cur;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(arr, sum);</span><br><span class="line">/*-----打印结果---*/</span><br><span class="line">1 2 1</span><br><span class="line">3 3 2</span><br><span class="line">6 4 3</span><br><span class="line">[1, 2, 3, 4] 10</span><br></pre></td></tr></table></figure><p>index是从1开始的，第一次的prev的值是数组的第一个值。数组长度是4，<strong>但是reduce函数循环3次。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var  arr = [1, 2, 3, 4];</span><br><span class="line">var sum = arr.reduce(function(prev, cur, index, arr) &#123;</span><br><span class="line">    console.log(prev, cur, index);</span><br><span class="line">    return prev + cur;</span><br><span class="line">&#125;，0) //注意这里设置了初始值</span><br><span class="line">console.log(arr, sum);</span><br><span class="line">/*----打印结果----*/</span><br><span class="line">0 1 0</span><br><span class="line">1 2 1</span><br><span class="line">3 3 2</span><br><span class="line">6 4 3</span><br><span class="line">[1, 2, 3, 4] 10</span><br></pre></td></tr></table></figure><p>这个例子index是从0开始的，第一次的prev的值是我们设置的初始值0，数组长度是4，reduce函数循环4次。</p><p><strong>如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始</strong></p><p>对空数组来说，不设置初始值会报错，设置了初始值不会报错，所以一般来说我们提供初始值通常更安全。</p><p>使用场景也很多，具体可以看 <a href="https://www.jianshu.com/p/e375ba1cfc47" target="_blank" rel="noopener">参考文档</a></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>Object.keys() 返回一个由一个给定对象的自身可枚举<strong>属性组成的数组</strong></li><li>Object.getOwnPropertyNames() 返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属性).</li><li>for in 循环遍历对象自身的和继承的可枚举属性(不含Symbol属性).</li><li>for of 主要来遍历可迭代的对象（包括Array, Map, Set, arguments等），它主要用来获取对象的<strong>属性值</strong>，而for..in主要获取对象的属性名。</li></ul><p>总结:</p><p><img src="\img\js\图1.png" alt="总结"></p><ol><li>for in遍历数组的下标类型不一样 ：for in为String，for为Number</li><li>for in不适合遍历数组</li><li>对不存在项的处理：for in不存在的项不被枚举出来；for全部枚举出</li><li>遍历对象可通过hasOwnProperty()过滤掉原型里面的属性</li><li>for of输出数组中包括不存在的值在内的所有值</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;复习之余，把常用的遍历方法总结，方便使用的时候查看。&lt;/p&gt;
&lt;h3 id=&quot;数组的遍历&quot;&gt;&lt;a href=&quot;#数组的遍历&quot; class=&quot;headerlink&quot; title=&quot;数组的遍历&quot;&gt;&lt;/a&gt;数组的遍历&lt;/h3&gt;&lt;p&gt;语法中有thisValue参数的，可以接收第二个
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>keep-alive</title>
    <link href="http://yoursite.com/2019/06/29/keep-alive/"/>
    <id>http://yoursite.com/2019/06/29/keep-alive/</id>
    <published>2019-06-29T14:37:17.000Z</published>
    <updated>2019-06-29T05:28:55.993Z</updated>
    
    <content type="html"><![CDATA[<p><code>&lt;keep-alive&gt;</code>能在组件切换的过程中将状态保留在内存中，防止重复渲染DOM。</p><p>设置了keepAlive缓存的组件：</p><ol><li>第一次进入：beforeRouterEnter -&gt;created-&gt;…-&gt;activated-&gt;…-&gt;deactivated</li><li>后续进入时：beforeRouterEnter -&gt;activated-&gt;deactivated</li><li><code>activated</code>和<code>deactivated</code>仅在keepAlive缓存的组件里被激活<br>只有第一次进入该组件时，才会走created钩子，而需要缓存的组件中activated是每次都会走的钩子函数。</li></ol><p>prop:</p><ul><li>include: 字符串或正则表达式。只有匹配的组件会被缓存。</li><li>exclude: 字符串或正则表达式。任何匹配的组件都不会被缓存。</li></ul><p>在2.1.0版本Vue中</p><p>常见用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 组件</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;test-keep-alive&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        includedComponents: &quot;test-keep-alive&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;keep-alive include=&quot;test-keep-alive&quot;&gt;</span><br><span class="line">  &lt;!-- 将缓存name为test-keep-alive的组件 --&gt;</span><br><span class="line">  &lt;component&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;keep-alive include=&quot;a,b&quot;&gt;</span><br><span class="line">  &lt;!-- 将缓存name为a或者b的组件，结合动态组件使用 --&gt;</span><br><span class="line">  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用正则表达式，需使用v-bind --&gt;</span><br><span class="line">&lt;keep-alive :include=&quot;/a|b/&quot;&gt;</span><br><span class="line">  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态判断 --&gt;</span><br><span class="line">&lt;keep-alive :include=&quot;includedComponents&quot;&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;keep-alive exclude=&quot;test-keep-alive&quot;&gt;</span><br><span class="line">  &lt;!-- 将不缓存name为test-keep-alive的组件 --&gt;</span><br><span class="line">  &lt;component&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;能在组件切换的过程中将状态保留在内存中，防止重复渲染DOM。&lt;/p&gt;
&lt;p&gt;设置了keepAlive缓存的组件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一次进入：beforeRouterEnter -&amp;gt;created
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>软件超市-分页</title>
    <link href="http://yoursite.com/2019/06/29/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82-%E5%88%86%E9%A1%B5/"/>
    <id>http://yoursite.com/2019/06/29/软件超市-分页/</id>
    <published>2019-06-29T01:38:48.000Z</published>
    <updated>2019-06-29T10:16:35.344Z</updated>
    
    <content type="html"><![CDATA[<p>整个项目是响应式的，用的是一套代码。但是在分页问题上，就很难将其统一，移动端比较适用于上拉下拉加载数据的办法，而pc端适用与显示分页的办法。</p><p>方法一：拆成两个项目写，部署在两个不同域名上，再根据设备来跳转域名。<br>方法二：做成多页面的，两个入口，分别是 PC 和 Mobile ,默认 PC 是 index ,然后在里面判断当前客户端是 PC端还是手机端，如果是 手机端，就 localtion.href = ‘/mobile’</p><p>其实总体来说就是两套代码。</p><blockquote><p>由于很多网页都是重复的，在修改这里的时候做的也差不多了，完全不知道要怎么办，没有经验真的太难过了！！然后发现后台传过来的数据没有分页！！！！没有分页，一堆数据全部传过来了。</p></blockquote><p>最后还是采用在分页组件判断设备，然后根据设备显示不同数量的页面数。<br>因为缓存组件的activated是每次进入都会激活的，但是我们并不需要如此频繁的判断。于是选择写在created周期函数里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*---判断是否手机端---*/</span><br><span class="line">  methods: &#123;</span><br><span class="line">    _isMobile() &#123;</span><br><span class="line">      let flag = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i)</span><br><span class="line">      return flag;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  active()&#123;</span><br><span class="line">    if (this._isMobile()) &#123;</span><br><span class="line">      this.defaultCount = 3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-pagination</span><br><span class="line">    v-else</span><br><span class="line">    class=<span class="string">"x-page"</span></span><br><span class="line">    layout=<span class="string">" prev, pager, next, jumper"</span></span><br><span class="line">    @current-change=<span class="string">"handleCurrentChange"</span></span><br><span class="line">    @size-change=<span class="string">"handleSizeChange"</span></span><br><span class="line">    :current-page.sync=<span class="string">"currentPage"</span></span><br><span class="line">    :page-sizes=<span class="string">"pageSizes"</span></span><br><span class="line">    :page-size=<span class="string">"pageSize"</span></span><br><span class="line">    :total=<span class="string">"total"</span></span><br><span class="line">    :pager-count=<span class="string">"defaultCount"</span></span><br><span class="line">  &gt;&lt;/el-pagination&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">"ProjectPagination"</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    data: Array,</span><br><span class="line">    filterData: Array,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">     currentPage: 1,</span><br><span class="line">     defaultCount:9</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 数据总数目</span><br><span class="line">    <span class="function"><span class="title">total</span></span>() &#123;</span><br><span class="line">      <span class="built_in">return</span> this.data.length;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 一页有多少条数据</span><br><span class="line">    <span class="function"><span class="title">pageSize</span></span>() &#123;</span><br><span class="line">      <span class="built_in">let</span> size = this.total &gt;= 10 ? 10: this.total;</span><br><span class="line">      <span class="built_in">return</span> size;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 提供每页条数的选择</span><br><span class="line">    <span class="function"><span class="title">pageSizes</span></span>() &#123;</span><br><span class="line">      <span class="built_in">let</span> count = Math.ceil(this.total / this.pageSize);</span><br><span class="line">      <span class="built_in">let</span> sizes = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">let</span> i = 1; i &lt;= count; i++) &#123;</span><br><span class="line">        sizes.push(this.pageSize * i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">return</span> sizes;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //判断pc端</span><br><span class="line">    <span class="function"><span class="title">_isMobile</span></span>() &#123;</span><br><span class="line">      <span class="built_in">let</span> flag = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i)</span><br><span class="line">      <span class="built_in">return</span> flag;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 页面条数改变</span><br><span class="line">    handleSizeChange(val) &#123;</span><br><span class="line">      // TODO 获取项目条数</span><br><span class="line">      this.<span class="variable">$emit</span>(<span class="string">"update:filterData"</span>, this.data.slice(0, val));</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    // 页面页数改变</span><br><span class="line">    handleCurrentChange(val) &#123;</span><br><span class="line">      // TODO 获取下一页数据</span><br><span class="line">      this.<span class="variable">$emit</span>(</span><br><span class="line">        <span class="string">"update:filterData"</span>,</span><br><span class="line">        this.data.slice((val - 1) * this.pageSize, val * this.pageSize)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">    this.<span class="variable">$emit</span>(<span class="string">"update:filterData"</span>, this.data.slice(0, this.pageSize));</span><br><span class="line">    <span class="keyword">if</span> (this._isMobile()) &#123;</span><br><span class="line">      this.defaultCount = 3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">activated</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> (this.<span class="variable">$route</span>.meta.ifDoFresh) &#123;</span><br><span class="line">      this.currentPage = 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    // 监控数据变化时获取数据</span><br><span class="line">    <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">      this.<span class="variable">$emit</span>(<span class="string">"update:filterData"</span>, this.data.slice(0, this.pageSize));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>下次微信点餐的项目的时候一定学会写上拉下拉刷新加载数据！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整个项目是响应式的，用的是一套代码。但是在分页问题上，就很难将其统一，移动端比较适用于上拉下拉加载数据的办法，而pc端适用与显示分页的办法。&lt;/p&gt;
&lt;p&gt;方法一：拆成两个项目写，部署在两个不同域名上，再根据设备来跳转域名。&lt;br&gt;方法二：做成多页面的，两个入口，分别是 P
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
      <category term="软件超市" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82/"/>
    
  </entry>
  
  <entry>
    <title>软件超市-返回刷新问题</title>
    <link href="http://yoursite.com/2019/06/28/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82-%E8%BF%94%E5%9B%9E/"/>
    <id>http://yoursite.com/2019/06/28/软件超市-返回/</id>
    <published>2019-06-28T13:59:03.000Z</published>
    <updated>2019-06-29T05:23:23.894Z</updated>
    
    <content type="html"><![CDATA[<p>在对项目进行优化的时候，发现返回上一页的函数很多组件都会使用，于是打算把这个函数抽离出来。</p><p>在此之前需要先解决<strong>首页进入列表页面刷新，而详情页返回列表页面不刷新的问题</strong>的问题</p><h3 id="方法一：keep-alive与vue-router配合使用"><a href="#方法一：keep-alive与vue-router配合使用" class="headerlink" title="方法一：keep-alive与vue-router配合使用"></a>方法一：keep-alive与vue-router配合使用</h3><p>实现在定义了两个字段 <code>keepAlive:true</code> 标识是否使用keep-alive组件字段,<code>ifDoFresh:false</code>标识是否刷新数据字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*------router/index-----*/</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/project'</span>,</span><br><span class="line">      name:<span class="string">'项目列表'</span></span><br><span class="line">      component:resolve =&gt; require([<span class="string">"@/pages/Project/Project"</span>],resolve),</span><br><span class="line">      meta: &#123;</span><br><span class="line">        keepAlive:<span class="literal">true</span>,</span><br><span class="line">        ifDoFresh:<span class="literal">false</span>,</span><br><span class="line">        showNav: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>在根组件中根据<code>keepAlive</code> 字符判断是否使用keep-alive组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*------app.vue----*/</span><br><span class="line">&lt;div class=<span class="string">"main"</span>&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">       &lt;router-view v-if=<span class="string">"<span class="variable">$route</span>.meta.keepAlive"</span>/&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=<span class="string">"!<span class="variable">$route</span>.meta.keepAlive"</span>/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在目标列表页的beforeRouteEnter判断从哪个页面进入的，根据需求更改<code>ifDoFresh</code>变量。这里与<code>activated</code>联合用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter(to,from,next)&#123;</span><br><span class="line">        //需要刷新的页面</span><br><span class="line">        <span class="keyword">if</span> (from.name!=<span class="string">"团队详情"</span>) &#123;</span><br><span class="line">          to.meta.ifDoFresh = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        next()</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">activated</span></span>()&#123;</span><br><span class="line">       <span class="keyword">if</span> (this.<span class="variable">$route</span>.meta.ifDoFresh)&#123;</span><br><span class="line">          // 先重置</span><br><span class="line">          this.selected=0</span><br><span class="line">        this.<span class="variable">$route</span>.meta.ifDoFresh=<span class="literal">false</span></span><br><span class="line">         this.<span class="variable">$store</span>.dispatch(<span class="string">'getTeam'</span>,&#123;teamId:0&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>按逻辑来说这样就可以了，但是有个的问题出现了！！！！</p><p><img src="\img\软件超市\图3.png" alt="视图3"><br><img src="\img\软件超市\图4.png" alt="视图4"></p><p>返回只显示一个团队了！！好气啊，不断调试中发现我团队详情的团队信息居然和我列表的团队信息存储在同一个变量里！！！！所以点进详情页后，改变了team，而keep-alive缓存的是team里的数据。我是白痴吗？？？？</p><p>还有一个问题就是从列表到首页，在从首页到列表页，分页的缓存仍然存在。</p><p>解决办法：在分页器组件内提前判断（因为使用分页器组件时并没有传当前页码）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">activated</span></span>()&#123;</span><br><span class="line">  <span class="keyword">if</span> (this.<span class="variable">$route</span>.meta.ifDoFresh) &#123;</span><br><span class="line">    this.currentPage = 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="方法二：keep-alive标签内部添加"><a href="#方法二：keep-alive标签内部添加" class="headerlink" title="方法二：keep-alive标签内部添加"></a>方法二：keep-alive标签内部添加</h3><blockquote><p><a href="/2019/06/29/keep-alive">keep-alive的总结</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在对项目进行优化的时候，发现返回上一页的函数很多组件都会使用，于是打算把这个函数抽离出来。&lt;/p&gt;
&lt;p&gt;在此之前需要先解决&lt;strong&gt;首页进入列表页面刷新，而详情页返回列表页面不刷新的问题&lt;/strong&gt;的问题&lt;/p&gt;
&lt;h3 id=&quot;方法一：keep-alive与
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
      <category term="软件超市" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82/"/>
    
  </entry>
  
  <entry>
    <title>软件超市-改变v-html内容的图片样式</title>
    <link href="http://yoursite.com/2019/06/26/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82-%E9%97%AE%E9%A2%98v-if%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/06/26/软件超市-问题v-if样式/</id>
    <published>2019-06-26T11:13:48.000Z</published>
    <updated>2019-06-26T12:32:00.089Z</updated>
    
    <content type="html"><![CDATA[<p>在通过v-html把后台传过来的内容渲染到页面之后，发现后台传来的图片是限制了宽和高的。</p><p><img src="\img\软件超市\图1.png" alt="视图1"></p><p>通过查资料发现，这里解析是把v-html传来的数据作为了一个新的组件，所以在scoped下的style里面设置样式不起作用。那么根据原理，或许可以把scoped直接去掉，但是为了防止组件之间的样式污染，使用了其他办法。</p><p><strong>方法一</strong></p><p> <code>&gt;&gt;&gt;</code>(深度作用选择器) 或者 有些sass类的预处理器无法正确解析可以使用 /deep/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*----html----*/</span><br><span class="line">&lt;div class=<span class="string">"announcement_img"</span> v-html=<span class="string">"announcement.content"</span>&gt;&lt;/div&gt;</span><br><span class="line">/*----style----*/</span><br><span class="line">.announcement_img&gt;&gt;&gt;img&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">display: block;</span><br><span class="line">height: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><p>updated周期函数中，js动态配置样式。</p><p>首先需要清楚updated周期函数在什么时候起作用，①data里面需要有该数据变量如arr ②在页面重新渲染arr完成后才进入updated。更深入的会在以后学习。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">updated:function()&#123;</span><br><span class="line">console.log(&quot;1==我会先执行&quot;);</span><br><span class="line">this.$nextTick(function()&#123;</span><br><span class="line">//在下次 DOM 更新循环结束之后执行这个回调。在修改数据之后立即使用这个方法，获取更新后的DOM.</span><br><span class="line">console.log(&quot;3==我只能等页面渲染完了才会立即执行&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&quot;2==我虽然在最后但会比$nextTick先执行&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="\img\软件超市\图2.png" alt="视图2"></p><p>如果后期发现更好的或者更多的办法会重新更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在通过v-html把后台传过来的内容渲染到页面之后，发现后台传来的图片是限制了宽和高的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;\img\软件超市\图1.png&quot; alt=&quot;视图1&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过查资料发现，这里解析是把v-html传来的数据作为了一个新的组件，所以在s
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
      <category term="软件超市" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82/"/>
    
  </entry>
  
  <entry>
    <title>css总结</title>
    <link href="http://yoursite.com/2019/05/18/css%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/05/18/css总结/</id>
    <published>2019-05-18T14:01:07.000Z</published>
    <updated>2019-05-30T14:47:03.404Z</updated>
    
    <content type="html"><![CDATA[<p>在学习的过程中，对css有了更深一步的了解，把遇见过的问题、经常使用到的样式做一个总结。</p><h2 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h2><p><a href="http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css" target="_blank" rel="noopener">http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css</a></p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><ul><li>方法一<br>  给受影响的盒子添加clear属性，添加了clear的属性不可以添加margin-top</li><li><p>方法二</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">浮动元素::after&#123;</span><br><span class="line">  content:&quot;&quot;;</span><br><span class="line">  display:block;</span><br><span class="line">  height:0;</span><br><span class="line">  visibility:hidden;</span><br><span class="line">  clear:both</span><br><span class="line">&#125;</span><br><span class="line">浮动元素&#123;</span><br><span class="line">  *zoom:1;//兼容IE6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="盒子的问题"><a href="#盒子的问题" class="headerlink" title="盒子的问题"></a>盒子的问题</h2><ul><li>在默认布局的垂直方向上，外边距有合并现象(BFC块级，水平方向也可以，但是块级都是占一行的，而浮动成水平的 BFC的区域不会与float box重叠)</li><li>嵌套盒子时，里面的盒子设置margin-top时，父盒子一起被顶下来。<br>  解决办法：父盒子添加border，或者overflow：hidden</li></ul><h2 id="图片的问题"><a href="#图片的问题" class="headerlink" title="图片的问题"></a>图片的问题</h2><ul><li><p>自适应图片</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">max-width:100%;</span><br><span class="line">height:auto;</span><br><span class="line">display:block</span><br></pre></td></tr></table></figure></li><li><p>设置图片img的width和height的时候，指定其中一个另外一个自动算出来</p></li><li><p>当图片宽度大于父元素宽度时，居中：父元素text-align：center,子元素：margin：0，-100%</p></li></ul><h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><p><strong>浮动之后的高宽不设定则有内容撑开</strong></p><ol><li><p>居中元素有宽度</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   .center &#123;</span><br><span class="line">width: 960px;</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>margin:0 auto 使用场景<br>块级元素：给定要居中的块级元素的宽度<br>行内元素：<br> <br><br>①设置display:block。<br> <br><br>②给定要居中的行内元素的宽度。（行内元素设置成块级元素后可以对其宽高进行设置）<br> <br></p><p> <strong>所有元素也可以通过对父元素设置 text-align：center；的方式来实现居中。(而对于块元素来说，对要居中的元素自身进行设置text-align:center也能实现居中——而无需对其父元素进行设置) 。</strong></p><p>  <strong>浮动、绝对定位、固定定位的盒子失效。</strong></p></li></ol><ol start="3"><li>脱离文档流元素的水平垂直<br> margin:auto或者按圆点定位定在正中间，margin设置成负的宽高的一般</li></ol><p>   法二：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line">      position: relative;</span><br><span class="line">      border: 1px solid #465468;</span><br><span class="line"> &#125;</span><br><span class="line"> img&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      margin: auto;</span><br><span class="line">      top: 0;</span><br><span class="line">      left: 0;</span><br><span class="line">      right: 0;</span><br><span class="line">      bottom: 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>指定宽高元素水平居中</p><p>还可以定位到50% 50% 改变margin-left/margin-top为元素的一半定位（元素加padding，可以结合box-sizing）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#test&#123;</span><br><span class="line">position:absolute;</span><br><span class="line">left:0;</span><br><span class="line">right:0;</span><br><span class="line">bottom:0;</span><br><span class="line">top:0</span><br><span class="line">margin:auto;</span><br><span class="line">width:100px</span><br><span class="line">height:100px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图片的垂直居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//img的外部包含元素 如div</span><br><span class="line">div&#123;</span><br><span class="line">  text-align:center;</span><br><span class="line">&#125;</span><br><span class="line"> div:after&#123;</span><br><span class="line"> content:&quot;&quot;;</span><br><span class="line"> display:inline-block;</span><br><span class="line"> height:100%</span><br><span class="line"> vertical-align:middle;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line"> vertical-align:middle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h2><ol><li>超出省略号</li></ol><p>盒子不可以仅由内容撑开的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">white-space:nowrap //不换行</span><br><span class="line">overflow：hidden//超出部分截掉</span><br><span class="line">text-overflow:ellipsis //省略号</span><br></pre></td></tr></table></figure><ol start="2"><li>禁止滚动条</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">html,body&#123;</span><br><span class="line">height:100%</span><br><span class="line">overflow:hidden</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习的过程中，对css有了更深一步的了解，把遇见过的问题、经常使用到的样式做一个总结。&lt;/p&gt;
&lt;h2 id=&quot;清除默认样式&quot;&gt;&lt;a href=&quot;#清除默认样式&quot; class=&quot;headerlink&quot; title=&quot;清除默认样式&quot;&gt;&lt;/a&gt;清除默认样式&lt;/h2&gt;&lt;p&gt;&lt;a
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>markdown学习笔记</title>
    <link href="http://yoursite.com/2019/05/15/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/15/markdown学习笔记/</id>
    <published>2019-05-15T14:19:13.000Z</published>
    <updated>2019-06-11T14:26:17.179Z</updated>
    
    <content type="html"><![CDATA[<p>写博客的时候有些不常用的语法会有遗漏，今天重新学习markdown常用语法并把记录下来。</p><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>   兼容HTML。不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。<br>   <span id="jump">用于瞄点测试</span></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>方法一：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 第一级标题 `&lt;h1&gt;`</span><br><span class="line">## 第二级标题 `&lt;h2&gt;`</span><br><span class="line">### 第三级标题 `&lt;h3&gt;`</span><br><span class="line">#### 第二四级标题 `&lt;h4&gt;`</span><br><span class="line">##### 第五级标题 `&lt;h5&gt;`</span><br><span class="line">###### 第六级标题 `&lt;h6&gt;`</span><br></pre></td></tr></table></figure></code></pre><p>方法二：</p><p>任何数量的 = 和 - 都可以有效果。</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">=</span><br><span class="line">二级标题</span><br><span class="line">-</span><br></pre></td></tr></table></figure></code></pre><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p><strong>如果* 和 _ 两边都有空白的话，它们就只会被当成普通的符号</strong><br>如果要在文字前后直接插入普通的星号或底线，可以用反斜线。</p><p>斜体 <code>*内容*</code>或者<code>_内容_</code>   （em）<br>加粗 <code>**内容**</code>或者<code>__内容__</code>   （strong）<br>倾斜加粗 <code>***内容***</code><br>删除线 <code>~~内容~~</code></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>行内式</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[我的博客](https://biubiuins.github.io/)</span><br><span class="line">自动生成连接  &lt;https://biubiuins.github.io/&gt;</span><br></pre></td></tr></table></figure></code></pre><p>效果：<br><a href="https://biubiuins.github.io/" target="_blank" rel="noopener">我的博客</a><br>自动生成连接  <a href="https://biubiuins.github.io/" target="_blank" rel="noopener">https://biubiuins.github.io/</a></p><p>添加图片形式和链接类似。</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：![图片描述](url)</span><br><span class="line">![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)</span><br></pre></td></tr></table></figure></code></pre><p>效果：</p><p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><ol><li>只要简单地缩进 4 个空格或是 1 个制表符就可以。 <strong>需要和普通段落之间存在空行！</strong></li><li>`内容`</li><li>多行代码块与语法高亮：在需要高亮的代码块的前一行及后一行使用三个单反引号`包裹，就可以了。</li><li>代码块中包含html代码。在代码区块里面， &amp; 、&lt; 和 > 会自动转成 HTML 实体</li></ol><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ol><li>在被引用的文本前加上&gt;符号，以及一个空格就可以了，如果只输入了一个&gt;符号会产生一个空白的引用。</li><li>引用可以嵌套</li><li>引用的区块内也可以使用其他的Markdown 语法</li></ol><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong>符号后面一定要有一个空格，起到缩进的作用。</strong><br>还需要注意的是在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\就可以了。</p><ol><li>无序列表<br>使用 *，+，- 表示无序列表。</li><li>有序列表<br>使用数字和一个英文句点表示有序列表。</li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">姓名|分数</span><br><span class="line">-|-</span><br><span class="line">张三|50</span><br><span class="line">李四|80</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>张三</td><td>50</td></tr><tr><td>李四</td><td>80</td></tr></tbody></table><p>表格对齐方式：我们可以指定表格单元格的对齐方式，冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">姓名|分数</span><br><span class="line">:-|-:</span><br><span class="line">张三|50</span><br><span class="line">李四|80</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th style="text-align:left">姓名</th><th style="text-align:right">分数</th></tr></thead><tbody><tr><td style="text-align:left">张三</td><td style="text-align:right">50</td></tr><tr><td style="text-align:left">李四</td><td style="text-align:right">80</td></tr></tbody></table><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure><h2 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h2><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>方法1: 连续两个以上空格+回车<br>方法2：使用html语言换行标签</p><h3 id="其他特殊字符"><a href="#其他特殊字符" class="headerlink" title="其他特殊字符"></a>其他特殊字符</h3><p><a href="https://unicode-table.com/cn/" target="_blank" rel="noopener">unicode字符编码</a></p><h3 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构，需要独占一行才能生效。</p><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><p>Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span>我是华文彩云<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span>color=gray<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0099ff</span> <span class="attr">size</span>=<span class="string">5</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span>color=#0099ff size=5 face="黑体"<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><p>背景色需要借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色的功能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">pink</span>&gt;</span>背景色是：pink<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><table><tr><td bgcolor="pink">背景色是：pink</td></tr></table><h3 id="瞄点"><a href="#瞄点" class="headerlink" title="瞄点"></a>瞄点</h3><p>自定义瞄点</p><p>标签形式的锚点目标的id特性值中是不能含有中文字符；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//建立一个跳转链接</span><br><span class="line">[说明文字](#jump)</span><br><span class="line">//需要跳转到的位置</span><br><span class="line">&lt;span id = &quot;jump&quot;&gt;跳转到的位置&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>效果：<a href="#jump">瞄点</a></p><p>Markdown会自动给每一个h1~h6标题生成一个锚，其id就是标题内容。如<a href="#表格">表格</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写博客的时候有些不常用的语法会有遗漏，今天重新学习markdown常用语法并把记录下来。&lt;/p&gt;
&lt;h2 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h2&gt;&lt;p&gt;   兼容HTML。不在 Markd
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>less学习笔记</title>
    <link href="http://yoursite.com/2019/05/13/less%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/13/less学习笔记/</id>
    <published>2019-05-13T14:21:01.000Z</published>
    <updated>2019-05-15T13:48:17.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="less"><a href="#less" class="headerlink" title="less"></a>less</h1><blockquote><p>参考文章:<a href="https://segmentfault.com/a/1190000012360995" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012360995</a></p></blockquote><p> less属于css的一种预处理器（处理在浏览器运行前）,作为css的扩展，是一种动态样式语言。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p> //开头的注释，不会被编译到css文件中，以/<em> </em>/注释的内容会被编译到css文件</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p> 以<code>@</code>开头定义变量，使用是直接 @定义的名称<br> 变量名必须使用大括号包裹<br> 声明变量（类比于写好的css引用）类似于混合方法  结构: @name: { 属性: 值 ;};  使用：@name();</p><p> 使用@来申明一个变量: @pink:pink //不要添加引号</p><ol><li>作为普通属性值只是来使用：直接使用@pink</li><li>作为选择器和属性名: @{selector的值}的形式（不常用）</li><li>作为URL：@{url} （@images:’../img’ 注意要加引号）</li><li><p>变量的延迟加载（一个块级域解析完再加载变量）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">@color: #999;</span><br><span class="line">@bgColor: skyblue;//不要添加引号</span><br><span class="line">@width: 50%;</span><br><span class="line">#wrap &#123;</span><br><span class="line">  color: @color;</span><br><span class="line">  width: @width;</span><br><span class="line">&#125;</span><br><span class="line">/* 选择器变量 */</span><br><span class="line">  @mySelector: #wrap;</span><br><span class="line">   @Wrap: wrap;</span><br><span class="line">   @&#123;mySelector&#125;&#123; //变量名 必须使用大括号包裹</span><br><span class="line">     color: #999;</span><br><span class="line">     width: 50%;</span><br><span class="line">   &#125;</span><br><span class="line">   .@&#123;Wrap&#125;&#123;</span><br><span class="line">     color:#ccc;</span><br><span class="line">   &#125;</span><br><span class="line">   #@&#123;Wrap&#125;&#123;</span><br><span class="line">     color:#666;</span><br><span class="line">   &#125;</span><br><span class="line"> /* url 变量*/</span><br><span class="line">  @images: &quot;../img&quot;;//需要加引号</span><br><span class="line">       body &#123;</span><br><span class="line">         background: url(&quot;@&#123;images&#125;/dog.png&quot;);//变量名 必须使用大括号包裹</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">/* 声明变量 */</span><br><span class="line">      @background: &#123;background:red;&#125;;</span><br><span class="line">      #main&#123;</span><br><span class="line">          @background();</span><br><span class="line">      &#125;</span><br><span class="line">      @Rules:&#123;</span><br><span class="line">          width: 200px;</span><br><span class="line">          height: 200px;</span><br><span class="line">          border: solid 1px red;</span><br><span class="line">      &#125;;</span><br><span class="line">      #con&#123;</span><br><span class="line">        @Rules();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /* 生成的 CSS */</span><br><span class="line">      #main&#123;</span><br><span class="line">        background:red;</span><br><span class="line">      &#125;</span><br><span class="line">      #con&#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        border: solid 1px red;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="变量的运算"><a href="#变量的运算" class="headerlink" title="变量的运算"></a>变量的运算</h3><p>注意点：</p></li><li>加减法时，以第一个数据的单位为基准</li><li><p>乘除法时，注意单位一定要统一</p><h2 id="less嵌套规则"><a href="#less嵌套规则" class="headerlink" title="less嵌套规则"></a>less嵌套规则</h2><p>和html结构相似，层层嵌套<br><code>&amp;</code>代表的上一层选择器的名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">#header&#123;</span><br><span class="line">  &amp;:after&#123;</span><br><span class="line">    content:&quot;Less is more!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  .title&#123;</span><br><span class="line">    font-weight:bold;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;_content&#123;//理解方式：直接把 &amp; 替换成 #header</span><br><span class="line">    margin:20px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/* 生成的 CSS */</span><br><span class="line">#header::after&#123;</span><br><span class="line">  content:&quot;Less is more!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">#header .title&#123; //嵌套了</span><br><span class="line">  font-weight:bold;</span><br><span class="line">&#125;</span><br><span class="line">#header_content&#123;//没有嵌套！</span><br><span class="line">    margin:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="less中的混合"><a href="#less中的混合" class="headerlink" title="less中的混合"></a>less中的混合</h2><p> 混合：将一系列的规则集引入另一个规则集中<br> 普通混合(编译到原生css中)<br> 不带输出的混合(加括号)<br> 混合使用<code>.</code>或 <code>#</code>的形式来定义；声明变量使用的是<code>@</code>来定义，@变量名（）来使用</p><h3 id="普通混合"><a href="#普通混合" class="headerlink" title="普通混合"></a>普通混合</h3><p> 最好写成后面带（）的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">    .card &#123; // 等价于 .card()</span><br><span class="line">        background: #f6f6f6;</span><br><span class="line">        -webkit-box-shadow: 0 1px 2px rgba(151, 151, 151, .58);</span><br><span class="line">        box-shadow: 0 1px 2px rgba(151, 151, 151, .58);</span><br><span class="line">    &#125;</span><br><span class="line">    #wrap&#123;</span><br><span class="line">      .card;//等价于.card();</span><br><span class="line">    &#125;</span><br><span class="line">    //其中 .card 与 .card() 是等价的。</span><br></pre></td></tr></table></figure><h3 id="带参数的混合"><a href="#带参数的混合" class="headerlink" title="带参数的混合"></a>带参数的混合</h3><p>注意点：</p><ol><li>Less 可以使用默认参数，如果 没有传参数，那么将使用默认参数。冒号后面的是默认值<br><code>2. @arguments</code>代表全部参数，实参列表</li><li><p>传的参数中必须带单位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">     .border(@a:10px,@b:50px,@c:30px,@color:#000)&#123;</span><br><span class="line">         border:solid 1px @color;</span><br><span class="line">         box-shadow: @arguments;//指代的是 全部参数</span><br><span class="line">     &#125;</span><br><span class="line">     #main&#123;</span><br><span class="line">         .border(0px,5px,30px,red);//必须带着单位</span><br><span class="line">     &#125;</span><br><span class="line">     #wrap&#123;</span><br><span class="line">         .border(0px);</span><br><span class="line">     &#125;</span><br><span class="line">     /*  命名参数 */</span><br><span class="line">     #wrap&#123;</span><br><span class="line">       .border(@color:black);</span><br><span class="line">         &#125;</span><br><span class="line">     #content&#123;</span><br><span class="line">       .border;//等价于 .border()</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     /* 生成的 CSS */</span><br><span class="line">     #main&#123;</span><br><span class="line">         border:solid 1px red;</span><br><span class="line">         box-shadow:0px,5px,30px,red;</span><br><span class="line">     &#125;</span><br><span class="line">     #wrap&#123;</span><br><span class="line">         border:solid 1px #000;</span><br><span class="line">         box-shadow: 0px 50px 30px #000;</span><br><span class="line">     &#125;</span><br><span class="line">     #content&#123;</span><br><span class="line">         border:solid 1px #000;</span><br><span class="line">         box-shadow: 10px 50px 30px #000;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><p>注意点：</p><ol><li><p>第一个参数 <code>left</code> 要会找到方法中匹配程度最高的，如果匹配程度相同，将全部选择，并存在着样式覆盖替换。</p></li><li><p>如果匹配的参数 是变量， <code>@_</code>表示的会被调用任意标志的 。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">      .triangle(top,@width:20px,@color:#000)&#123;</span><br><span class="line">          border-color:transparent  transparent @color transparent ;</span><br><span class="line">      &#125;</span><br><span class="line">      .triangle(right,@width:20px,@color:#000)&#123;</span><br><span class="line">          border-color:transparent @color transparent  transparent ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .triangle(bottom,@width:20px,@color:#000)&#123;</span><br><span class="line">          border-color:@color transparent  transparent  transparent ;</span><br><span class="line">      &#125;</span><br><span class="line">      .triangle(left,@width:20px,@color:#000)&#123;</span><br><span class="line">          border-color:transparent  transparent  transparent @color;</span><br><span class="line">      &#125;</span><br><span class="line">      .triangle(@_,@width:20px,@color:#000)&#123;</span><br><span class="line">          border-style: solid;</span><br><span class="line">          border-width: @width;</span><br><span class="line">      &#125;</span><br><span class="line">      #main&#123;</span><br><span class="line">          .triangle(left, 50px, #999)</span><br><span class="line">      &#125;</span><br><span class="line">      /* 生成的 CSS */</span><br><span class="line">      #main&#123;</span><br><span class="line">        border-color:transparent  transparent  transparent #999;</span><br><span class="line">        border-style: solid;</span><br><span class="line">        border-width: 50px;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="方法的命名规范"><a href="#方法的命名规范" class="headerlink" title="方法的命名规范"></a>方法的命名规范</h2><p>注意点：</p><ul><li>在 CSS 中<code>&gt;</code> 选择器，选择的是 儿子元素，就是 必须与父元素 有直接血源的元素。</li><li>在引入命令空间时，如使用 <code>&gt;</code> 选择器，父元素不能加 括号。</li><li>不得单独使用命名空间的方法 必须先引入命名空间，才能使用 其中方法。</li><li><p>子方法 可以使用上一层传进来的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">#card()&#123;</span><br><span class="line">    background: #723232;</span><br><span class="line">    .d(@w:300px)&#123;</span><br><span class="line">        width: @w;</span><br><span class="line"></span><br><span class="line">        #a(@h:300px)&#123;</span><br><span class="line">            height: @h;//可以使用上一层传进来的方法</span><br><span class="line">            width: @w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#wrap&#123;</span><br><span class="line">    #card &gt; .d &gt; #a(100px); // 父元素不能加 括号</span><br><span class="line">&#125;</span><br><span class="line">#main&#123;</span><br><span class="line">    #card .d();</span><br><span class="line">&#125;</span><br><span class="line">#con&#123;</span><br><span class="line">    //不得单独使用命名空间的方法</span><br><span class="line">    //.d() 如果前面没有引入命名空间 #card ，将会报错</span><br><span class="line"></span><br><span class="line">    #card; // 等价于 #card();</span><br><span class="line">    .d(20px); //必须先引入 #card</span><br><span class="line">&#125;</span><br><span class="line">/* 生成的 CSS */</span><br><span class="line">#wrap&#123;</span><br><span class="line">  height:100px;</span><br><span class="line">  width:300px;</span><br><span class="line">&#125;</span><br><span class="line">#main&#123;</span><br><span class="line">  width:300px;</span><br><span class="line">&#125;</span><br><span class="line">#con&#123;</span><br><span class="line">  width:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="less的继承"><a href="#less的继承" class="headerlink" title="less的继承"></a>less的继承</h2><p>extend 是 Less 的一个伪类。它可继承 所匹配声明中的全部样式。<br>extend（这里放规则）是一个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">//规则的定义，没有参数</span><br><span class="line">.animation&#123;</span><br><span class="line">    transition: all .3s ease-out;</span><br><span class="line">    .hide&#123;</span><br><span class="line">      transform:scale(0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#main&#123;</span><br><span class="line">    &amp;:extend(.animation);</span><br><span class="line">&#125;</span><br><span class="line">#con&#123;</span><br><span class="line">    &amp;:extend(.animation .hide);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 生成后的 CSS */</span><br><span class="line">.animation,#main&#123;</span><br><span class="line">  transition: all .3s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">.animation .hide , #con&#123;</span><br><span class="line">    transform:scale(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="all全局搜索替换"><a href="#all全局搜索替换" class="headerlink" title="all全局搜索替换"></a>all全局搜索替换</h3><p>使用选择器匹配到的 全部声明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">#main&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">#main &#123;</span><br><span class="line">  &amp;:after &#123;</span><br><span class="line">    content:&quot;Less is good!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#wrap:extend(#main all) &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* 生成的 CSS */</span><br><span class="line">#main,#wrap&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">#main:after, #wrap:after &#123;</span><br><span class="line">    content: &quot;Less is good!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>从表面 看来，extend 与 方法 最大的差别，就是 extend 是同个选择器共用同一个声明，而 方法 是使用自己的声明。</p></li><li><p>~”XXXXX” less之中避免编译，让浏览器编译</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;less&quot;&gt;&lt;a href=&quot;#less&quot; class=&quot;headerlink&quot; title=&quot;less&quot;&gt;&lt;/a&gt;less&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;参考文章:&lt;a href=&quot;https://segmentfault.com/a/11900000
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>element-ui总结</title>
    <link href="http://yoursite.com/2019/04/19/element-ui%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/19/element-ui总结/</id>
    <published>2019-04-19T07:37:38.000Z</published>
    <updated>2019-05-13T14:26:14.717Z</updated>
    
    <content type="html"><![CDATA[<p>在一次项目中用到了element-ui框架，对在使用过程中遇见的问题进行总结（持续更新）。</p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="1-数据为二级对象时"><a href="#1-数据为二级对象时" class="headerlink" title="1.数据为二级对象时"></a>1.数据为二级对象时</h3><p>数据为二级对象时，验证的数据要用字符串形式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rules:&#123;</span><br><span class="line">   <span class="string">"captainInformation.name"</span>: [</span><br><span class="line">     &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入姓名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;,</span><br><span class="line">     ],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-动态添加的数据"><a href="#2-动态添加的数据" class="headerlink" title="2.动态添加的数据"></a>2.动态添加的数据</h3><p>动态添加的输入框或表单绑定数据时注意 <code>:prop=&quot;&#39;v-for绑定的数组.&#39; + index + &#39;.v-model绑定的变量&#39;&quot;</code><br>   我是直接把验证写在标签里面的</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;姓名&quot; :prop=&quot;&apos;memberInformation.&apos;+index+&apos;.name&apos;&quot; :rules=&quot;[ &#123; required: true, message: &apos;请输入姓名&apos;, trigger: &apos;blur&apos; &#125;]&quot;&gt;</span><br></pre></td></tr></table></figure><p>   增加与减少成员<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//增加成员</span><br><span class="line"> addmember() &#123;</span><br><span class="line">   let newmember = &#123;</span><br><span class="line">         name: &quot;&quot;,</span><br><span class="line">         studentId: &quot;&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">        this.form.memberInformation.push(newmember)</span><br><span class="line">      &#125;,</span><br><span class="line">      //减少成员</span><br><span class="line">      reducemember(index) &#123;</span><br><span class="line">        this.form.memberInformation.splice(index, 1)</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></p><blockquote><p>这个是我在项目中用到的办法，在阅读时发现了另一种情况的解决办法：<a href="https://blog.csdn.net/weixin_41041379/article/details/81908788" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41041379/article/details/81908788</a></p></blockquote><h3 id="3-普通输入验证"><a href="#3-普通输入验证" class="headerlink" title="3.普通输入验证"></a>3.普通输入验证</h3><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rules:&#123;</span><br><span class="line">data1:[</span><br><span class="line"><span class="comment">//必填，trigger是触发类型</span></span><br><span class="line">&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入学号'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;,</span><br><span class="line"><span class="comment">//数字类型 'number', 整数: 'integer', 浮点数: 'float'</span></span><br><span class="line"><span class="comment">//使用整数的时候，首先要保证数据类型为数字，可以v-model.number绑定数据</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">'integer'</span>, <span class="attr">message</span>: <span class="string">'格式错误'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;,</span><br><span class="line"><span class="comment">//长度限制</span></span><br><span class="line">&#123; <span class="attr">min</span>: <span class="number">2</span>, <span class="attr">max</span>: <span class="number">4</span>, <span class="attr">message</span>: <span class="string">'长度在 2 到 4 个字符'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="4-手动验证"><a href="#4-手动验证" class="headerlink" title="4.手动验证"></a>4.手动验证</h3><p>   第一种是直接写在rules的里面<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rules:&#123;</span><br><span class="line">data1:[</span><br><span class="line">     &#123; validator:(rule,value,callback)=&gt;&#123;</span><br><span class="line">                if(/^\d+$/.test(value) == false)&#123;</span><br><span class="line">                  callback(new Error(&quot;只能输入数字&quot;));</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                  callback();</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>   第二种写法是抽离出来</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//注意书写位置</span><br><span class="line"> data()&#123;</span><br><span class="line">  let checkAge = (rule, value, callback) =&gt; &#123;</span><br><span class="line">     if (!value) &#123;</span><br><span class="line">       return callback(new Error(&apos;年龄不能为空&apos;));</span><br><span class="line">     &#125;</span><br><span class="line">      if (!Number.isInteger(value)) &#123;</span><br><span class="line">         callback(new Error(&apos;请输入数字值&apos;));</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">         if (value &lt; 18) &#123;</span><br><span class="line">           callback(new Error(&apos;必须年满18岁&apos;));</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">           callback();</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> return &#123;</span><br><span class="line"> rules:&#123;</span><br><span class="line">     age: [</span><br><span class="line">    &#123; trigger: &apos;blur&apos;, validator: checkAge &#125;</span><br><span class="line">           ]</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="5-手动上传文件"><a href="#5-手动上传文件" class="headerlink" title="5.手动上传文件"></a>5.手动上传文件</h3><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line">     <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">          <span class="attr">action</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ref</span>=<span class="string">"upload"</span></span></span><br><span class="line"><span class="tag">          //覆盖默认的上传行为，自定义上传的实现</span></span><br><span class="line"><span class="tag">          <span class="attr">:http-request</span>=<span class="string">"finish"</span></span></span><br><span class="line"><span class="tag">          //取消自动上传</span></span><br><span class="line"><span class="tag">          <span class="attr">:auto-upload</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">slot</span>=<span class="string">"trigger"</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>选取文件<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"tip"</span> <span class="attr">class</span>=<span class="string">"el-upload__tip"</span>&gt;</span>请上传您的项目功能清单<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">//js</span><br><span class="line"> finish() &#123;</span><br><span class="line">  this.$refs.form.validate(valid =&gt; &#123;</span><br><span class="line">         // 验证成功</span><br><span class="line">         if (valid) &#123;</span><br><span class="line">         //这里的需求是必须上传文件</span><br><span class="line">           const file = this.$refs.upload.uploadFiles[0];</span><br><span class="line">           if (!file) &#123;</span><br><span class="line">                     this.$message(&#123;</span><br><span class="line">                       type: "warning",</span><br><span class="line">                       message: "请选择文件"</span><br><span class="line">                     &#125;);</span><br><span class="line">                     return;</span><br><span class="line">                   &#125;</span><br><span class="line">           //数据处理</span><br><span class="line">           let formData = new FormData();</span><br><span class="line">           formData.append("projectId", this.runId);</span><br><span class="line">           formData.append("timeNode",JSON.stringify(this.form.timeNode));</span><br><span class="line">           formData.append("teamId", 1);</span><br><span class="line">           formData.append("functionFile",file.raw );</span><br><span class="line">           //....中间的弹框确定等省略</span><br><span class="line">           submitApply(formData)</span><br><span class="line">         &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="6-动态获取选项-模糊查询"><a href="#6-动态获取选项-模糊查询" class="headerlink" title="6.动态获取选项+模糊查询"></a>6.动态获取选项+模糊查询</h3><p><img src="/img/element-ui/element-ui.png" alt="演示图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在一次项目中用到了element-ui框架，对在使用过程中遇见的问题进行总结（持续更新）。&lt;/p&gt;
&lt;h2 id=&quot;表单&quot;&gt;&lt;a href=&quot;#表单&quot; class=&quot;headerlink&quot; title=&quot;表单&quot;&gt;&lt;/a&gt;表单&lt;/h2&gt;&lt;h3 id=&quot;1-数据为二级对象时&quot;&gt;
      
    
    </summary>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="库" scheme="http://yoursite.com/tags/%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>order2</title>
    <link href="http://yoursite.com/2019/03/30/order2/"/>
    <id>http://yoursite.com/2019/03/30/order2/</id>
    <published>2019-03-30T12:25:04.000Z</published>
    <updated>2019-03-30T12:25:05.001Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动端—点餐(前端)1</title>
    <link href="http://yoursite.com/2019/03/28/order1/"/>
    <id>http://yoursite.com/2019/03/28/order1/</id>
    <published>2019-03-28T13:17:35.000Z</published>
    <updated>2019-03-30T12:04:11.714Z</updated>
    
    <content type="html"><![CDATA[<p>学习了vue之后，用vue全家桶进行了项目练习。此篇博客记录开发流程。</p><h2 id="1-创建客户端项目"><a href="#1-创建客户端项目" class="headerlink" title="1.创建客户端项目"></a>1.创建客户端项目</h2><h3 id="1-1-使用-vue-cli-脚手架-搭建项目"><a href="#1-1-使用-vue-cli-脚手架-搭建项目" class="headerlink" title="1.1 使用 vue-cli(脚手架)搭建项目"></a>1.1 使用 vue-cli(脚手架)搭建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack order</span><br><span class="line"><span class="built_in">cd</span> order</span><br><span class="line">npm run dev (启动)</span><br></pre></td></tr></table></figure><h3 id="1-2-项目结构分析"><a href="#1-2-项目结构分析" class="headerlink" title="1.2 项目结构分析"></a>1.2 项目结构分析</h3><p><strong> order </strong></p><blockquote><ul><li>|– build : webpack 相关的配置文件夹(基本不需要修改)</li><li>|– config: webpack 相关的配置文件夹(基本不需要修改)</li><li>|– index.js: 指定的后台服务的端口号和静态资源文件夹</li><li>|– node_modules</li><li>|– src : 源码文件夹</li><li>|– main.js: 应用入口 js  （初始化vue实例并使用需要的插件 ）</li><li>|– static: 静态资源文件夹</li><li>|– .babelrc: babel 的配置文件</li><li>|– .editorconfig: 通过编辑器的编码/格式进行一定的配置</li><li>|– .gitignore: git 版本管理忽略的配置</li><li>|– index.html: 默认的主渲染页面文件</li><li>|– package.json: 应用包配置文件</li><li>|– README.md: 应用描述说明的 readme 文件</li></ul></blockquote><h3 id="1-3-编码测试与打包发布项目"><a href="#1-3-编码测试与打包发布项目" class="headerlink" title="1.3 编码测试与打包发布项目"></a>1.3 编码测试与打包发布项目</h3><ul><li><p>编码测试</p><p>npm run dev</p><p>编码, 自动编译打包(HMR), 查看效果</p><font color="pink">config/index/  修改autoOpenBrowser: true后可以自动开启</font></li><li><p>打包发布</p><p>npm run build</p><p>npm install -g serve</p><p>serve dist</p></li></ul><h2 id="2-开发资源准备"><a href="#2-开发资源准备" class="headerlink" title="2. 开发资源准备"></a>2. 开发资源准备</h2><h3 id="2-1-字体图片"><a href="#2-1-字体图片" class="headerlink" title="2.1 字体图片"></a>2.1 字体图片</h3><ul><li>生成项目图标的<a href="//at.alicdn.com/t/font_726904_68moeoeirj3.css">Font Class地址</a><br>添加到index.html</li></ul><h3 id="2-2-依赖安装"><a href="#2-2-依赖安装" class="headerlink" title="2.2 依赖安装"></a>2.2 依赖安装</h3><ol><li>安装stylus依赖包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install stylus stylus-loader --save-dev</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>在common文件夹下新建stylus文件夹</p></li><li><p>在stylus文件加下面新建mixins.styl文件</p></li><li><p>注意在组件内编写样式时要声明lang和rel</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span><span class="undefined"></span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>安装element-ui框架<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure></li></ol><ul><li>在main.js中引入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import ElementUI from &apos;element-ui&apos;;</span><br><span class="line">import &apos;element-ui/lib/theme-chalk/index.css&apos;;</span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-移动端"><a href="#2-3-移动端" class="headerlink" title="2.3 移动端"></a>2.3 移动端</h3><ol><li>Fastclick</li></ol><blockquote><p>当用户一次点击屏幕之后，浏览器并不能立刻判断用户是要进行双击缩放，还是想要进行单击操作。因此，iOS Safari 就等待 300 毫秒，以判断用户是否再次点击了屏幕。 于是，300 毫秒延迟就这么诞生了。</p></blockquote><ul><li><p>安装fastclick库  解决点击响应延时 0.3s 问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install fastclick --save</span><br></pre></td></tr></table></figure></li><li><p>在main.js中引入，并绑定到body</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> FastClick <span class="keyword">from</span> <span class="string">'fastclick'</span></span><br><span class="line">FastClick.attach(<span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>viewport</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-4-浏览器样式重置"><a href="#2-4-浏览器样式重置" class="headerlink" title="2.4 浏览器样式重置"></a>2.4 浏览器样式重置</h3><ul><li><p>在项目主目录下的static文件夹内新建css文件夹</p></li><li><p>在css文件夹内新建重置样式文件reset.css</p></li><li><p>在index.html 中引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/css/reset.css"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-vue组件化"><a href="#3-vue组件化" class="headerlink" title="3. vue组件化"></a>3. vue组件化</h2><h3 id="3-1分析整个项目的Vue组件结构"><a href="#3-1分析整个项目的Vue组件结构" class="headerlink" title="3.1分析整个项目的Vue组件结构"></a>3.1分析整个项目的Vue组件结构</h3><p><img src="/img/order/结构图.png" alt="Vue组件结构图"></p><ol><li>页面底部的FooterGuide组件只是用来放pages里的组件的容器，所以它不是路由组件</li><li>页面最上面的标题栏在我们的项目中属于路由组件的组成部分（与中间内容部分在一起）</li><li>但每个路由组件中都有最顶部的组件且相似度很高，所以可以将其抽取成为一个单独的组件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习了vue之后，用vue全家桶进行了项目练习。此篇博客记录开发流程。&lt;/p&gt;
&lt;h2 id=&quot;1-创建客户端项目&quot;&gt;&lt;a href=&quot;#1-创建客户端项目&quot; class=&quot;headerlink&quot; title=&quot;1.创建客户端项目&quot;&gt;&lt;/a&gt;1.创建客户端项目&lt;/h2&gt;&lt;h
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="项目实战" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>fiddle</title>
    <link href="http://yoursite.com/2019/01/21/fiddle/"/>
    <id>http://yoursite.com/2019/01/21/fiddle/</id>
    <published>2019-01-21T07:32:02.000Z</published>
    <updated>2019-01-28T06:52:52.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fiddle学习笔记"><a href="#fiddle学习笔记" class="headerlink" title="fiddle学习笔记"></a>fiddle学习笔记</h1><h2 id="简介fiddle"><a href="#简介fiddle" class="headerlink" title="简介fiddle"></a>简介fiddle</h2><p>fiddle是Web调试工具，相当于代理服务器，先到fiddle再到目标服务器</p><ul><li>截获http/https请求并查看</li><li>伪造请求</li><li>测试性能</li></ul><p>两种代理模式</p><ol><li>流模式(streaming):实时，更接近与浏览器本身的工作</li><li>缓冲模式(buffering):等待所有数据都准备好了，才返回。 可控制最后的服务器响应</li></ol><p>使用场景</p><ul><li>开发环境host配置</li><li>前后端接口调试</li><li>线上bugfix</li><li>性能分析与优化</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>工具条常用功能</strong></p><ol><li>气泡：捕捉到的会话添加备注</li><li>replay：请求回放</li><li>×：清空监控面板</li><li>GO：调试Debug，res，req请求断点</li><li>stream：模式切换</li><li>decode：解压请求</li><li>any process：过滤请求</li><li>find：查找</li><li>clear cache：清空浏览器缓存</li><li>textWizard：编码/解码</li><li>tearoff：面板分离</li><li>MSDN：MSDN搜索</li></ol><p><strong>状态栏</strong></p><ol><li>黑色的框：命令行</li><li>Capturing: 控制fiddle是否工作</li></ol><p><strong>监控面板的使用</strong></p><ol><li>statistics：反应性能上的指标。RTT：往返时间。show chart：数据可视化</li><li>inspectors:对请求进行解包</li><li>AutoResponder:文件代理，比如需要服务器返回的文件，使用本地文件做代理。</li><li>Composer:前后端接口连调（把一个会话拖进去，可以进行修改，伪造请求）</li></ol><p><strong>常用功能</strong></p><ul><li><p>host配置：让服务器指向本地</p><pre><code>1. tools-host2. 激活这个功能3. 在最后修改至本地的地址</code></pre></li><li><p>文件代理</p></li><li>请求模拟，前后端接口链调</li><li>网络限速</li></ul><p>参考资料：<a href="https://www.cnblogs.com/conquerorren/p/8472285.html" target="_blank" rel="noopener">https://www.cnblogs.com/conquerorren/p/8472285.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fiddle学习笔记&quot;&gt;&lt;a href=&quot;#fiddle学习笔记&quot; class=&quot;headerlink&quot; title=&quot;fiddle学习笔记&quot;&gt;&lt;/a&gt;fiddle学习笔记&lt;/h1&gt;&lt;h2 id=&quot;简介fiddle&quot;&gt;&lt;a href=&quot;#简介fiddle&quot; cla
      
    
    </summary>
    
    
      <category term="tool" scheme="http://yoursite.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>js页面属性</title>
    <link href="http://yoursite.com/2018/12/18/js%E9%A1%B5%E9%9D%A2%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2018/12/18/js页面属性/</id>
    <published>2018-12-18T14:03:56.000Z</published>
    <updated>2018-12-18T14:09:59.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="页面属性"><a href="#页面属性" class="headerlink" title="页面属性"></a>页面属性</h2><ul><li><p>offsetWidth /offsetHeight</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//js对元素操作，只能获取不可以改变</span><br><span class="line">//获取对象自身的宽度和高度 ，包括内容、边框和内边距，即：offsetWidth = width +     border + padding</span><br><span class="line">box.offsetWidth</span><br><span class="line">//注意：和 div.style.width 的区别，其只能获取到行内的数值</span><br><span class="line">div.style.width</span><br></pre></td></tr></table></figure></li><li><p>offsetLeft 和 offsetTop</p></li></ul><p>距离第一个有定位的父级盒子左边和上边的距离，<br><strong>注意：父级盒子必须要有定位，如果没有，则最终以body为准！</strong><br>offsetLeft和offsetTop从从父标签的padding开始计算，不包括border。即：从子盒子边框到定位父盒子边框的距离。</p><ul><li>offsetParent</li></ul><p>返回当前对象的父级（带有定位）盒子，若爷爷也有则选择进近的</p><ul><li>clientWidth/clientHeight</li></ul><p>网页可见区域宽和高</p><ul><li>clientLeft，clientTop</li></ul><p>返回的是元素边框的borderWidth，<br>如果不指定一个边框或者不定位改元素，其值就为0</p><ul><li>document.body.scrollWidth;</li><li>document.body.scrollHeight;</li></ul><p>网页正文全文宽<br>网页正文全文高</p><ul><li>document.body.scrollTop;</li></ul><p>网页被卷去的高</p><ul><li>document.body.scrollLeft;</li></ul><p>网页被卷去的左</p><p><strong>区别</strong></p><ul><li><p>left和top分析：</p><ul><li>clientLeft: 左边边框的宽度；clientTop: 上边边框的宽度</li><li>offsetLeft: 当前元素距离有定位的父盒子左边的距离；offsetTop: 当前元素距离有定位的父盒子上边的距离</li><li>scrollLeft: 左边滚动的长度; scrollTop: 上边滚动的长度;</li></ul></li><li><p>width和height分析</p><ul><li>clientWidth\/Height: 内容 + 内边距</li><li>offsetWidth\/Height: 内容 + 内边距 + 边框</li><li>scrollWidth\/Height: 滚动内容的宽度和高度</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;页面属性&quot;&gt;&lt;a href=&quot;#页面属性&quot; class=&quot;headerlink&quot; title=&quot;页面属性&quot;&gt;&lt;/a&gt;页面属性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;offsetWidth /offsetHeight&lt;/p&gt;
  &lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>wepig总结1</title>
    <link href="http://yoursite.com/2018/12/14/wepig2/"/>
    <id>http://yoursite.com/2018/12/14/wepig2/</id>
    <published>2018-12-14T13:05:13.000Z</published>
    <updated>2018-12-18T08:48:23.347Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在编写项目的过程中，遇到了很多不会的地方，通过查找资料学习到了很多新的知识，所以把记录了下来。</p></blockquote><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><h2 id="router的传参"><a href="#router的传参" class="headerlink" title="router的传参"></a>router的传参</h2><ol><li><p>传参及获取参数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path:&apos;/user/:name&apos;</span><br></pre></td></tr></table></figure><p> :name表示接收的参数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$router.params.name</span><br><span class="line">//url后面跟了?参数，用query获取</span><br><span class="line">$router.query.age</span><br></pre></td></tr></table></figure></li><li><p>链接追加</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;more&quot; append&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p> append表示在当前的页面路径后面添加more</p></li><li><p>name</p><p>指定该条路由的名字</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//给名叫user的路由传参</span><br><span class="line">this.router.push(&#123;name:&apos;user&apos;,params:&#123;传递的参数&#125;)</span><br></pre></td></tr></table></figure></li><li><p>视图命名<br>当一个组件的界面有两个的 <router-view>的时候，可以通过给其命名name=XXX，区分显示的是哪一个</router-view></p></li></ol><p>在路由页面映射的时候，是 <strong>components</strong> ，不在是component了。<br>        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">path:&quot;/user&quot;,</span><br><span class="line">components:&#123;</span><br><span class="line">    视图一的名字:对应显示的组件</span><br><span class="line">    视图二的名字:对应显示的组件</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="vue导航守卫"><a href="#vue导航守卫" class="headerlink" title="vue导航守卫"></a>vue导航守卫</h2><p>参考文章:<a href="https://blog.csdn.net/weixin_39398244/article/details/83342761" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39398244/article/details/83342761</a></p><h3 id="全局前置守卫-router-beforeEach"><a href="#全局前置守卫-router-beforeEach" class="headerlink" title="全局前置守卫 router.beforeEach"></a>全局前置守卫 router.beforeEach</h3><p><strong>常常用于权限和状态的检验</strong></p><p>当从一个路由跳转到另一个路由 <strong>之前</strong> 触发此守卫，任何路由跳转都会触发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;...&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach((to,from,next)=&gt;&#123;</span><br><span class="line"> //...</span><br><span class="line"> //这是获取准备去的地址</span><br><span class="line"> to.path==..</span><br><span class="line"> //匹配访问路径，会从父级一层一层下去</span><br><span class="line"> to.marched==</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>每个守卫都有三个参数<br>to：这是你要跳去的路由对象<br>from：这是你要离开的路由对象<br>next：是一个方法，接收参数，这个方法必须调用，否则就不能跳转</p><pre><code>- next() 跳转- next(false) 中断跳转- next({path:&quot;/&quot;}) 中断当前跳转，跳转到新的路径</code></pre><h3 id="全局后置钩子-router-afterEach"><a href="#全局后置钩子-router-afterEach" class="headerlink" title="全局后置钩子 router.afterEach"></a>全局后置钩子 router.afterEach</h3><p>钩子不会接收next函数，也不会改变导航本身。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach((to, from) =&gt; &#123;</span><br><span class="line">  // ...</span><br></pre></td></tr></table></figure></p><h3 id="路由独享守卫-beforeEnter"><a href="#路由独享守卫-beforeEnter" class="headerlink" title="路由独享守卫 beforeEnter"></a>路由独享守卫 beforeEnter</h3><p>这个守卫是写在路由里面的，只有当进入这个路由时才会调用的，这些守卫与全局前置守卫的方法参数是一样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/foo&apos;,</span><br><span class="line">      component: Foo,</span><br><span class="line">      beforeEnter: (to, from, next) =&gt; &#123;</span><br><span class="line">        // ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件内守卫-beforeRouteEnter，beforeRouteUpdate，beforeRouteLeave"><a href="#组件内守卫-beforeRouteEnter，beforeRouteUpdate，beforeRouteLeave" class="headerlink" title="组件内守卫 beforeRouteEnter，beforeRouteUpdate，beforeRouteLeave"></a>组件内守卫 beforeRouteEnter，beforeRouteUpdate，beforeRouteLeave</h3><p>这三个守卫是写在组件里，beforeRouteEnter守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。</p><p>不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。其他两个都可以用this。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const Foo = &#123;</span><br><span class="line">  template: `...`,</span><br><span class="line">  beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">    // 在渲染该组件的对应路由被 confirm 前调用</span><br><span class="line">    // 不！能！获取组件实例 `this`</span><br><span class="line">    // 因为当守卫执行前，组件实例还没被创建</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, from, next) &#123;</span><br><span class="line">    // 在当前路由改变，但是该组件被复用时调用</span><br><span class="line">    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span><br><span class="line">    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class="line">    // 可以访问组件实例 `this`</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">    // 导航离开该组件的对应路由时调用</span><br><span class="line">    // 可以访问组件实例 `this`</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="完整导航流程。"><a href="#完整导航流程。" class="headerlink" title="完整导航流程。"></a>完整导航流程。</h3><ol><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li></ol><h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><p>路由元信息：定义路由的时候可以配置mate字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/foo&apos;,</span><br><span class="line">      component: Foo,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: &apos;bar&apos;,</span><br><span class="line">          component: Bar,</span><br><span class="line">          // a meta field</span><br><span class="line">          meta: &#123; requiresAuth: true &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>访问/foo/bar这个URL将会匹配 <strong>父路由记录</strong> 以及 <strong>字路由记录</strong><br>一个路由匹配到的所有路由记录会暴露为$route对象 (还有在导航守卫中的路由对象) 的 $route.matched 数组。因此，我们需要遍历 $route.matched 来检查路由记录中的 meta 字段。</p><ul><li>常常用于不同页面的标题显示，或者原网页的head标签内容里面的东西</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在编写项目的过程中，遇到了很多不会的地方，通过查找资料学习到了很多新的知识，所以把记录了下来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;学习总结&quot;&gt;&lt;a href=&quot;#学习总结&quot; class=&quot;headerlink&quot; title=&quot;学习
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>wepig</title>
    <link href="http://yoursite.com/2018/12/14/wepig/"/>
    <id>http://yoursite.com/2018/12/14/wepig/</id>
    <published>2018-12-14T13:03:30.000Z</published>
    <updated>2018-12-14T13:06:25.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录项目实现的流程</p></blockquote><h1 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录项目实现的流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;项目流程&quot;&gt;&lt;a href=&quot;#项目流程&quot; class=&quot;headerlink&quot; title=&quot;项目流程&quot;&gt;&lt;/a&gt;项目流程&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>vuex流程总结</title>
    <link href="http://yoursite.com/2018/12/09/vuex%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/12/09/vuex流程总结/</id>
    <published>2018-12-09T14:04:49.000Z</published>
    <updated>2019-01-28T11:26:14.393Z</updated>
    
    <content type="html"><![CDATA[<p>对如何异步显示数据效果的编码流程进行了总结</p><ol><li><p>ajax<br>ajax请求函数，抛出接口</p></li><li><p>vuex</p><ul><li><p>store里面新建index完成基本配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">vuex最核心的管理对象store</span><br><span class="line">组装模块并导出 store 的地方</span><br><span class="line"> */</span><br><span class="line">// 首先引入Vue及Vuex</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">// 引入四个基本模块</span><br><span class="line">import state from &apos;./state&apos;</span><br><span class="line">import mutations from &apos;./mutations&apos;</span><br><span class="line">import actions from &apos;./actions&apos;</span><br><span class="line">import getters from &apos;./getters&apos;</span><br><span class="line"></span><br><span class="line">// 一定要声明使用插件</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>现在Vue对象里面挂载store</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import store from &apos;./store&apos;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    components: &#123; App &#125;,</span><br><span class="line">    template: &apos;&lt;App/&gt;&apos;,</span><br><span class="line">    store //所有的组件都多了一个$store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在store下新建state.js<br>  state：用于存储状态对象</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">user:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在store下新建mutation-types.js<br>  mutation是操作state状态的，mutation-types是存放操作state的方法名</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const RECEIVE_USER_INFO = &apos;receive_user_info&apos; // 接收用户信息</span><br></pre></td></tr></table></figure></li><li><p>在store下新建actions.js<br>  action是通过操作mutation间接更新state的多个方法的对象<br>  起连接作用。<br>  异步获取数据。(注意需要引入api接口函数)把数据传给mutation。(因为mutation的方法名是放在mutation-types里面，所以注意要引入mutation-types里面对应的方法名)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">reqUserInfo,</span><br><span class="line">&#125; from &apos;../api&apos;</span><br><span class="line">import &#123;</span><br><span class="line">  RECEIVE_USER_INFO,</span><br><span class="line">&#125; from &apos;./mutation-types&apos;</span><br><span class="line"></span><br><span class="line"> // 异步获取用户信息</span><br><span class="line"> async getUserInfo (&#123;commit&#125;) &#123;</span><br><span class="line">  const result = await reqUserInfo()</span><br><span class="line">  //如果请求成功，返回code=0</span><br><span class="line">  if (result.code === 0) &#123;</span><br><span class="line">   const userInfo = result.data</span><br><span class="line">   //提交mutation</span><br><span class="line">   //把结果&#123;userInfo&#125;提交给RECEIVE_USER_INFO方法</span><br><span class="line">   commit(RECEIVE_USER_INFO, &#123;userInfo&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>  参数除了commit以外，还可以有state<code>{commit,state}</code></p></li><li><p>在store里面新建mutations.js<br>  mutations直接对state进行操作，<code>[方法名](state,{param}){}</code> 默认第一个参数state，所以需要引入vue与方法名</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import &#123;</span><br><span class="line">  RECEIVE_USER_INFO,</span><br><span class="line">  &#125; from &apos;./mutation-types&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  [RECEIVE_USER_INFO] (state, &#123;userInfo&#125;) &#123;</span><br><span class="line">    state.userInfo = userInfo</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用数据</p></li></ol><p>一般放在<code>computed</code>中进行接收，有利于state的值发生改变的时候及时响应给子组件。</p><ul><li>mapState辅助函数<pre><code>mapState返回的是一个对象其实就是返回值:{return this.$store.XXXX}</code></pre></li></ul><pre><code>   当一个组件需要获取多个状态时候，用mapState辅助函数更为方便   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapState &#125; from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">computed:mapState(&#123;</span><br><span class="line">//方法一：箭头函数</span><br><span class="line">count: state =&gt; state.count;</span><br><span class="line">//方法二：传字符串参数&apos;count&apos;等同于‘state=&gt;state.count’</span><br><span class="line">count:&apos;count&apos;;</span><br><span class="line">//方法三，使用this获取局部状态，必须使用常规函数</span><br><span class="line">count(state)&#123;</span><br><span class="line"> return this.count</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">computed:mapState([ &quot;count&quot;])</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>…mapState()</p><pre><code>...mapState是state的语法糖，使用时需要从vuex中引入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">...mapState(&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>mapGetters 辅助函数</p><p>  mapGetters辅助函数仅仅是将store中的getter映射到局部属性</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapGetters &#125; from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  computed: &#123;</span><br><span class="line">  // 使用对象展开运算符将 getter 混入 computed 对象中</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      &apos;doneTodosCount&apos;,</span><br><span class="line">      &apos;anotherGetter&apos;,</span><br><span class="line">      // ...</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapActions<br>  类似mapState</p></li></ul><ul><li><p>getter计算属性</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line"> doneTodosCount () &#123;</span><br><span class="line">   return this.$store.state.todos.filter(todo =&gt; todo.done).length</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></code></pre><p> 如果有多个组件需要用到这个属性，可以在store里面定义‘getter’，可以说是store的计算属性，像计算属性一样，getter的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    const store = new Vuex.Store(&#123;</span><br><span class="line">      state: &#123;</span><br><span class="line">        todos: [</span><br><span class="line">          &#123; id: 1, text: &apos;...&apos;, done: true &#125;,</span><br><span class="line">          &#123; id: 2, text: &apos;...&apos;, done: false &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      getters: &#123;</span><br><span class="line">      //state作为第一个参数</span><br><span class="line">        doneTodos: state =&gt; &#123;</span><br><span class="line">          return state.todos.filter(todo =&gt; todo.done)</span><br><span class="line">        &#125;</span><br><span class="line">        //可以接收其他getter作为第二个参数</span><br><span class="line">          doneTodosCount: (state, getters) =&gt; &#123;</span><br><span class="line">            return getters.doneTodos.length</span><br><span class="line">          &#125;</span><br><span class="line">          //可以通过让getter返回一个函数，来实现给getter传参,对store里的数组进行查询时非常有作用</span><br><span class="line">           getTodoById: (state) =&gt; (id) =&gt; &#123;</span><br><span class="line">              return state.todos.find(todo =&gt; todo.id === id)</span><br><span class="line">            &#125;</span><br><span class="line">            //</span><br><span class="line">store.getters.getTodoById(2) // -&gt; &#123; id: 2, text: &apos;...&apos;, done: false &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //在组件中使用，同计算属性的调用，不用加括号</span><br><span class="line"></span><br><span class="line">    this.$store.getters.doneTodosCount</span><br></pre></td></tr></table></figure></li><li><p>dispatch方法</p><p> dispatch(actionName,data)分发调用action，第一个参数是方法名，第二个是数据<br> 触发store里面的action对应方法名的函数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.dispatch(&quot;&quot;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对如何异步显示数据效果的编码流程进行了总结&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ajax&lt;br&gt;ajax请求函数，抛出接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;vuex&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;store里面新建index完成基本配置&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>summary_js</title>
    <link href="http://yoursite.com/2018/11/24/summary_js/"/>
    <id>http://yoursite.com/2018/11/24/summary_js/</id>
    <published>2018-11-24T05:32:22.000Z</published>
    <updated>2018-11-24T05:03:29.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="enter回车"><a href="#enter回车" class="headerlink" title="enter回车"></a>enter回车</h2><blockquote><p>持续更新</p></blockquote><p>在修改项目的过程中，学习到了关于表单enter键提交是否可以触发</p><ul><li>如果type是submit，一个文本或者多个文本都会提交</li><li>如果是button，仅一个文本的时候提交</li><li>type为image的按钮，等同于type为submit的效果</li><li>用button时，fx和IE有不同的表现。radio和checkbox在FX下也会触发提交表单，在IE下不会</li></ul><h2 id="事件代理，事件委托"><a href="#事件代理，事件委托" class="headerlink" title="事件代理，事件委托"></a>事件代理，事件委托</h2><p>利用的是冒泡原理，与事件源。<br>还可以用来给动态添加的元素绑定事件</p><h3 id="事件源"><a href="#事件源" class="headerlink" title="事件源"></a>事件源</h3><ul><li><p>兼容</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let e = e || window.event;</span><br><span class="line">var target = e.target || e.srcElement;</span><br></pre></td></tr></table></figure></li><li><p>属性</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.log(e.target);</span><br><span class="line">console.log(e.target.id);</span><br><span class="line">console.log(e.target.tagName);</span><br><span class="line">console.log(e.target.nodeName);</span><br><span class="line"> console.log(e.target.classList);</span><br><span class="line">console.log(e.target.className);</span><br><span class="line">console.log(e.target.innerHTML);</span><br><span class="line">console.log(e.target.innerText);</span><br></pre></td></tr></table></figure></li></ul><h2 id="es6-箭头函数"><a href="#es6-箭头函数" class="headerlink" title="es6 箭头函数"></a>es6 箭头函数</h2><blockquote><p>回调函数为匿名函数时，回调函数的this会指向window，需要对回调函数bind(this)。<br>回调函数为箭头函数时，回调函数的this会指向他的直接上层，本例中指向obj,objx。<br>回调函数就是一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数。这个过程就叫做回调。</p></blockquote><h3 id="不绑定this"><a href="#不绑定this" class="headerlink" title="不绑定this"></a>不绑定this</h3><p>箭头函数的this其实就是在定义的时候就确定好的，以后不管怎么调用这个箭头函数，箭头函数的this始终为定义时的this</p><ul><li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。所以说在箭头函数中的this指向是固定的</li><li>最好不要用箭头函数作为对象的方法。</li><li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li><li><p>箭头函数还有一个比较有特点的地方就是其不绑定arguments,或者用rest参数代替</p><p>  但是如果在箭头函数需要参数时，可以使用剩余参数来取代arguments</p></li></ul><p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure></p><p>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 报错</span><br><span class="line">let getTempItem = id =&gt; &#123; id: id, name: &quot;Temp&quot; &#125;;</span><br><span class="line"></span><br><span class="line">// 不报错</span><br><span class="line">let getTempItem = id =&gt; (&#123; id: id, name: &quot;Temp&quot; &#125;);</span><br></pre></td></tr></table></figure><h2 id="es6-module模块"><a href="#es6-module模块" class="headerlink" title="es6 module模块"></a>es6 module模块</h2><p>通过export抛出，import引入</p><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><ul><li><p>抛出一个变量</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="comment">//写法二</span></span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;firstName&#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>as关键字重命名</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>抛出默认</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  xxx</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><ul><li><p>接收一个变量</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;firstName&#125; from &apos;./profile.js&apos;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>as关键字重命名</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; firstName as surname &#125; from &apos;./profile.js&apos;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>import命令输入的变量都是只读的，因为它的本质是输入接口，不可以修改</p></li><li><p>整体加载</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import * as XXX from &apos;./profile.js&apos;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>引入默认抛出的接口，可以自己随便命名</p></li></ul><h2 id="js跳转"><a href="#js跳转" class="headerlink" title="js跳转"></a>js跳转</h2><p><a href="https://www.cnblogs.com/Renyi-Fan/p/9130325.html" target="_blank" rel="noopener">https://www.cnblogs.com/Renyi-Fan/p/9130325.html</a></p><p>js对打开的页面ULR进行跳转，</p><ul><li>location的href属性</li><li>open 方法</li><li>histoty的三个方法</li><li>location的assign方法</li></ul><h3 id="常规的js页面跳转"><a href="#常规的js页面跳转" class="headerlink" title="常规的js页面跳转"></a>常规的js页面跳转</h3><ul><li><p>在原来的窗口中直接跳转</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.location.href=&quot;你所要跳转的页面&quot;;</span><br></pre></td></tr></table></figure></li><li><p>在新窗口中打开页面用</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.open(&apos;你所要跳转的页面&apos;);</span><br><span class="line">//open属性的参数　&apos;page.html&apos; 弹出窗口的文件名；&apos;newwindow&apos; 弹出窗口的名字（不是文件名），非必须，可用空&apos;代替；height=100 窗口高度；width=500 窗口宽度；top=0 窗口距离屏幕上方的象素值；left=0 窗口距离屏幕左侧的象素值。</span><br></pre></td></tr></table></figure></li></ul><p>##[object Object]</p><p>这个不是两个对象的意思，是对象的字符串形式，是隐式调用了Object对象的toString()方法，形式是”[object Object]”.<br>[object objcet]      自定义的对象   没有覆盖toString方法，返回默认<br>[object]            window对象      覆盖了toString方法，显式调用返回[object Object]<br>123                  字条串         覆盖了toString方法，显式调用返回[object String]</p><p>在我做项目的时候遇见了一个问题，把对象放进cookie之后，cookie存储的格式变成了object Object<br>,解决办法是转化成字符串之后存入,使用时再解析成json对象</p><ul><li><p>JSON.parse()【从一个字符串中解析出json对象】</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//定义一个字符串</span><br><span class="line">var data=&apos;&#123;&quot;name&quot;:&quot;goatling&quot;&#125;&apos;</span><br><span class="line">//解析对象​</span><br><span class="line">​JSON.parse(data)</span><br><span class="line">结果是：</span><br><span class="line">​name:&quot;goatling&quot;</span><br></pre></td></tr></table></figure></li><li><p>JSON.stringify()【从一个对象中解析出字符串】</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var data=&#123;name:&apos;goatling&apos;&#125;</span><br><span class="line">JSON.stringify(data)</span><br><span class="line">结果是：</span><br><span class="line">&apos;&#123;&quot;name&quot;:&quot;goatling&quot;&#125;&apos;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;enter回车&quot;&gt;&lt;a href=&quot;#enter回车&quot; class=&quot;headerlink&quot; title=&quot;enter回车&quot;&gt;&lt;/a&gt;enter回车&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;持续更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在修改项目的过程中，学
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>rem</title>
    <link href="http://yoursite.com/2018/11/18/rem/"/>
    <id>http://yoursite.com/2018/11/18/rem/</id>
    <published>2018-11-18T11:13:05.000Z</published>
    <updated>2018-11-18T12:19:17.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h1><ul><li>rem是相对于根元素<html>的字体大小相对单位</html></li><li>类似与em，不过rem是依赖根元素计算的，em是依赖父元素计算的</li><li>rem能等比例适配所有屏幕</li><li>这里有个插件flexible.js就是用rem实现的</li></ul><p>这个button按钮的宽度为120px，高度为60px</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">html&#123;</span><br><span class="line">    font-size:20px;</span><br><span class="line">&#125;</span><br><span class="line">.btn &#123;</span><br><span class="line">    width: 6rem;</span><br><span class="line">    height: 3rem;</span><br><span class="line">    line-height: 3rem;</span><br><span class="line">    font-size: 1.2rem;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    background: #06c;</span><br><span class="line">    color: #fff;</span><br><span class="line">    border-radius: .5rem;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是不同分辨率下的font-size的值，应该如何计算<br><img src="/img/rem/rem.png"><br>计算之后可以用媒体查询设置html的font-size值</p><h2 id="移动端页面自适应解决方案"><a href="#移动端页面自适应解决方案" class="headerlink" title="移动端页面自适应解决方案"></a>移动端页面自适应解决方案</h2><ul><li>不需要手动设置viewport了</li><li>原理是根据设备屏幕的DPR(设备像素比，比如dpr=2时，表示1个CSS像素由4个物理像素点组成） 动态设置 html 的font-size, 同时根据设备DPR调整页面的缩放值，进而达到高清效果。)</li><li>绝不是每个地方都要用rem，rem只适合与固定宽度</li><li>此方案也是默认1rem=100px</li></ul><p>比如你在效果图上量取的某个按钮元素长 55px, 宽37px</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.myBtn &#123;</span><br><span class="line">   width: 0.55rem;</span><br><span class="line">   height: 0.37rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rem&quot;&gt;&lt;a href=&quot;#rem&quot; class=&quot;headerlink&quot; title=&quot;rem&quot;&gt;&lt;/a&gt;rem&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;rem是相对于根元素&lt;html&gt;的字体大小相对单位&lt;/html&gt;&lt;/li&gt;
&lt;li&gt;类似与em，不过rem是依赖根元素计
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vuex</title>
    <link href="http://yoursite.com/2018/11/11/vuex/"/>
    <id>http://yoursite.com/2018/11/11/vuex/</id>
    <published>2018-11-11T06:38:13.000Z</published>
    <updated>2018-11-11T07:03:41.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><p>主要是状态管理，将数据统一管理(state)</p><p> <img src="/img/vue/liucheng.jpg" alt="流程图"></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul><li>状态对象 stat</li><li>操作state 直接更新state的多个方法对象 mutations</li><li>操作mutations 间接更新state的多个方法对象 actions</li><li>包含多个基于state的getter计算属性的对象 getters</li><li>包含n个mutations的type名称常量 mutations-type</li></ul><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>共享的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const state=&#123;&#125;;</span><br></pre></td></tr></table></figure></p><p>建立统一数据容器，唯一的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let store = new Vuex.Store(&#123;</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>store(容器)注册到实例上，main.js里面，所有的组件都会有一个属性this.$store<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">store,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在组件中使用，加不加this都一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;this.$store.state.XXX&#125;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="state-单向数据流"><a href="#state-单向数据流" class="headerlink" title="state(单向数据流)"></a>state(单向数据流)</h2><p> 注意,在组件中最好不要直接更改共享的数据，共享的数据仅仅给组件染</p><h2 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h2><p> 通过mutation(管理员)来更改状态，可以在store里面设置成严格模式<br> <code>strict：true</code>，mutation不支持异步</p><ol><li><p>告诉mutations需要更改,mutations相当于methods</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations=&#123;</span><br><span class="line">    add(state,count)&#123;</span><br><span class="line">        <span class="comment">//state是自动放入的，默认指的就是当前的state</span></span><br><span class="line">        <span class="comment">//操作state的属性</span></span><br><span class="line">        state.XXX +=count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state，</span><br><span class="line">mutations,</span><br><span class="line">strict：<span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件通过mutations提交,第一个参数是与mutatioons里面的方法绑定，第二个参数是自定义参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.commit(&apos;add&apos;,2)</span><br></pre></td></tr></table></figure></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>打印日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import logger from &apos;vuex/dist/logger&apos;</span><br><span class="line">const store = new Vuex.store(&#123;</span><br><span class="line">    plugins:[logger()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><p>src下面创建一个store文件\index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span></span><br><span class="line"><span class="keyword">const</span> state=&#123;&#125;;</span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state，</span><br><span class="line">    mutations,</span><br><span class="line">    strict：<span class="literal">true</span>,</span><br><span class="line">    plugins:[logger()]</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>store下面再创建一个mutations.js,里面存放mutations的相关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import * as Types from &apos;mutations.types.js&apos;</span><br><span class="line">const mutations = &#123;</span><br><span class="line"> // [方法名](state,&#123;param&#125;)&#123;&#125;</span><br><span class="line">[Types.INCREMENT](state)&#123;</span><br><span class="line">   state.count+=1</span><br><span class="line">&#125;,</span><br><span class="line">[Types.DECREMENT](state)&#123;</span><br><span class="line">    state.count-=1</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default mutations;</span><br></pre></td></tr></table></figure></p><p>宏(一般大写)<br>store下面再创建一个mutations.types.js里面存放mutations的方法的名字，方便查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//增加</span><br><span class="line">export const INCREMENT=&apos;INCREMENT&apos;</span><br><span class="line">//减少</span><br><span class="line">export const DECREMENT=&apos;DECREMENT&apos;</span><br></pre></td></tr></table></figure></p><p>组件中引入同mutations.js中引入一样,只不过不加中括号<br>import * as Types from ‘mutations.types.js’</p><p>Types.INCREMENT<br>Types.DECREMENT</p><h2 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h2><p>相当于computed,如果数据多了可以模仿mutations的抽离<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const getters=&#123;</span><br><span class="line"> val(state)&#123;</span><br><span class="line"> state.count%2?&apos;奇数&apos;:&apos;偶数&apos;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default new Vuex.store(&#123;</span><br><span class="line">getters,</span><br><span class="line">&#125;)</span><br><span class="line">//引用时</span><br><span class="line">&#123;&#123;$store.getters.val&#125;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h2><ul><li>和后台交互的异步action，后台数据也需要修改</li></ul><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><ol><li>引入api以及mutation-types</li><li><p>异步获取数据</p><ul><li>异步获取地址</li><li>发送异步ajax请求</li><li><p>提交一个mutation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> //async 方法名(&#123;commit,参数可选&#125;&#123;&#125;)</span><br><span class="line">// 异步获取地址</span><br><span class="line"> async getAddress (&#123;commit, state&#125;) &#123;</span><br><span class="line"> // 从state状态中获取到经纬度用来设置reqAddress的参数（看接口文档）</span><br><span class="line"> const geohash = state.latitude + &apos;,&apos; + state.longitude</span><br><span class="line"> // 1. 发送异步ajax请求</span><br><span class="line"> const result = await reqAddress(geohash)</span><br><span class="line"> // 2. 根据结果提交一个mutation</span><br><span class="line"> commit(RECEIVE_ADDRESS, &#123;address: result.data&#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vuex&quot;&gt;&lt;a href=&quot;#vuex&quot; class=&quot;headerlink&quot; title=&quot;vuex&quot;&gt;&lt;/a&gt;vuex&lt;/h1&gt;&lt;p&gt;主要是状态管理，将数据统一管理(state)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/img/vue/liucheng.jpg
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>stylus</title>
    <link href="http://yoursite.com/2018/10/29/stylus/"/>
    <id>http://yoursite.com/2018/10/29/stylus/</id>
    <published>2018-10-29T06:08:13.000Z</published>
    <updated>2018-10-29T08:34:58.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stylus学习笔记"><a href="#stylus学习笔记" class="headerlink" title="stylus学习笔记"></a>stylus学习笔记</h1><ul><li>冒号可选，分号可选，逗号可选，括号可选</li><li><p>缩进与空格很重要</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">body</span><br><span class="line">  color white</span><br></pre></td></tr></table></figure></li><li><p>父级引用 &amp;</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">textarea</span><br><span class="line">input</span><br><span class="line">  color #A7A7A7</span><br><span class="line">  &amp;:hover</span><br><span class="line">    color #000</span><br><span class="line">//等于</span><br><span class="line">textarea,</span><br><span class="line">  input &#123;</span><br><span class="line">    color: #a7a7a7;</span><br><span class="line">  &#125;</span><br><span class="line">  textarea:hover,</span><br><span class="line">  input:hover &#123;</span><br><span class="line">    color: #000;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>变量</p></li><li><p>属性查找 @</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#logo</span><br><span class="line">  position: absolute</span><br><span class="line">  top: 50%</span><br><span class="line">  left: 50%</span><br><span class="line">  width: 150px</span><br><span class="line">  height: 80px</span><br><span class="line">  margin-left: -(@width / 2)</span><br><span class="line">  margin-top: -(@height / 2)</span><br></pre></td></tr></table></figure></li><li><p>运算符</p><ul><li>范围 .. 包含界限 …包含开头不包含结尾</li><li>存在操作符in</li><li>实例检查 is a</li><li>条件赋值：?= :=</li><li>变量定义：is defined</li></ul></li><li>混合书写</li><li>方法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;stylus学习笔记&quot;&gt;&lt;a href=&quot;#stylus学习笔记&quot; class=&quot;headerlink&quot; title=&quot;stylus学习笔记&quot;&gt;&lt;/a&gt;stylus学习笔记&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;冒号可选，分号可选，逗号可选，括号可选&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>demo_vue-book</title>
    <link href="http://yoursite.com/2018/10/27/vue-book/"/>
    <id>http://yoursite.com/2018/10/27/vue-book/</id>
    <published>2018-10-27T07:33:54.000Z</published>
    <updated>2018-10-27T08:51:35.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-book"><a href="#vue-book" class="headerlink" title="vue-book"></a>vue-book</h1><hr><p>接下来会学习vuex，在学习一门预处理语言，之后用我学过的所有东西做一个练习的项目<br>vue学习之后，用vue-cli做的一个练习。<br>这是学习vue的过程中走通了一遍流程，但还有很多功能没有实现</p><ul><li>上拉下拉刷新</li><li>图片的懒加载</li><li>打包之后如何上线</li><li>vuex的学习</li><li>如何连接数据库等</li></ul><p>github:<a href="https://github.com/biubiuins/vue-book" target="_blank" rel="noopener">https://github.com/biubiuins/vue-book</a></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul><li>npm install vue</li><li>npm install -g webpack</li><li>npm install -g vue-cli</li><li>npm install less less-loader axios vuex bootstrap</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>build 打包后的脚本文件</li><li>src 源码文件</li><li>mock后台代码，模拟数据</li><li>src/api 代表的是所有的接口,获取数据给前端调用</li><li>src/base 基础组件</li><li>src/components 页面组件<br><img src="/img/vue-book/lujing.jpg" width="90%"><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3>根据页面划分了5个页面组件</li><li>首页 Home.vue</li><li>列表 List.vue</li><li>收藏 Collect.vue</li><li>添加 Add.vue</li><li>详情 Detail.vue</li></ul><p>配置路由，配置路由映射表并new个实例,挂载在根组件上，router-view显示在App.vue<br>router/index.js</p><p><font color="red">Vue.use()是用来安装Vue插件</font><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">Vue.use(Router);</span><br></pre></td></tr></table></figure></p><blockquote><p>这里用了模板，将会另外写一篇，关于前端的模板与node的</p></blockquote><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><p>base/Tab.vue<br>scoped 表示是当前组件的样式，并不是全局的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>less预处理语言，学习之后会写一篇博客</p></blockquote><p>点击导航之后会通过to跳转页面，并且样式改变<br>这里需要注意<br>/home 确切激活，仅仅这个路径有效。router-link-exact-active<br>/home /home/a 都可以。router-link-active<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/add&quot;&gt;</span><br><span class="line">&lt;i class=&quot;iconfont icon-add&quot;&gt;&lt;/i&gt;&lt;span&gt;添加&lt;/span&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></p><p>基础组件Tab挂载在App.vue上（导航很多页面都需要），并在App.vue上写全局的样式，清除默认样式。<br>新学习到的清除输入框和按钮的默认样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input，button&#123;appearance:none;&#125;</span><br></pre></td></tr></table></figure></p><p>App.vue的组件中有<code>name: &#39;App&#39;</code>，这里<code>name: &#39;app&#39;</code> 相当于一个全局 ID。可以不写，写了可以提供更好的调试信息。<br>页面渲染也是在App.vue中实现的</p><h4 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h4><p><a href="http://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2" target="_blank" rel="noopener">http://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2</a><br>图标打包好了之后在index.html中引入\<br>iconfont是必须类名表明是个icon，后面根据页面选择<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;iconfont icon-shouye&quot;&gt;&lt;/i&gt;&lt;span&gt;首页&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><p>base/Mheader.vue<br>头部的标题不是全部一样的，并且比如首页是没有返回键的，所以这里用到的插槽和父组件给子组件传值<br>这里用Home.vue-Mheader.vue为例</p><ol><li>在父组件上挂载Mheader.vue</li><li>&lt;Mheader.vue&gt;首页，首页需要显示出来，需要在子组件Mheader.vue中放个匿名插槽接收</li><li><p>父组件需要传递一个值告诉子组件是否显示返回键。子组件接收back，不需要验证的时候用数组，需要验证的时候用对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;i class=&quot;iconfont icon-fanhui&quot; v-if=&quot;back&quot;&gt;&lt;/i&gt;</span><br><span class="line">...</span><br><span class="line">props:&#123;</span><br><span class="line"> back:&#123;type:Boolean,default:false&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>点击返回键，返回上一个操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$router.go(-1);</span><br></pre></td></tr></table></figure></li></ol><ul><li>扩展一下,back也可以返回。this.$router.back()</li><li>强制跳转页面，在后面追加，点返回还可以回去。this.$router.push(‘/XXX’)</li><li>路由替换，将原来的替换。this.$router.replace(‘/XXX’)<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3>base/Swiper.vue<br>安装依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-awesome-swiper --save-dev</span><br></pre></td></tr></table></figure></li></ul><p>在main.js中引入vue-awesome-swiper插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import VueAwesomeSwiper from &apos;vue-awesome-swiper&apos;</span><br><span class="line">import &apos;swiper/dist/css/swiper.css&apos;</span><br><span class="line">Vue.use(VueAwesomeSwiper)</span><br></pre></td></tr></table></figure></p><h3 id="后台获取图片信息"><a href="#后台获取图片信息" class="headerlink" title="后台获取图片信息"></a>后台获取图片信息</h3><p>mock/sliders.js 存放图片连接<br>mock/server.js 配置服务器<br>url.parse()可以将一个完整的URL地址，分为很多部分，常用的有：host、port、pathname、path、query。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let sliders = require(&apos;./sliders&apos;)</span><br><span class="line">http.createServer((req,res)=&gt;&#123;</span><br><span class="line">let&#123;pathname,query&#125; = url.parse(req.url);</span><br><span class="line">  if (pathname === &apos;/sliders&apos;)&#123;</span><br><span class="line">     res.setHeader(&apos;Content-Type&apos;,&apos;application/json;charset=utf-8&apos;)</span><br><span class="line">     res.end(JSON.stringify(sliders))</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是当前段发起ajax请求的时候，是8080端口请求3000端口的数据，所以有跨域的问题，这里需要在服务器中加入跨域头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">res.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type,Content-Length, Authorization, Accept,X-Requested-With&quot;);</span><br><span class="line">res.setHeader(&quot;Access-Control-Allow-Methods&quot;,&quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">res.setHeader(&quot;X-Powered-By&quot;,&apos; 3.2.1&apos;)</span><br><span class="line">if(req.method==&quot;OPTIONS&quot;) return res.end();/*让options请求快速返回*/</span><br></pre></td></tr></table></figure></p><h3 id="轮播图的api"><a href="#轮播图的api" class="headerlink" title="轮播图的api"></a>轮播图的api</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="comment">//设置基本的默认请求路径</span></span><br><span class="line">axios.defaults.baseURL =<span class="string">'http://localhost:3000'</span>;</span><br><span class="line"><span class="comment">//获取轮播图数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> getSliders=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"> <span class="comment">//因为设置了了efaults.baseURL，所以它请求的路径其实是http://localhost:3000/sliders,返回的是一个promise对象</span></span><br><span class="line"> <span class="keyword">return</span> axios.get(<span class="string">'/sliders'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>axios 笔记待整理</p></blockquote><h3 id="前端获取数据"><a href="#前端获取数据" class="headerlink" title="前端获取数据"></a>前端获取数据</h3><p>获取的数据父子组件传值，传给子组件，子组件渲染出图片<br>如果给接收到的data一个新的名字 slider {data：slider}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">async created()&#123;</span><br><span class="line"> let &#123;data&#125; = await getSliders().then()</span><br><span class="line"> this.sliders=data</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><blockquote><p>async/await 已整理</p></blockquote><h3 id="热门图书-删除图书"><a href="#热门图书-删除图书" class="headerlink" title="热门图书/删除图书"></a>热门图书/删除图书</h3><ul><li>先写服务端，确保数据能正常返回</li><li>增加api方法，实现调取数据的功能</li><li>在哪个组件中应用这个api，如果是一个基础组件需要这些数据，在使用这个组件的父级中调用这个方法，将数据传递给基础组件</li></ul><h3 id="详情页面"><a href="#详情页面" class="headerlink" title="详情页面"></a>详情页面</h3><p>如果用对象作为to的属性，并且使用了参数，必须给路由起个名字，通过名字跳转<br>router/index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;path:&apos;/detail/:bid&apos;,component:Detail,name:&apos;detail&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>component/List.vue<br>需要配置路径参数，点击哪个li跳转哪个详情<br>这是跳转用到router-link，把之前的li改为router-link，</p><ul><li>params是路径参数</li><li>循环组件，需要加上key</li><li>router-link是a标签，这里需要的是li，在taf里面修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link v-for=&quot;(book,index) in books&quot; :to=&quot;&#123;name:&apos;detail&apos;,params:&#123;bid:book.bookId&#125;&#125;&quot; :key=&quot;index&quot; tag=&quot;li&quot; &gt;</span><br></pre></td></tr></table></figure></li></ul><p>因为点击li跳转，删除按钮也在li里面，所以这个应该阻止删除按钮<br>冒泡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click.stop=&quot;remove(book.bookId)&quot;&gt;删除&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>component/Detail.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取通过传过来的参数</span><br><span class="line">$route.params.XXX</span><br></pre></td></tr></table></figure></p><p>获取当前id的图书信息渲染到界面。</p><ul><li>问题一:</li></ul><p>当修改的时候，价格原本是数字，修改之后会变成字符串,加上数字的修饰符<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model.number=&quot;book.bookPrice&quot; id=&quot;bookPrice&quot;&gt;</span><br></pre></td></tr></table></figure></p><ul><li><p>问题二<br>修改url的时候，页面没有刷新，因为模板已经渲染出来了，不会在走created办法。所以，需要监控url的变化，路径参数发生变化，通过监控参数的变化来发送ajax</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">//路径参数发生变化，通过监控参数的变化来发送ajax</span><br><span class="line">$route()&#123;</span><br><span class="line">     this.getData() ;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>问题三<br>如果没有找到对应id的书，那返回的是空对象，如果是空，需要跳转回列表页<br>Object.keys()，该方法返回一个数组,里面是对象的所有属性。如果是空对象那么返回一个空数组。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.keys(this.book).length&gt;0?void 0:this.$ruoter.push(&apos;/List&apos;)</span><br></pre></td></tr></table></figure><p>  处理一下url,server.js查询book的条件变一下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!isNaN(id))</span><br></pre></td></tr></table></figure></li></ul><p>数据改变之后，需要用put更新数据<br>PUT：<br>参数1：url:/book?id=3<br>参数2：请求体发送<br>server.js获取put/post请求体中的数据<br>使用这两个事件就可以获取来自服务器端的响应内容。</p><ul><li>data，数据传递时触发，</li><li>end，没有更多数据提供时触发<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;&quot;;</span><br><span class="line">   res.on(&apos;data&apos;,(chunk)=&gt;&#123;</span><br><span class="line">       str += chunk;</span><br><span class="line">   &#125;);</span><br><span class="line">   res.on(&apos;end&apos;,()=&gt;&#123;</span><br><span class="line">       console.log(str);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h3><p>同详情页面</p><h2 id="优化与其他功能"><a href="#优化与其他功能" class="headerlink" title="优化与其他功能"></a>优化与其他功能</h2><h3 id="loading"><a href="#loading" class="headerlink" title="loading"></a>loading</h3><p>轮播图和热门图书是分开获取的，这里改成一起获取<br>api/index<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return axios.all([getSliders(),getHotBook()])</span><br></pre></td></tr></table></figure></p><p>数据返回的是一个数组，里面是两个promise对象。</p><p>新建base/Loading.vue,挂载在Home.vue<br><a href="https://www.cnblogs.com/lhb25/p/loading-spinners-animated-with-css3.html" target="_blank" rel="noopener">https://www.cnblogs.com/lhb25/p/loading-spinners-animated-with-css3.html</a></p><h3 id="实现页面缓存"><a href="#实现页面缓存" class="headerlink" title="实现页面缓存"></a>实现页面缓存</h3><p>分页面缓存，路由元信息。<br>在配置路由映射的时候有meta(备注)属性,这条对象可以通过<code>this.$route</code>获取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;path:&apos;/home&apos;,component:Home,meta:&#123;keepAlive:true&#125;&#125;,</span><br></pre></td></tr></table></figure></p><p>修改APP.vue,写两个router-view，一个用于，显示缓存的，一个用于显示一般的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">     &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;Tab&gt;&lt;/Tab&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><h3 id="实现路由动画"><a href="#实现路由动画" class="headerlink" title="实现路由动画"></a>实现路由动画</h3><p>给router-view外面包裹一个<transition name="fadeIn"></transition>标签,注意点：一个只能包裹一个标签<br>写css样式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.fadeIn-enter&#123;</span><br><span class="line">  opacity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.fadeIn-enter-active&#123;</span><br><span class="line">  transition:all <span class="number">0.3</span>s;</span><br><span class="line">&#125;</span><br><span class="line">.fadeIn-leave-active&#123;</span><br><span class="line">  transition: all <span class="number">0.3</span>s;</span><br><span class="line">  opacity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="下拉加载更多"><a href="#下拉加载更多" class="headerlink" title="下拉加载更多"></a>下拉加载更多</h3><h3 id="打包上线"><a href="#打包上线" class="headerlink" title="打包上线"></a>打包上线</h3><h3 id="history路由"><a href="#history路由" class="headerlink" title="history路由"></a>history路由</h3><p>在路由中改变mode:’history’</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>router/index<br>meta:{title:XXX}<br>main.js<br>全局钩子，在进入路由之前每一次都会执行此方法。有拦截的作用<br>router.beforeEach(function(from.to,next){<br>   document.title = to.meta.title;<br>   next();<br>});</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-book&quot;&gt;&lt;a href=&quot;#vue-book&quot; class=&quot;headerlink&quot; title=&quot;vue-book&quot;&gt;&lt;/a&gt;vue-book&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;接下来会学习vuex，在学习一门预处理语言，之后用我学过的所有东西做一个练习的项目
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 简括</title>
    <link href="http://yoursite.com/2018/10/24/http%E7%AE%80%E6%8B%AC/"/>
    <id>http://yoursite.com/2018/10/24/http简括/</id>
    <published>2018-10-24T13:11:13.000Z</published>
    <updated>2018-10-24T13:12:07.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><p>一次完整的HTTP请求需要7个步骤</p><ol><li>建立TCP连接</li><li>Web浏览器向Web服务器发送请求命令<ul><li>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。</li></ul></li><li>Web浏览器发送请求头信息<ul><li>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。</li></ul></li><li>Web服务器应答<ul><li>客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码</li></ul></li><li>Web服务器发送应答头信息<ul><li>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</li></ul></li><li>Web服务器向浏览器发送数据<ul><li>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。</li></ul></li><li>Web服务器关闭TCP连接<br>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：Connection:keep-alive，TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。</li></ol><p>http协议的特点<br>①通信流程：断开式（无状态）</p><ul><li>断开式：http协议每次响应完成后，会断开与客户端的连接</li><li>无状态：由于服务器断开了之前的连接，就无法知晓连接间的关系。</li></ul><p>②内容格式：消息头和消息体</p><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><ul><li>OPTIONS<br>返回服务器针对特定资源所支持的HTML请求方法   或web服务器发送*测试服务器功能。询问支持的方法。</li><li>HEAD<ul><li>类似get，但只返回响应头。</li><li>常用于查看某个页面的状态</li></ul></li><li>GET<ul><li>获取资源</li><li>GET方法要求服务器将URL定位的资源放在响应报文的数据部分，回送给客户端。</li><li>使用GET方法时，请求参数和对应的值附加在URL后面，利用一个问号（“?”）代表URL的结尾与请求参数的开始</li></ul></li><li>POST<ul><li>向指定资源提交数据进行处理请求（提交表单、上传文件）</li><li>将请求参数封装在HTTP请求数据中，以名称/值的形式出现</li></ul></li><li>PUT<br>向指定资源位置上上传其最新内容</li><li>DELETE<br>请求服务器删除</li><li>TRACE<br>  回显服务器收到的请求，用于测试和诊断</li><li>CONNECT<br>HTTP/1.1协议中能够将连接改为管道方式的代理服务器</li></ul><h3 id="get-和-post区别"><a href="#get-和-post区别" class="headerlink" title="get 和 post区别"></a>get 和 post区别</h3><p>get请求无消息体，只能携带少量数据<br>post请求有消息体，可以携带大量数据<br>get请求将数据放在url地址中<br>post请求将数据放在消息体中</p><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><ul><li>1xx：相关信息</li><li>2xx：操作成功</li><li>3xx：重定向</li><li>4xx：客户端错误</li><li>5xx：服务器错误<br>GET<br>安全且幂等<br>获取表示<br>变更时获取表示（缓存）</li><li>200（OK） - 表示已在响应中发出</li><li>204（无内容） - 资源有空表示</li><li>301（Moved Permanently） - 资源的URI已被更新</li><li>303（See Other） - 其他（如，负载均衡）</li><li>304（not modified）- 资源未更改（缓存）</li><li>400 （bad request）- 指代坏请求（如，参数错误）</li><li>404 （not found）- 资源不存在</li><li>406 （not acceptable）- 服务端不支持所需表示</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务端当前无法处理请求<br>POST<br>创建子资源<br>部分更新资源</li><li>如果没有被修改，则不过更新资源（乐观锁）</li><li>200（OK）- 如果现有资源已被更改</li><li>201（created）- 如果新资源被创建</li><li>202（accepted）- 已接受处理请求但尚未完成（异步处理）</li><li>301（Moved Permanently）- 资源的URI被更新</li><li>303（See Other）- 其他（如，负载均衡）</li><li>400（bad request）- 指代坏请求</li><li>404 （not found）- 资源不存在</li><li>406 （not acceptable）- 服务端不支持所需表示</li><li>409 （conflict）- 通用冲突</li><li>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</li><li>415 （unsupported media type）- 接受到的表示不受支持</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务当前无法处理请求</li></ul><p>PUT<br>通过替换的方式更新资源</p><ul><li>200 （OK）- 如果已存在资源被更改</li><li>201 （created）- 如果新资源被创建</li><li>301（Moved Permanently）- 资源的URI已更改</li><li>303 （See Other）- 其他（如，负载均衡）</li><li>400 （bad request）- 指代坏请求</li><li>404 （not found）- 资源不存在</li><li>406 （not acceptable）- 服务端不支持所需表示</li><li>409 （conflict）- 通用冲突</li><li>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</li><li>415 （unsupported media type）- 接受到的表示不受支持</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务当前无法处理请求</li></ul><p>DELETE<br>不安全但幂等<br>删除资源</p><ul><li>200 （OK）- 资源已被删除</li><li>301 （Moved Permanently）- 资源的URI已更改</li><li>303 （See Other）- 其他，如负载均衡</li><li>400 （bad request）- 指代坏请求</li><li>404 （not found）- 资源不存在</li><li>409 （conflict）- 通用冲突</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务端当前无法处理请求</li></ul><hr><h2 id="http的请求部分"><a href="#http的请求部分" class="headerlink" title="http的请求部分"></a>http的请求部分</h2><ul><li>请求方法（GET/POST）、URI、协议/版本</li><li>请求头(Request Header)</li><li>空行</li><li>请求正文</li></ul><p><a href="https://blog.csdn.net/chen1403876161/article/details/51546653" target="_blank" rel="noopener">https://blog.csdn.net/chen1403876161/article/details/51546653</a><br>| 请求头 | 说明 | 实列|<br>| —— | —— |——|<br>| Accept |这个头信息指定浏览器或其他客户端可以处理的 MIME 类型|Accept:application/json, text/plain, <em>/</em>|<br>|Accept-Encoding|浏览器能够进行解码的数据编码方式|Accept-Encoding:gzip, deflate, br|<br>|Accept-Language|    这个头信息指定客户端的首选语言，在这种情况下，Servlet 会产生多种语言的结果|Accept-Language:zh-CN,zh;q=0.8|<br>|Accept-Charset|浏览器可接受的字符集||<br>|Connection|这个头信息指示客户端是否可以处理持久 HTTP 连接。持久连接允许客户端或其他浏览器通过单个请求来检索多个文件|Connection:keep-alive|<br>|Host|指定请求资源的Intenet主机和端口号（服务器，向谁请求）|Host:localhost:3000|<br>|Referer|这个头信息指示所指向的 Web 页的 URL。例如，如果您在网页 1，点击一个链接到网页 2，当浏览器请求网页 2 时，网页 1 的 URL 就会包含在 Referer 头信息中。|<br>|User-Agent|这个头信息识别发出请求的浏览器或其他客户端，并可以向不同类型的浏览器返回不同的内容。|<br>|Content-Length|这个头信息只适用于 POST 请求，并给出 POST 数据的大小（以字节为单位）。|Content-Length:60|<br>|Content-Type|用于post请求|Content-Type：application/json;charset=UTF-8|<br>|Authorization|授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中||</p><h2 id="HTTP-content-type"><a href="#HTTP-content-type" class="headerlink" title="HTTP content-type"></a>HTTP content-type</h2><ul><li>application/x-www-form-urlencoded<br>  这应该是最常见的 POST 提交数据的方式了。<form enctype="””">中默认的encType，form表单数据被编码为         key/value格式发送到服务器（表单默认的提交数据的格式）</form></li><li>multipart/form-data<br> 需要在表单中进行文件上传时，就需要使用该格式</li><li>application/json<br>JSON数据格式</li></ul><h2 id="HTTP响应头信息"><a href="#HTTP响应头信息" class="headerlink" title="HTTP响应头信息"></a>HTTP响应头信息</h2><ol><li>状态行</li><li>响应头(Response Header)</li><li>空行</li><li>响应正文</li></ol><p>其他一般的在上面的连接中可以看到，这里整理了平时遇到的跨域问题</p><h3 id="跨域的响应头"><a href="#跨域的响应头" class="headerlink" title="跨域的响应头"></a>跨域的响应头</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line"> res.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Content-Length, Authorization, Accept,X-Requested-With"</span>);</span><br><span class="line"> res.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line"> res.setHeader(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>)</span><br><span class="line"> res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line"> <span class="keyword">if</span>(req.method==<span class="string">"OPTIONS"</span>)  <span class="keyword">return</span> res.end();<span class="comment">/*让options请求快速返回*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a&gt;http&lt;/h1&gt;&lt;p&gt;一次完整的HTTP请求需要7个步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立TCP连接&lt;/li&gt;
&lt;li&gt;Web浏览器向Web服务器发
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>promise/axios/async/await</title>
    <link href="http://yoursite.com/2018/10/22/promise-axios/"/>
    <id>http://yoursite.com/2018/10/22/promise-axios/</id>
    <published>2018-10-22T09:36:10.000Z</published>
    <updated>2018-10-22T09:45:11.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios-promise-async-await"><a href="#axios-promise-async-await" class="headerlink" title="axios/promise/async/await"></a>axios/promise/async/await</h1><p>这里整理axios时，把牵扯到的基础promise学习了，更深一步的以后再深入。axios跨域的问题等之后再整理，这篇仅仅是一些简单的基础</p><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>用法：可以将异步操作以同步操作的流程表达处理，避免层层嵌套回调函数<br>promise对象有三种状态，对象的状态不受外界影响</p><ul><li>pending 进行中</li><li>fulfilled 已成功</li><li>rejected 已失败</li></ul><p>并且一旦状态改变，就不会再变，任何时候都可以得到这个结果,这时称为resolved(已定型)。状态改变只有两种可能</p><ul><li>pending到fulfilled</li><li>pending到rejected</li></ul><p>Promise实例生成以后，then方法有2个参数，第一个函数接收resolved状态的执行，第二个参数接收reject状态的执行。且then的执行结果也会返回一个Promise对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success,resolved时调用</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure rejected时调用</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><hr><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>基于promise用于浏览器和node.js的http客户端</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>支持浏览器和node.js</li><li>支持promise</li><li>能拦截请求和响应</li><li>能转换请求和响应数据</li><li>能取消请求</li><li>自动转换JSON数据</li><li>浏览器端支持防止CSRF(跨站请求伪造)</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;;</span><br></pre></td></tr></table></figure><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><p>get请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.get(url)</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>.then访问成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//打印的是object对象</span><br><span class="line">//data，status，statusText，headers，comfig</span><br><span class="line">XXXX.then(res=&gt;&#123;console.log(res)&#125;)</span><br><span class="line">//打印的是promise对象</span><br><span class="line">XXXX.then()</span><br></pre></td></tr></table></figure></p><p>.catch捕获错误</p><h4 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(url,&#123;params:&#123;&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><p>配置全局默认路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL =&apos;http://localhost:3000&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>在请求或者返回被then或者catch处理之前对它们进行拦截<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 添加请求拦截器</span><br><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">    // 在发送请求之前做些什么</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对请求错误做些什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line">// 添加响应拦截器</span><br><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">    // 对响应数据做点什么</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对响应错误做点什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><hr><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><p>ES7 提出的async 函数，终于让 JavaScript 对于异步操作有了终极解决方案。<br>async作为一个关键字放到函数前面，表示函数是一个异步函数，异步函数也就意味着该函数的执行不会阻塞后面代码的执行。</p><ul><li>内置执行器。Generator 函数的执行必须依靠执行器，而 Aysnc 函数自带执行器，调用方式跟普通函数的调用一样</li><li>返回值是 Promise。async 函数返回值是 Promise 对象，比 Generator 函数返回的 Iterator 对象方便，可以直接使用 then() 方法进行调用</li><li>写异步代码就像写同步代码一样了，不用不断的回调了。</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="async-函数返回一个-Promise-对象"><a href="#async-函数返回一个-Promise-对象" class="headerlink" title="async 函数返回一个 Promise 对象"></a>async 函数返回一个 Promise 对象</h3><p>async 函数内部 return 返回的值是个Promise 对象。当调用该函数时，内部会调用Promise.solve() 方法把它转化成一个promise 对象作为返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">async function timeout() &#123;</span><br><span class="line">    return &apos;hello world&apos;</span><br><span class="line">&#125;</span><br><span class="line">console.log(timeout());</span><br><span class="line">console.log(&apos;虽然在后面，但是我先执行&apos;);</span><br><span class="line">//输出</span><br><span class="line">//Promise&#123;&#125;</span><br><span class="line">//虽然在后面，但是我先执行</span><br></pre></td></tr></table></figure></p><p>async 函数内部 return 返回的值。会成为 then 方法回调函数的参数。只有当 async 函数内部的异步操作都执行完，才会执行 then 方法的回调。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  async function timeout() &#123;</span><br><span class="line">    return &apos;hello world&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  timeout().then(result =&gt; &#123;</span><br><span class="line">    console.log(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(&apos;虽然在后面，但是我先执行&apos;);</span><br><span class="line">  //输出</span><br><span class="line">  //虽然在后面，但是我先执行</span><br><span class="line">  //hello world</span><br></pre></td></tr></table></figure></p><p>如果 async 函数内部抛出异常，则会导致返回的 Promise 对象状态变为 reject 状态。抛出的错误而会被 catch 方法回调函数接收到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">async function e()&#123;</span><br><span class="line">    throw new Error(&apos;error&apos;);</span><br><span class="line">&#125;</span><br><span class="line">e().then(v =&gt; console.log(v))</span><br><span class="line">.catch( e =&gt; console.log(e));</span><br></pre></td></tr></table></figure></p><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p> await 后面放置的就是返回promise对象的一个表达式。await 表示等一下，先执行await后面的代码，等后面的promise对象执行完毕，再继续像下执行。</p><hr><p> 正常情况下，await 命令后面跟着的是 Promise，如果不是的话，也会被转换成一个 立即 resolve 的 Promise<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> async function  f() &#123;</span><br><span class="line">    return await 1</span><br><span class="line">&#125;;</span><br><span class="line">f().then( (v) =&gt; console.log(v)) // 1</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;axios-promise-async-await&quot;&gt;&lt;a href=&quot;#axios-promise-async-await&quot; class=&quot;headerlink&quot; title=&quot;axios/promise/async/await&quot;&gt;&lt;/a&gt;axios/promi
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>demo_todoList</title>
    <link href="http://yoursite.com/2018/10/13/todolist/"/>
    <id>http://yoursite.com/2018/10/13/todolist/</id>
    <published>2018-10-13T14:51:07.000Z</published>
    <updated>2018-10-13T15:02:56.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="demo-todoList"><a href="#demo-todoList" class="headerlink" title="demo_todoList"></a>demo_todoList</h1><hr><p><img src="/img/vue/todoList.png" width="85%"></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>将数据循坏到页面</li><li>敲回车时添加新数据（需要添加isSelected属性）</li><li>删除功能</li><li>计算当前没有被选中的，选中的有删除样式</li><li>双击任务可以修改任务,已经完成的不可以</li><li>自定义输入框聚焦</li><li>回车或者失去焦点的时候修改成功</li><li>计算属性 根据hash展示todolist</li><li>数据永久化，hash单页刷新</li></ul><hr><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><ul><li>监控todos的变化,当变化时更新数据</li><li>watch:todos(){} 只能监控一层的数据变化（删减）</li><li>watch:todos:handler(){},deep:true 深度监控<h3 id="directivess"><a href="#directivess" class="headerlink" title="directivess"></a>directivess</h3></li><li>自定义指令，指令是操作的dom</li><li>XXX(el,bindings){} 名字需要和v-XXX的相同，el指代的是当前的dom，bindings参数</li></ul><hr><p>github: <a href="https://github.com/biubiuins/demo_todolist" target="_blank" rel="noopener">https://github.com/biubiuins/demo_todolist</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;demo-todoList&quot;&gt;&lt;a href=&quot;#demo-todoList&quot; class=&quot;headerlink&quot; title=&quot;demo_todoList&quot;&gt;&lt;/a&gt;demo_todoList&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/img/vue/to
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://yoursite.com/2018/10/12/git/"/>
    <id>http://yoursite.com/2018/10/12/git/</id>
    <published>2018-10-12T06:13:03.000Z</published>
    <updated>2018-10-15T05:27:14.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git的基本操作"><a href="#git的基本操作" class="headerlink" title="git的基本操作"></a>git的基本操作</h1><hr><h2 id="初次配置"><a href="#初次配置" class="headerlink" title="初次配置"></a>初次配置</h2><p>第一步需要配置用户名和邮箱地址，因为git为每一次提交记录名字和邮箱地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &apos;runoob&apos;</span><br><span class="line">$ git config --global user.email test@runoob.com</span><br></pre></td></tr></table></figure></p><h3 id="ssh-key"><a href="#ssh-key" class="headerlink" title="ssh key"></a>ssh key</h3><ol><li><p>生成一对shh key（id_rsa私钥，id_rsa.pub公钥）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p> 注：在主目录下生成的密钥在 /c/Users/用户名/.ssh/id_rsa 里</p></li><li><p>查看公钥内容（需在.ssh目录下执行）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>复制密钥内容添加到 github 上</p></li><li><p>使用ssh协议上传文件到仓库</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot; &quot;</span><br><span class="line">git remote add origin git@github.com:...</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p> 注：若在创建新仓库时有readme.md 文件会上传失败</p></li></ol><h2 id="新建版本库"><a href="#新建版本库" class="headerlink" title="新建版本库"></a>新建版本库</h2><ol><li>git里面先进入新建库的文件夹下</li><li><p>初始化库<br>初始化目录，目录下回出现一个.git的目录，该目录包含了资源的所有元数据</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git init 目录名</span><br></pre></td></tr></table></figure></li><li><p>添加文件到暂存区<br>将当前目录下几个文件纳入版本控制，需要先用git add 命令告诉git开始对这些文件进行跟踪</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .//添加当前项目的所有文件</span><br><span class="line">git add README //添加名为README的文件</span><br><span class="line">git add -A 所有修改的内容添加到缓存区</span><br></pre></td></tr></table></figure></li><li><p>增加到版本库中<br>使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit -m将缓存区内容添加到仓库中。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -a 跳过这一步</span><br><span class="line">git commit -m&quot;版本留言描述&quot;</span><br></pre></td></tr></table></figure></li><li><p>连接远程仓库（现在GitHub上面新建仓库）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 仓库地址</span><br></pre></td></tr></table></figure></li><li><p>讲本地仓库推送到远程库上</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br><span class="line">git push -u origin master //首次执行，说明上传到仓库的master分支上</span><br></pre></td></tr></table></figure></li></ol><hr><p>问题：![rejected] master -&gt; master (fetch first)<br>解决办法：1. 先执行<code>git pull</code>.<br>然后再执行git push –force origin master替换原先的 git push -u origin master</p><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>先把别人的fork进自己的库里面</p><ol><li><p>克隆仓库到指定目录</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//自己在本地进入需要克隆进的文件夹下执行下面第一条指令</span><br><span class="line">git clone 仓库地址</span><br><span class="line">git clone 仓库地址 本地目录</span><br></pre></td></tr></table></figure></li><li><p>add commit push</p></li></ol><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ol><li><p>本地删除文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//或者直接在文件管理器中把没用的文件删了</span><br><span class="line">//需要git进入文件夹下</span><br><span class="line">$ rm test.txt</span><br></pre></td></tr></table></figure><p> Git知道你删除了文件，这个时候只是本地删除了文件，而版本库里面还有文件，所以可以恢复文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure></li><li><p>远程库删除文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm test.txt</span><br></pre></td></tr></table></figure><p> 记得还需要commit</p><hr><p> 我的石墨文档：<a href="https://shimo.im/docs/2Eg0gszciPEQBPxG/" target="_blank" rel="noopener">https://shimo.im/docs/2Eg0gszciPEQBPxG/</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git的基本操作&quot;&gt;&lt;a href=&quot;#git的基本操作&quot; class=&quot;headerlink&quot; title=&quot;git的基本操作&quot;&gt;&lt;/a&gt;git的基本操作&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;初次配置&quot;&gt;&lt;a href=&quot;#初次配置&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>express学习笔记</title>
    <link href="http://yoursite.com/2018/10/12/express%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/12/express学习笔记/</id>
    <published>2018-10-12T06:09:06.000Z</published>
    <updated>2018-10-12T06:36:03.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="express-学习笔记"><a href="#express-学习笔记" class="headerlink" title="express 学习笔记"></a>express 学习笔记</h1><hr><h2 id="搭建简单服务器"><a href="#搭建简单服务器" class="headerlink" title="搭建简单服务器"></a>搭建简单服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//express() 是一个由 express 模块导出的入口（top-level）函数</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">//创建一个express应用实例名app</span></span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="comment">// 设置端口号：3000</span></span><br><span class="line"><span class="comment">//process.env.PORT：读取当前目录下环境变量port的值</span></span><br><span class="line"><span class="keyword">let</span> port = process.env.PORT || <span class="number">3000</span> ;</span><br><span class="line"><span class="comment">//在端口号上开启服务</span></span><br><span class="line">app.listen(port,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="app-listen-port-hostname-backlog-callback"><a href="#app-listen-port-hostname-backlog-callback" class="headerlink" title="app.listen(port, [hostname], [backlog], [callback])"></a>app.listen(port, [hostname], [backlog], [callback])</h3><p>类似于node中的http.Server.listen()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置端口号：3000</span></span><br><span class="line"><span class="comment">//process.env.PORT：读取当前目录下环境变量port的值</span></span><br><span class="line"><span class="keyword">let</span> port = process.env.PORT || <span class="number">3000</span> ;</span><br><span class="line"><span class="comment">//在端口号上开启服务</span></span><br><span class="line">app.listen(port,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>服务器启动时候，<br>默认端口3000：node app.js<br>设置端口8080：PORT=8080 node app.js</p><h3 id="app-set-name-value"><a href="#app-set-name-value" class="headerlink" title="app.set(name,value)"></a>app.set(name,value)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 views 文件夹为存放视图文件的目录, 即存放模板文件的地方,__dirname 为全局变量,存储当前正在执行的脚本所在的目录。</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">"views"</span>,<span class="string">"./views"</span>);</span><br><span class="line"><span class="comment">//设置使用的模板引擎</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs’)</span></span><br><span class="line"><span class="string">app.set("view engine","jade")</span></span><br><span class="line"><span class="string">npm install --save express-art-template</span></span><br><span class="line"><span class="string">//设置art模板引擎，后缀为art</span></span><br><span class="line"><span class="string">app.engine('</span>art<span class="string">', require('</span>express-art-template<span class="string">'));</span></span><br></pre></td></tr></table></figure><h3 id="app-get-name"><a href="#app-get-name" class="headerlink" title="app.get(name)"></a>app.get(name)</h3><p>返回name的value值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例一</span></span><br><span class="line">app.get(<span class="string">'title'</span>);</span><br><span class="line"><span class="comment">// =&gt; undefined</span></span><br><span class="line">app.set(<span class="string">'title'</span>, <span class="string">'My Site'</span>);</span><br><span class="line">app.get(<span class="string">'title'</span>);</span><br><span class="line"><span class="comment">// =&gt; "My Site"</span></span><br><span class="line"><span class="comment">//实例二</span></span><br><span class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="app-get-path-callback-callback-…"><a href="#app-get-path-callback-callback-…" class="headerlink" title="app.get(path, callback [, callback …])"></a>app.get(path, callback [, callback …])</h3><h3 id="app-all-path-callback-callback-…"><a href="#app-all-path-callback-callback-…" class="headerlink" title="app.all(path, callback [, callback …])"></a>app.all(path, callback [, callback …])</h3><p>这种方法就像标准的app.METHOD()方法, 除了它匹配所有HTTP动词。<br>访问path路径的所有方法执行的回调函数.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//* 表示匹配所有的路径</span></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.end(req.method + <span class="string">'user'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一般放在最后面防止前面的被覆盖</span></span><br></pre></td></tr></table></figure></p><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'hello world'</span>);</span><br><span class="line">  res.status(<span class="number">404</span>).send(错误请求)<span class="comment">//访问这个路径是设定状态码为404</span></span><br><span class="line">  <span class="comment">//通过res.send（）接口向客户端发送hello world，send只能响应一次，意思是只能出现一个send</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>res.send（）只能出现一次<br>如果要响应多次，用node原生的write和end，但是如果只有write会处于一个挂起状态<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.write(<span class="string">'hello world'</span>);</span><br><span class="line">  res.write(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>res.send有结束响应的作用</li><li>res.write没有结束响应的作用，需要res.end结束中间件挂起<h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3>下表中响应对象（res）的方法向客户端返回响应，终结请求响应的循环。如果在路由句柄中一个方法也不调用，来自客户端的请求会一直挂起。<br><img src="/img/express/response.jpg" width="80%"><h4 id="res-render"><a href="#res-render" class="headerlink" title="res.render()"></a>res.render()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 views 文件夹为存放视图文件的目录, 即存放模板文件的地方,__dirname 为全局变量,存储当前正在执行的脚本所在的目录。</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">"views"</span>,<span class="string">"./views"</span>);</span><br><span class="line"><span class="comment">//第一个是渲染的views文件夹下面的index，第二个是传递的数据,注意需要设置模板引擎</span></span><br><span class="line">res.render(<span class="string">"index"</span>,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="res-setHeader"><a href="#res-setHeader" class="headerlink" title="res.setHeader()"></a>res.setHeader()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//Content-Type的作用 该实体头的作用是让服务器告诉浏览器它发送的数据属于什么文件类型。</span><br><span class="line">res.setHeader(&quot;Content-Type&quot;,&apos;text/html;charset=utf-8&apos;)</span><br></pre></td></tr></table></figure><h4 id="res-redirect"><a href="#res-redirect" class="headerlink" title="res.redirect()"></a>res.redirect()</h4><p>调用redirect()方法后，其后的代码都不会被执行。<br>而使用redirect()设置的状态码不是301或302也不会发生跳转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.redirect([status,] path)</span><br><span class="line">//重定义到path所指定的URL，重定向时可以同时指定HTTP状态码，不指定状态码默认为302</span><br></pre></td></tr></table></figure></p><h4 id="res-location"><a href="#res-location" class="headerlink" title="res.location()"></a>res.location()</h4><p>location()方法本质上是调用了ServerResponse对象的setHeader()方法，但并没有设置状态码。<br>使用location()设置头信息，而不设置状态码或状态码不是301或302，并不会发生重定向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.location(path)</span><br></pre></td></tr></table></figure></p><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p><img src="/img/express/request.jpg" alt="response"></p><h4 id="req-query"><a href="#req-query" class="headerlink" title="req.query"></a>req.query</h4><p>处理 get 请求，获取 get 请求参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /search?q=tobi+ferret</span></span><br><span class="line">req.query.q</span><br><span class="line"><span class="comment">// =&gt; "tobi ferret"</span></span><br><span class="line"><span class="comment">// GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse</span></span><br><span class="line">req.query.order</span><br><span class="line"><span class="comment">// =&gt; "desc"</span></span><br><span class="line">req.query.shoe.color</span><br><span class="line"><span class="comment">// =&gt; "blue"</span></span><br><span class="line">req.query.shoe.type</span><br><span class="line"><span class="comment">// =&gt; "converse"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-body"><a href="#req-body" class="headerlink" title="req.body"></a>req.body</h4><p>处理 post 请求，获取 post 请求体<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// POST user[name]=tobi&amp;user[email]=tobi@learnboost.com</span></span><br><span class="line">req.body.user.name</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line">req.body.user.email</span><br><span class="line"><span class="comment">// =&gt; "tobi@learnboost.com"</span></span><br><span class="line"><span class="comment">// POST &#123; "name": "tobi" &#125;</span></span><br><span class="line">req.body.name</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-params"><a href="#req-params" class="headerlink" title="req.params"></a>req.params</h4><p>处理 /:xxx 形式的 get 或 post 请求，获取请求参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /user/tj</span></span><br><span class="line">req.params.name</span><br><span class="line"><span class="comment">// =&gt; "tj"</span></span><br><span class="line"><span class="comment">// GET /file/javascripts/jquery.js</span></span><br><span class="line">req.params[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// =&gt; "javascripts/jquery.js"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-param-name"><a href="#req-param-name" class="headerlink" title="req.param(name)"></a>req.param(name)</h4><p>处理 get 和 post 请求，但查找优先级由高到低为 req.params→req.body→req.query<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ?name=tobi</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line"><span class="comment">// POST name=tobi</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line"><span class="comment">// /user/tobi for /user/:name</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br></pre></td></tr></table></figure></p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>用于客户端与服务器路由匹配之前的中间操作，正常中间件放在路由上面，中间件通过next()往下走。</p><h4 id="app-use（-path-function）"><a href="#app-use（-path-function）" class="headerlink" title="app.use（[path],function）"></a>app.use（[path],function）</h4><p>利用express托管静态文件<br>node.js不能通过目录来引入文件，而express可以，public为静态目录<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置public文件夹为存放静态文件的目录。</span></span><br><span class="line"><span class="keyword">let</span> path=<span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="comment">//ex4里面唯一的内置中间件</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br></pre></td></tr></table></figure></p><p>一个中间件处理器，请求来了，让那些中间件先处理一遍</p><ul><li>没有挂载路径的中间件，应用的每个请求都会执行该中间件</li><li>挂载至 /path 的中间件，任何指向 /path 的请求都会执行它<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(&quot;/name&quot;,function(req,res,next)&#123;</span><br><span class="line">res.setHeader(&quot;Content-Type&quot;,&apos;text/html;charset=utf-8&apos;)</span><br><span class="line">next();</span><br><span class="line">&#125;)</span><br><span class="line">app.get(&quot;/name/n&quot;,function(req,res)&#123;</span><br><span class="line">&#125;)</span><br><span class="line">//也可以匹配到，在执行get请求/name/n时先执行上面的中间件</span><br></pre></td></tr></table></figure></li></ul><h4 id="错误中间件"><a href="#错误中间件" class="headerlink" title="错误中间件"></a>错误中间件</h4><p>错误处理中间件和其他中间件定义类似，只是必须要使用 4 个参数(err, req, res, next)。即使不需要 next 对象，也必须在签名中声明它，否则中间件会被识别为一个常规中间件，不能处理错误。遇见错误之后直接执行错误中间件。<br>错误处理中间件应当在在其他 app.use() 和路由调用之后才能加载，一般放在路由的最底部，比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> methodOverride = <span class="built_in">require</span>(<span class="string">'method-override'</span>);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line">app.use(methodOverride());</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">'Something broke!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="应用生成器"><a href="#应用生成器" class="headerlink" title="应用生成器"></a>应用生成器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">$ npm install express-generator -g</span><br><span class="line"><span class="comment">//view=XXX 使用引擎名字  myapp项目名称</span></span><br><span class="line">$ express --view=pug myapp</span><br><span class="line"><span class="comment">//安装所有依赖</span></span><br><span class="line">$ cd myapp</span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动myapp项目</span></span><br><span class="line">$ set DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure><hr><p>我的石墨文档链接：<a href="https://shimo.im/docs/TXeewzaE8Jsdgn0I/" target="_blank" rel="noopener">https://shimo.im/docs/TXeewzaE8Jsdgn0I/</a><br>练习的简易聊天室连接：<a href="https://github.com/biubiuins/demo_chat" target="_blank" rel="noopener">https://github.com/biubiuins/demo_chat</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;express-学习笔记&quot;&gt;&lt;a href=&quot;#express-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;express 学习笔记&quot;&gt;&lt;/a&gt;express 学习笔记&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;搭建简单服务器&quot;&gt;&lt;a href=&quot;#搭
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>project_email</title>
    <link href="http://yoursite.com/2018/10/11/project-email/"/>
    <id>http://yoursite.com/2018/10/11/project-email/</id>
    <published>2018-10-11T07:16:32.000Z</published>
    <updated>2018-10-12T06:37:09.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="邮件收发项目"><a href="#邮件收发项目" class="headerlink" title="邮件收发项目"></a>邮件收发项目</h2><p>大二上开始学html，css，js之后做的暑假做的前端页面，很感谢老师可以给一个练手的机会，在做的过程中发现了很多问题，以及项目完成之后的收获。<br>&nbsp;&nbsp;&nbsp;&nbsp;虽然是一个很简单的界面，但是之前学习的时候不太仔细，也没有demo练习，还是做的磕磕绊绊，还好最后做的差不多了。TAT<br>&nbsp;&nbsp;针对过程中的问题，阅读了很多关于语法规范的文章，js，jq又重新学习了一遍（练习了很多），大二下期基本在学习之中度过的。希望在以后的项目中可以有所进步，彻底的实现前后端分离！！！</p><h2 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h2><ul><li>完成时间：大二上期寒假  2018-3月左右</li><li>bootsrap框架，layui框架，jquery</li></ul><h2 id="项目不足"><a href="#项目不足" class="headerlink" title="项目不足"></a>项目不足</h2><ul><li>语法不规范，复用性不强，后面修改过一次感觉修改起来很复杂</li><li>js不熟练，项目之后大二下期又重新开始学习了一遍js，并写了总结 (<a href="https://biubiuins.github.io/2018/10/11/summary-2018-9/" target="_blank" rel="noopener">https://biubiuins.github.io/2018/10/11/summary-2018-9/</a>)</li><li><p>技术不足，没有实现前后端分离</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2></li><li><p>首页 <a href="http://mailroom.sicau.edu.cn/email/public/" target="_blank" rel="noopener">http://mailroom.sicau.edu.cn/email/public/</a></p><ul><li>bootsrap做了响应式，用了ajax请求数据</li></ul></li><li>管理页面（需要登陆仅提供图片）<br><img src="/img/project_email/admin.png" width="85%"><ul><li>实现全选与批量删除</li><li>点击已取之后，重新获取数据（保证筛选邮件之后点击已取仍显示的是筛选之后的邮件)</li><li>邮件类型默认显示上一次选择的类型，可输入筛选的下拉框<br><img src="/img/project_email/admin1.png" width="85%"></li><li>超级管理员界面实现了原生js模态框，并做了根据屏幕居中</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;邮件收发项目&quot;&gt;&lt;a href=&quot;#邮件收发项目&quot; class=&quot;headerlink&quot; title=&quot;邮件收发项目&quot;&gt;&lt;/a&gt;邮件收发项目&lt;/h2&gt;&lt;p&gt;大二上开始学html，css，js之后做的暑假做的前端页面，很感谢老师可以给一个练手的机会，在做的过程中发现
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>summary-2018.9</title>
    <link href="http://yoursite.com/2018/10/11/summary-2018-9/"/>
    <id>http://yoursite.com/2018/10/11/summary-2018-9/</id>
    <published>2018-10-11T04:32:50.000Z</published>
    <updated>2018-10-11T06:11:08.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="summary-2018-9"><a href="#summary-2018-9" class="headerlink" title="summary-2018-9"></a>summary-2018-9</h1><hr><p>这是在学会搭建博客之后的第一篇博客，以前学习的时候也有记笔记，所以把之前学习笔记上面整理的常见的功能、封装以及遇到的问题写出来，这篇仅限于js，jq。现在正在学习vue，希望在过段时间，自己也能写出关于vue学习的总结。<br>在此之前还需要了解markdown的语法TAT</p><blockquote><p>原来的笔记记录在石墨文档，<a href="https://shimo.im/docs/c8YrJy4obNICaWiS/" target="_blank" rel="noopener">https://shimo.im/docs/c8YrJy4obNICaWiS/</a></p></blockquote><h2 id="ID处理"><a href="#ID处理" class="headerlink" title="ID处理"></a>ID处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 获取id */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> id === <span class="string">"string"</span> ? <span class="built_in">document</span>.getElementById(id) : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="匀速动画"><a href="#匀速动画" class="headerlink" title="匀速动画"></a>匀速动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素，目标，步数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constant</span>(<span class="params">obj, target, speed</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 清除定时器</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="comment">//2.判断方向</span></span><br><span class="line">    <span class="comment">//如果现在的距离小于目标值,则往右，否则向左</span></span><br><span class="line">    <span class="keyword">let</span> dir =obj.offsetLeft&lt;target?speed:-speed;</span><br><span class="line">    <span class="comment">//3. 设置定时器</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        obj.style.left = obj.offsetLeft + dir + <span class="string">"px"</span>;</span><br><span class="line">        <span class="comment">//若超出目标值或者不到目标值</span></span><br><span class="line">        <span class="comment">//最后相减的值取绝对值后，总是小于步数的</span></span><br><span class="line">        <span class="comment">//Math.abs(dir)||speed</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(target-obj.offsetLeft)&lt;<span class="built_in">Math</span>.abs(dir))&#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">//根据目标值板正</span></span><br><span class="line">            obj.style.left =target+<span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buffer</span>(<span class="params">obj, json, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 清除定时器</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="keyword">var</span> begin = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 设置定时器</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.0 旗帜, 决定动画是否结束</span></span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 2.1 遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> json)&#123;</span><br><span class="line">            <span class="comment">// 2.2.-1 求出起始值 和 结束值</span></span><br><span class="line">            <span class="keyword">if</span>(k === <span class="string">'opacity'</span>)&#123; <span class="comment">// 透明度</span></span><br><span class="line">                begin = <span class="built_in">parseInt</span>( <span class="built_in">parseFloat</span>(getCssAttr(obj, k)) * <span class="number">100</span>);</span><br><span class="line">                end = <span class="built_in">parseInt</span>(<span class="built_in">parseFloat</span>(json[k]) * <span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'scrollTop'</span>)&#123; <span class="comment">// 滚动到头部</span></span><br><span class="line">                begin = obj.scrollTop;</span><br><span class="line">                end = <span class="built_in">parseInt</span>(json[k]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">// 正常情况</span></span><br><span class="line">                begin = <span class="built_in">parseInt</span>(getCssAttr(obj, k));</span><br><span class="line">                end = <span class="built_in">parseInt</span>(json[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2.0 求出步长</span></span><br><span class="line">            <span class="comment">//步长公式</span></span><br><span class="line">            <span class="keyword">let</span> step = (end - begin) * <span class="number">0.2</span>;</span><br><span class="line">            step = step &gt;=<span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">            <span class="comment">// 2.2.1 计算起始位置</span></span><br><span class="line">            <span class="keyword">if</span>(k === <span class="string">'opacity'</span>)&#123;</span><br><span class="line">                obj.style.opacity = (begin + step) / <span class="number">100</span>;</span><br><span class="line">                obj.style.filter = <span class="string">'alpha(opacity='</span> + (begin + end)+<span class="string">')'</span>; <span class="comment">// 针对IE</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'scrollTop'</span>)&#123;</span><br><span class="line">                obj.scrollTop = begin + step;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'zIndex'</span>)&#123;</span><br><span class="line">                obj.style[k] = json[k];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                obj.style[k] = begin + step + <span class="string">'px'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2.2 判断</span></span><br><span class="line">            <span class="keyword">if</span>(begin !== end)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.0 结束动画</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">// 开启动画组中的下一组动画</span></span><br><span class="line">            <span class="keyword">if</span>(fn)&#123; <span class="comment">// 判断有没有这个函数</span></span><br><span class="line">                fn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="js获取CSS"><a href="#js获取CSS" class="headerlink" title="js获取CSS"></a>js获取CSS</h4><p>利用 [] 访问属性 元素.style[“属性”];<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种语法的好处就是可以动态的传递参数作为属性</span></span><br><span class="line"><span class="comment">//只能获取行类标签</span></span><br><span class="line">     <span class="keyword">var</span> h = <span class="string">'height'</span>;</span><br><span class="line">     box.style[h] = <span class="number">300</span> + <span class="string">'px'</span>;</span><br><span class="line"><span class="comment">//获取外部css或页内的css</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyleAttr</span>(<span class="params">obj, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.currentStyle)&#123; <span class="comment">// IE 和 opera</span></span><br><span class="line">         <span class="keyword">return</span> obj.currentStyle[attr];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//window.getComputedStyle("元素", "伪类") （ 注意：两个选项是必须的，没有伪类 用 null 替代 ）</span></span><br><span class="line">    <span class="comment">//也可以点选，但是为了传递参数作为属性</span></span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(obj, <span class="literal">null</span>)[attr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><ul><li>在定时器事件前，先设置接收定时器的变量指向null</li><li>在定时器事件里，先要清除定时器再设置定时器，先清除是防止定时器累加<h2 id="轮播"><a href="#轮播" class="headerlink" title="轮播"></a>轮播</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3>这种不适合多图<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slider</span> (<span class="params">sliderid,olStyleClassName,imgWidth,speed,second</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//高级排他</span></span><br><span class="line">    <span class="comment">//lastIndex 选中的小圆点样式 currentIndex 小圆点索引  picIndex 图片索引</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex=<span class="number">0</span>,currentIndex=<span class="number">0</span>,picIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1. 获取需要的标签</span></span><br><span class="line">    <span class="keyword">let</span> ul=$(sliderid).children[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span>  ol=$(sliderid).children[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> list=ul.children;</span><br><span class="line">    <span class="keyword">let</span> olList= ol.children;</span><br><span class="line">    <span class="comment">// 2.克隆最后一个li标签</span></span><br><span class="line">    ul.appendChild(list[<span class="number">0</span>].cloneNode(<span class="literal">true</span>));</span><br><span class="line">    <span class="comment">// 3.动态创建小圆点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;list.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> li =<span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">        ol.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.第一个小圆点选中</span></span><br><span class="line">    olList[<span class="number">0</span>].className=olStyleClassName;</span><br><span class="line">    <span class="comment">//5.监听每个li的进入事件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;olList.length;i++)&#123;</span><br><span class="line">        <span class="comment">//5.1 每一个li绑定自己的事件</span></span><br><span class="line">        olList[i].onmouseover=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//先清除之前的选中状态，在把当前选中的索引给lastIndex</span></span><br><span class="line">            lastIndex=currentIndex;</span><br><span class="line">            olList[lastIndex].className=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">this</span>.className=olStyleClassName;</span><br><span class="line">            lastIndex=i;</span><br><span class="line">            <span class="comment">//5.2图片动起来</span></span><br><span class="line">            constant(ul,-(i * imgWidth),speed);</span><br><span class="line">            currentIndex=picIndex=i;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.定时器</span></span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    timer = setInterval(autoPlay, second);</span><br><span class="line">    <span class="comment">// 7. 清除和设置定时器</span></span><br><span class="line">    $(sliderid).onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;;</span><br><span class="line">    $(sliderid).onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        timer = setInterval(autoPlay, second);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        picIndex++;</span><br><span class="line">        currentIndex++;</span><br><span class="line">        <span class="comment">//如果图片到了最后一张</span></span><br><span class="line">        <span class="keyword">if</span> (picIndex &gt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">            ul.style.left = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//从第二张图片开始</span></span><br><span class="line">            picIndex = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        constant(ul, -(picIndex * imgWidth), speed);</span><br><span class="line">        <span class="comment">//小原点的选中</span></span><br><span class="line">        <span class="keyword">if</span> (currentIndex &gt; olList.length - <span class="number">1</span>) &#123;</span><br><span class="line">            currentIndex = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;olList.length;i++)&#123;</span><br><span class="line">            olList[i].className=<span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        olList[currentIndex].className=olStyleClassName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>两个图片宽度的位置，第一个位置显示（当前），第二位置隐藏<br><img src="/img/summary-2018.9/summary01.png" alt="轮播图"></p><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>改变透明度，循环一遍让所有的opacity动画为0，然后当前为opacity动画为1，索引++、<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opacityAutoPlay</span>(<span class="params">ulid,speed</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取所有的li标签</span></span><br><span class="line">    <span class="keyword">var</span> lis = $(ulid).getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 开始定时器</span></span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.1 改变透明度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;lis.length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> singerLi = lis[i];</span><br><span class="line">            buffer(singerLi, &#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer(lis[index], &#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 2.2 索引++</span></span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(index === lis.length)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, speed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h2><ul><li>父盒子居中<ol><li>Math.floor(屏幕宽度/子盒子宽度)=cols</li><li>子盒子的宽度*cols=父盒子的宽度</li><li>margin:0 auto;</li></ol></li><li><p>子盒子定位<br>第一行不变，其他子盒子接在第一行最矮的盒子的后面（反复）</p><ol><li>拿到所有盒子的高度。把第一行的盒子的高度放在一个数组里面（i&lt;cols,heightArr[])</li><li>在剩下的盒子里面(i&gt;=cols),找出第一行最矮的盒子的高度（Math.min(…heightArr)||Math.min.apply(this.height)）<br>2.1 找出最矮盒子的索引(遍历heightArr[],找出和第二步盒子高度一样的i返回)<br>2.2 剩下盒子定位（left=第2.1步的索引*子盒子宽度，top=最矮的盒子高度）<br>2.3 更新最矮盒子的高度 （heightArr[最矮盒子的高度]+=当前盒子的高度）</li></ol><ul><li>滚动加载图片</li></ul><ol><li>监听窗口的滚动，滚动到你需要的位置加载</li></ol><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 实现瀑布流布局</span></span><br><span class="line">    waterFull(<span class="string">"main"</span>, <span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 动态加载图片</span></span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(checkWillLoadImage())&#123;</span><br><span class="line">            <span class="comment">// 2.1 造数据</span></span><br><span class="line">            <span class="keyword">var</span> dataArr = [</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img04.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img06.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img08.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img09.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img10.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img12.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img14.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img16.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img18.jpg"</span>&#125;</span><br><span class="line">            ];</span><br><span class="line">            <span class="comment">// 2.2 创建元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;dataArr.length; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> newBox = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">                newBox.className = <span class="string">"box"</span>;</span><br><span class="line">                $(<span class="string">"main"</span>).appendChild(newBox);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> newPic = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">                newPic.className = <span class="string">"pic"</span>;</span><br><span class="line">                newBox.appendChild(newPic);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> newImg = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">                newImg.src = <span class="string">"images/"</span> + dataArr[i].src;</span><br><span class="line">                newPic.appendChild(newImg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.3 重新布局</span></span><br><span class="line">            waterFull(<span class="string">"main"</span>, <span class="string">"box"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现瀑布流布局</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterFull</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 父盒子居中</span></span><br><span class="line">    <span class="comment">// 1.1 获取所有的盒子</span></span><br><span class="line">    <span class="keyword">var</span> allBox = $(parent).getElementsByClassName(child);</span><br><span class="line">    <span class="comment">// 1.2 获取子盒子的宽度</span></span><br><span class="line">    <span class="keyword">var</span> boxWidth = allBox[<span class="number">0</span>].offsetWidth;</span><br><span class="line">    <span class="comment">// 1.3 获取屏幕的宽度</span></span><br><span class="line">    <span class="keyword">var</span> screenW = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">    <span class="comment">// 1.4 求出列数</span></span><br><span class="line">    <span class="keyword">var</span> cols = <span class="built_in">parseInt</span>(screenW / boxWidth);</span><br><span class="line">    <span class="comment">// 1.5 父盒子居中</span></span><br><span class="line">    $(parent).style.width = cols * boxWidth + <span class="string">'px'</span>;</span><br><span class="line">    $(parent).style.margin = <span class="string">"0</span></span><br><span class="line"><span class="string">    // 2. 子盒子的定位</span></span><br><span class="line"><span class="string">    // 2.1 定义高度数组</span></span><br><span class="line"><span class="string">    var heightArr = [], boxHeight = 0, minBoxHeight = 0, minBoxIndex = 0;</span></span><br><span class="line"><span class="string">    // 2.2 遍历子盒子</span></span><br><span class="line"><span class="string">    for (var i = 0; i &lt; allBox.length; i++) &#123;</span></span><br><span class="line"><span class="string">        // 2.2.1 求出每一个子盒子的高度</span></span><br><span class="line"><span class="string">        boxHeight = allBox[i].offsetHeight;</span></span><br><span class="line"><span class="string">        // 2.2.2 取出第一行盒子的高度放入高度数组</span></span><br><span class="line"><span class="string">        if (i &lt; cols) &#123; // 第一行</span></span><br><span class="line"><span class="string">            heightArr.push(boxHeight);</span></span><br><span class="line"><span class="string">        &#125; else &#123; // 剩余行</span></span><br><span class="line"><span class="string">            // 1. 取出最矮的盒子高度</span></span><br><span class="line"><span class="string">            // minBoxHeight = _.min(heightArr);</span></span><br><span class="line"><span class="string">            minBoxHeight=Math.min(...heightArr);</span></span><br><span class="line"><span class="string">            // 2. 求出最矮盒子对应的索引</span></span><br><span class="line"><span class="string">            minBoxIndex = getMinBoxIndex(heightArr, minBoxHeight);</span></span><br><span class="line"><span class="string">            // 3. 子盒子定位</span></span><br><span class="line"><span class="string">            allBox[i].style.position = "</span>absolute<span class="string">";</span></span><br><span class="line"><span class="string">            allBox[i].style.left = minBoxIndex * boxWidth + 'px';</span></span><br><span class="line"><span class="string">            allBox[i].style.top = minBoxHeight + 'px';</span></span><br><span class="line"><span class="string">            // 4. 更新数组中的高度</span></span><br><span class="line"><span class="string">            heightArr[minBoxIndex] += boxHeight;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    console.log(heightArr, minBoxHeight, minBoxIndex);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 获取数组中最矮盒子高度的索引</span></span><br><span class="line"><span class="string"> * @param arr</span></span><br><span class="line"><span class="string"> * @param val</span></span><br><span class="line"><span class="string"> * @returns &#123;number&#125;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function getMinBoxIndex(arr, val) &#123;</span></span><br><span class="line"><span class="string">    for(var i=0; i&lt;arr.length; i++)&#123;</span></span><br><span class="line"><span class="string">        if(arr[i] === val)&#123;</span></span><br><span class="line"><span class="string">            return i;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 判断是否具备加载图片的条件</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function checkWillLoadImage() &#123;</span></span><br><span class="line"><span class="string">    // 1. 获取最后一个盒子</span></span><br><span class="line"><span class="string">    var allBox = document.getElementsByClassName("</span>box<span class="string">");</span></span><br><span class="line"><span class="string">    var lastBox = allBox[allBox.length - 1];</span></span><br><span class="line"><span class="string">    // 2. 求出最后一个盒子自身高度的一半 + offsetTop</span></span><br><span class="line"><span class="string">    var lastBoxDis = lastBox.offsetHeight * 0.5 + lastBox.offsetTop;</span></span><br><span class="line"><span class="string">    // 3. 求出屏幕的高度</span></span><br><span class="line"><span class="string">    var screenW = document.body.clientHeight || document.documentElement.clientHeight;</span></span><br><span class="line"><span class="string">    // 4. 求出页面偏离浏览器的高度</span></span><br><span class="line"><span class="string">    var scrollTop = scroll().top;</span></span><br><span class="line"><span class="string">    return lastBoxDis &lt;= screenW + scrollTop;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>jq<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当页面加载完毕</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'load'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//1.实现瀑布流布局</span></span><br><span class="line">waterFall();</span><br><span class="line"><span class="comment">//2.滚动加载</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//判断是否加载</span></span><br><span class="line"><span class="keyword">if</span> (checkWillLoad())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">////创造假数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="string">'dataImg'</span>:[&#123;<span class="string">'img'</span>:<span class="string">'23.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'24.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'25.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'26.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'27.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'28.jpg'</span>&#125;]&#125;;</span><br><span class="line"><span class="comment">//遍历创建盒子</span></span><br><span class="line">$.each(data.dataImg,<span class="function"><span class="keyword">function</span> (<span class="params">index,value</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个div标签 设置它的类为'box' 添加到'main'里面去</span></span><br><span class="line"><span class="keyword">var</span> newBox = $(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'box'</span>).appendTo($(<span class="string">'#main'</span>));</span><br><span class="line">    <span class="keyword">var</span> newPic = $(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'pic'</span>).appendTo($(newBox));</span><br><span class="line">        <span class="comment">//创建img  取出遍历的对象value的img属性对应的值</span></span><br><span class="line">     $(<span class="string">'&lt;img&gt;'</span>).attr(<span class="string">'src'</span>,<span class="string">'images/'</span>+$(value).attr(<span class="string">'img'</span>)).appendTo($(newPic));</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//1.实现瀑布流布局</span></span><br><span class="line">        waterFall();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//实现瀑布流布局</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">waterFall</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//拿到所有的盒子</span></span><br><span class="line">        <span class="keyword">var</span> allBox = $(<span class="string">'#main &gt; .box'</span>);</span><br><span class="line">        <span class="comment">//取出其中一个盒子的宽度</span></span><br><span class="line">        <span class="keyword">var</span> boxWidth = $(allBox).eq(<span class="number">0</span>).outerWidth();</span><br><span class="line">        <span class="comment">//取出屏幕的高度</span></span><br><span class="line">        <span class="keyword">var</span> screenWidth = $(<span class="built_in">window</span>).width();</span><br><span class="line">        <span class="comment">//求出列数 //取整函数取整</span></span><br><span class="line">        <span class="keyword">var</span> cols = <span class="built_in">Math</span>.floor( screenWidth/boxWidth);</span><br><span class="line">        <span class="comment">//父标签居中</span></span><br><span class="line">        $(<span class="string">'#main'</span>).css(&#123;</span><br><span class="line">        <span class="string">'width'</span>:cols * boxWidth + <span class="string">'px'</span>,</span><br><span class="line">        <span class="string">'margin'</span>:<span class="string">'0 auto'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//对子盒子定位</span></span><br><span class="line">        <span class="keyword">var</span> heightArr = [];</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        $.each(allBox,<span class="function"><span class="keyword">function</span> (<span class="params">index,value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//取出单独盒子的高度</span></span><br><span class="line">        <span class="keyword">var</span> boxHeight = $(value).outerHeight();</span><br><span class="line">        <span class="comment">//判断是否第一行</span></span><br><span class="line">        <span class="keyword">if</span>(index &lt; cols)</span><br><span class="line">        &#123;</span><br><span class="line">        heightArr[index] = boxHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">//剩余的盒子要瀑布流布局</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//求出最矮的盒子高度</span></span><br><span class="line">        <span class="keyword">var</span> minBoxHeight = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,heightArr);</span><br><span class="line">        <span class="comment">//取出最矮高度对应的索引  封装了js的这个方法</span></span><br><span class="line">        <span class="keyword">var</span> minBoxIndex = $.inArray(minBoxHeight,heightArr);</span><br><span class="line">        <span class="comment">//定位</span></span><br><span class="line">        $(value).css(&#123;</span><br><span class="line">        <span class="string">'position'</span>:<span class="string">'absolute'</span>,</span><br><span class="line">        <span class="string">'top'</span>:minBoxHeight + <span class="string">'px'</span>,</span><br><span class="line">        <span class="string">'left'</span>:minBoxIndex * boxWidth + <span class="string">'px'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//更新数组中最矮的高度</span></span><br><span class="line">        heightArr[minBoxIndex] += boxHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否符合加载条件</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkWillLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//直接取出最后一个盒子</span></span><br><span class="line">        <span class="keyword">var</span> lastBox = $(<span class="string">'#main &gt; div'</span>).last();</span><br><span class="line">        <span class="comment">//取出最后一个盒子高度的一半 + 头部偏离的位置</span></span><br><span class="line">        <span class="keyword">var</span> lastBoxDis = $(lastBox).outerHeight() + $(lastBox).offset().top;</span><br><span class="line">        <span class="comment">//求出浏览器的高度</span></span><br><span class="line">        <span class="keyword">var</span> clientHeight = $(<span class="built_in">window</span>).height();</span><br><span class="line">        <span class="comment">//求出页面偏离浏览器高度</span></span><br><span class="line">        <span class="keyword">var</span> scrollTopHeight = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">        <span class="comment">//比较返回</span></span><br><span class="line">        <span class="keyword">return</span> lastBoxDis &lt;= clientHeight + scrollTopHeight;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h4 id="margin-0-auto"><a href="#margin-0-auto" class="headerlink" title="margin:0 auto"></a>margin:0 auto</h4><ol><li>块级元素</li><li>给定要居中的块级元素的宽度。</li><li>所有元素也可以通过对父元素设置<code>text-align：center；</code>的方式来实现居中。而对于块元素来说，对要居中的元素自身进行设置<code>text-align:center</code>也能实现居中</li><li><code>margin:0 auto;</code>可以使盒子居中，<code>text-align:center;</code>可以使文本居中，<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4>onresize举列子<br>窗口大小一变化就执行，太过灵敏，所以需要阻止<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用定时器</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    <span class="comment">// 节流</span></span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        waterFull(<span class="string">'main'</span>, <span class="string">'box'</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装之后的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(fn, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="apply-call"><a href="#apply-call" class="headerlink" title="apply/call"></a>apply/call</h4><p>这个面试中常考到，现在只做初步了解<br>(<a href="https://www.cnblogs.com/gaowx/p/4837687.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaowx/p/4837687.html</a> )</p><ul><li>改变函数的this指向</li><li>apply可以改变传递给函数参数的形式<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newDate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//声明日期对象，里面可以设置参数表示其他时间</span></span><br><span class="line">  <span class="keyword">let</span> date =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="comment">//获取时间里面的年</span></span><br><span class="line">  date.getFullYear()</span><br><span class="line">  <span class="comment">//月0-11</span></span><br><span class="line">  date.getMonth()+<span class="number">1</span></span><br><span class="line">  <span class="comment">//日1-31</span></span><br><span class="line">  date.getDate()</span><br><span class="line">  <span class="comment">//获取星期0-6</span></span><br><span class="line">  data.Day</span><br><span class="line">  <span class="comment">//设置某一天</span></span><br><span class="line">  date.setDate（day）</span><br><span class="line">  <span class="comment">//时0-23</span></span><br><span class="line">  date.getHours()</span><br><span class="line">  <span class="comment">//分0-59</span></span><br><span class="line">  date.getMinutes()</span><br><span class="line">  <span class="comment">//秒0-59</span></span><br><span class="line">  date.getSeconds()</span><br><span class="line">  <span class="comment">//获取毫秒</span></span><br><span class="line">  date.getMilliSeconds()</span><br><span class="line">  <span class="comment">//时间戳</span></span><br><span class="line">  date.getTime()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ms转化时间"><a href="#ms转化时间" class="headerlink" title="ms转化时间"></a>ms转化时间</h3><p><img src="/img/summary-2018.9/data.jpg" alt="data"></p><h2 id="cookie封装"><a href="#cookie封装" class="headerlink" title="cookie封装"></a>cookie封装</h2><p>封装成插件，引入该文件后，$.addCookie(key,value,day,path,domain)来引用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$,window</span>) </span>&#123;</span><br><span class="line">    $.extend(&#123;</span><br><span class="line">        addCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">addCookie</span>(<span class="params">key,value,day,path,domain</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//1.处理默认保存的路径</span></span><br><span class="line">        <span class="keyword">var</span> index=<span class="built_in">window</span>.location.pathname.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line">        <span class="keyword">var</span> currentPath=<span class="built_in">window</span>.location.pathname.slice(<span class="number">0</span>,index)</span><br><span class="line">        path=path||currentPath</span><br><span class="line">        <span class="comment">//2.处理默认domain</span></span><br><span class="line">        domain=domain||<span class="built_in">document</span>.domain</span><br><span class="line">        <span class="comment">//3.处理默认的过期时间</span></span><br><span class="line">        <span class="keyword">if</span>(!day)&#123;</span><br><span class="line">          <span class="built_in">document</span>.cookie=key+<span class="string">"="</span>+value+<span class="string">";path="</span>+path+<span class="string">";domain="</span>+domain+<span class="string">';'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> date =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            date.setDate(date.getDate()+day)</span><br><span class="line">            <span class="built_in">document</span>.cookie=key+<span class="string">"="</span>+value+<span class="string">";expires="</span>+date.toGMTString()+<span class="string">";path="</span>+path+<span class="string">";domain="</span>+domain+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        getCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> res=<span class="built_in">document</span>.cookie.split(<span class="string">';'</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++)&#123;</span><br><span class="line">        <span class="comment">//把key和value切割</span></span><br><span class="line">            <span class="keyword">var</span> temp=res[i].split(<span class="string">'='</span>)</span><br><span class="line">            <span class="comment">//前后可能有空格，把空格删除</span></span><br><span class="line">            <span class="keyword">if</span>(temp[<span class="number">0</span>].trim()===key)&#123;</span><br><span class="line">                <span class="keyword">return</span> temp[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        delCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">delCookie</span>(<span class="params">key, path</span>) </span>&#123;</span><br><span class="line">         <span class="comment">//默认情况下只能删除默认路径中保存的cookie，如果要删除指定路径保存的cookie，要把路径值传出去</span></span><br><span class="line">         <span class="comment">//设置过期时间为-1</span></span><br><span class="line">                addCookie(key, getCookie(key), <span class="number">-1</span>, path)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery,<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><h2 id="动态添加的元素绑定事件"><a href="#动态添加的元素绑定事件" class="headerlink" title="动态添加的元素绑定事件"></a>动态添加的元素绑定事件</h2><ul><li><p>delegate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;ul&apos;).delegate(&apos;li&apos;,&apos;click&apos;,function()&#123;</span><br><span class="line">//操作的还是li</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>onclick事件<br>在动态添加数据的时候，就给元素绑定onclick事件</p></li><li>on（）<br>常用  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//把动态添加的元素写在on里面，如果调用的函数是外部定义好的，则在调用的时候不加（）</span><br><span class="line">//不然会跳过点击事件直接执行函数</span><br><span class="line">$(&quot;父元素或祖辈元素&quot;).on(&quot;click&quot;,&quot;动态添加的元素&quot;,function()&#123;</span><br><span class="line">$(this).css(&quot;border&quot;,&quot;5px solid #000&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h3><p><a href="http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css" target="_blank" rel="noopener">http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css</a></p><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拿到select对象：</span></span><br><span class="line"><span class="keyword">var</span> myselect=<span class="built_in">document</span>.getElementById(<span class="string">"select"</span>);</span><br><span class="line"><span class="comment">//拿到选中项的索引</span></span><br><span class="line"><span class="keyword">var</span> index=myselect.selectedIndex ; <span class="comment">// selectedIndex代表的是你所选中项的index</span></span><br><span class="line"><span class="comment">//拿到选中项options的value：</span></span><br><span class="line">myselect.options[index].value;</span><br><span class="line"><span class="comment">//拿到选中项options的text：</span></span><br><span class="line">myselect.options[index].text;</span><br><span class="line"><span class="comment">//拿到选中项的其他值，比如这里的url：</span></span><br><span class="line"> myselect.options[index].getAttribute(<span class="string">'url'</span>);</span><br><span class="line"><span class="comment">//jquery</span></span><br><span class="line">var options=$(“#select option:selected”); //获取选中的项</span><br><span class="line">alert(options.val()); <span class="comment">//拿到选中项的值</span></span><br><span class="line">alert(options.text()); <span class="comment">//拿到选中项的文本</span></span><br><span class="line">alert(options.attr(<span class="string">'url'</span>)); <span class="comment">//拿到选中项的url值</span></span><br><span class="line"><span class="comment">//设置</span></span><br><span class="line"><span class="comment">//设置value为pxx的项选中</span></span><br><span class="line">$(<span class="string">".selector"</span>).val(<span class="string">"pxx"</span>)</span><br><span class="line"><span class="comment">//设置text为pxx的项选中</span></span><br><span class="line">$(<span class="string">".selector"</span>).find(<span class="string">"option[text='pxx']"</span>).attr(<span class="string">"selected"</span>,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="H5-datalist"><a href="#H5-datalist" class="headerlink" title="H5 datalist"></a>H5 datalist</h3><p>datalist 只是列表<br>赋值取值还是通过input.样式等都在input上操作<br><a href="https://www.zhangxinxu.com/wordpress/2013/03/html5-datalist-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8-%E5%8F%AF%E8%A1%8C%E6%80%A7/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2013/03/html5-datalist-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8-%E5%8F%AF%E8%A1%8C%E6%80%A7/</a></p><h4 id="邮箱的自动补全"><a href="#邮箱的自动补全" class="headerlink" title="邮箱的自动补全"></a>邮箱的自动补全</h4><p>HTML代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">邮箱：&lt;input type=&quot;email&quot; id=&quot;email&quot; list=&quot;emailList&quot; name=&quot;off_autocomplete&quot; /&gt;</span><br><span class="line">&lt;datalist id=&quot;emailList&quot;&gt;</span><br><span class="line">//其中*为占位符，当文本框输入内容的时候，*替换成邮箱地址的前半部分，于是，动态邮件地址提示的效果就实现了</span><br><span class="line">    &lt;option value=&quot;*@qq.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@163.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@gmail.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@yahoo.com.cn&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@126.com&quot;&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br></pre></td></tr></table></figure></p><p>JS代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eleList = <span class="built_in">document</span>.getElementById(<span class="string">"emailList"</span>)</span><br><span class="line">    , eleMail = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>)</span><br><span class="line">    , htmlListInit = <span class="string">''</span>, arrEmailList = [];</span><br><span class="line"><span class="keyword">if</span> (eleMail &amp;&amp; eleList &amp;&amp; (htmlListInit = eleList.innerHTML) !== <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// 得到类似["qq.com", "163.com", "gmail.com", ...]的数据</span></span><br><span class="line">    arrEmailList = [].slice.call(eleList.getElementsByTagName(<span class="string">"option"</span>)).map(<span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> option.value.replace(<span class="string">"*@"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    eleMail.fnListReplace = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arrValue = <span class="keyword">this</span>.value.trim().split(<span class="string">"@"</span>);</span><br><span class="line">        <span class="comment">// 修复FireFox浏览器下无限input问题</span></span><br><span class="line">        <span class="comment">// 如果值不完全匹配某option值，执行动态替换</span></span><br><span class="line">        <span class="keyword">if</span> (arrValue.length !== <span class="number">2</span> || arrEmailList.indexOf(arrValue[<span class="number">1</span>]) === <span class="number">-1</span>) &#123;</span><br><span class="line">            eleList.innerHTML = htmlListInit.replace(<span class="regexp">/\*/g</span>, arrValue[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 绑定输入事件侦听</span></span><br><span class="line">    eleMail.addEventListener(<span class="string">"input"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fnListReplace.call(<span class="keyword">this</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//  载入即匹配</span></span><br><span class="line">    eleMail.fnListReplace.call(eleMail).focus();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    eleList = <span class="built_in">document</span>.createElement(<span class="string">"datalist"</span>);</span><br><span class="line">    eleList.innerHTML = <span class="string">'&lt;p class=sorry&gt;抱歉，当前浏览器不支持HTML5 datalist.&lt;/p&gt;'</span>;</span><br><span class="line">    eleMail.parentNode.appendChild(eleList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="jquery-editable-select控件"><a href="#jquery-editable-select控件" class="headerlink" title="jquery.editable-select控件"></a>jquery.editable-select控件</h4><p>引入<br>jquery.editable-select.css<br>jquery.editable-select.js<br>调用方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#editable-select'</span>).editableSelect(&#123;</span><br><span class="line">    bg_iframe: <span class="literal">true</span>, <span class="comment">//是否加iframe</span></span><br><span class="line">    case_sensitive: <span class="literal">false</span>,</span><br><span class="line">    items_then_scroll: <span class="number">10</span> ,<span class="comment">//设置下拉选项的数目</span></span><br><span class="line">    isFilter:<span class="literal">false</span>/<span class="literal">true</span>,    <span class="comment">//是否根据条件过滤下拉选项</span></span><br><span class="line">    onCreate:,            <span class="comment">//当输入时触发</span></span><br><span class="line">    onShow：,             <span class="comment">//当下拉时触发</span></span><br><span class="line">    onHide：,              <span class="comment">//当下拉框隐藏时触发</span></span><br><span class="line">    onSelect：,            <span class="comment">//当下拉框中的选项被选中时触发</span></span><br><span class="line">    effects:<span class="keyword">default</span>/slide/fade， <span class="comment">//动画效果</span></span><br><span class="line">    duration：                   <span class="comment">//动画效果的时间</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;summary-2018-9&quot;&gt;&lt;a href=&quot;#summary-2018-9&quot; class=&quot;headerlink&quot; title=&quot;summary-2018-9&quot;&gt;&lt;/a&gt;summary-2018-9&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;这是在学会搭建博客之后的第一篇博客
      
    
    </summary>
    
    
      <category term="summary" scheme="http://yoursite.com/tags/summary/"/>
    
  </entry>
  
</feed>
