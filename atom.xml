<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>biubiu的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-27T07:35:44.478Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>biubiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>demo_vue-book</title>
    <link href="http://yoursite.com/2018/10/27/vue-book/"/>
    <id>http://yoursite.com/2018/10/27/vue-book/</id>
    <published>2018-10-27T07:33:54.000Z</published>
    <updated>2018-10-27T07:35:44.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-book"><a href="#vue-book" class="headerlink" title="vue-book"></a>vue-book</h1><hr><p>接下来会学习vuex，在学习一门预处理语言，之后用我学过的所有东西做一个练习的项目<br>vue学习之后，用vue-cli做的一个练习。<br>这是学习vue的过程中走通了一遍流程，但还有很多功能没有实现</p><ul><li>上拉下拉刷新</li><li>图片的懒加载</li><li>打包之后如何上线</li><li>vuex的学习</li><li>如何连接数据库等</li></ul><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul><li>npm install vue</li><li>npm install -g webpack</li><li>npm install -g vue-cli</li><li>npm install less less-loader axios vuex bootstrap</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>build 打包后的脚本文件</li><li>src 源码文件</li><li>mock后台代码，模拟数据</li><li>src/api 代表的是所有的接口,获取数据给前端调用</li><li>src/base 基础组件</li><li>src/components 页面组件<br><img src="/img/vue-book/lujing.jpg" width="90%"><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3>根据页面划分了5个页面组件</li><li>首页 Home.vue</li><li>列表 List.vue</li><li>收藏 Collect.vue</li><li>添加 Add.vue</li><li>详情 Detail.vue</li></ul><p>配置路由，配置路由映射表并new个实例,挂载在根组件上，router-view显示在App.vue<br>router/index.js</p><p><font color="red">Vue.use()是用来安装Vue插件</font><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">Vue.use(Router);</span><br></pre></td></tr></table></figure></p><blockquote><p>这里用了模板，将会另外写一篇，关于前端的模板与node的</p></blockquote><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><p>base/Tab.vue<br>scoped 表示是当前组件的样式，并不是全局的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>less预处理语言，学习之后会写一篇博客</p></blockquote><p>点击导航之后会通过to跳转页面，并且样式改变<br>这里需要注意<br>/home 确切激活，仅仅这个路径有效。router-link-exact-active<br>/home /home/a 都可以。router-link-active<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/add&quot;&gt;</span><br><span class="line">&lt;i class=&quot;iconfont icon-add&quot;&gt;&lt;/i&gt;&lt;span&gt;添加&lt;/span&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></p><p>基础组件Tab挂载在App.vue上（导航很多页面都需要），并在App.vue上写全局的样式，清除默认样式。<br>新学习到的清除输入框和按钮的默认样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input，button&#123;appearance:none;&#125;</span><br></pre></td></tr></table></figure></p><p>App.vue的组件中有<code>name: &#39;App&#39;</code>，这里<code>name: &#39;app&#39;</code> 相当于一个全局 ID。可以不写，写了可以提供更好的调试信息。<br>页面渲染也是在App.vue中实现的</p><h4 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h4><p><a href="http://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2" target="_blank" rel="noopener">http://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2</a><br>图标打包好了之后在index.html中引入\<br>iconfont是必须类名表明是个icon，后面根据页面选择<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;iconfont icon-shouye&quot;&gt;&lt;/i&gt;&lt;span&gt;首页&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><p>base/Mheader.vue<br>头部的标题不是全部一样的，并且比如首页是没有返回键的，所以这里用到的插槽和父组件给子组件传值<br>这里用Home.vue-Mheader.vue为例</p><ol><li>在父组件上挂载Mheader.vue</li><li>&lt;Mheader.vue&gt;首页，首页需要显示出来，需要在子组件Mheader.vue中放个匿名插槽接收</li><li><p>父组件需要传递一个值告诉子组件是否显示返回键。子组件接收back，不需要验证的时候用数组，需要验证的时候用对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;i class=&quot;iconfont icon-fanhui&quot; v-if=&quot;back&quot;&gt;&lt;/i&gt;</span><br><span class="line">...</span><br><span class="line">props:&#123;</span><br><span class="line"> back:&#123;type:Boolean,default:false&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>点击返回键，返回上一个操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$router.go(-1);</span><br></pre></td></tr></table></figure></li></ol><ul><li>扩展一下,back也可以返回。this.$router.back()</li><li>强制跳转页面，在后面追加，点返回还可以回去。this.$router.push(‘/XXX’)</li><li>路由替换，将原来的替换。this.$router.replace(‘/XXX’)<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3>base/Swiper.vue<br>安装依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-awesome-swiper --save-dev</span><br></pre></td></tr></table></figure></li></ul><p>在main.js中引入vue-awesome-swiper插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import VueAwesomeSwiper from &apos;vue-awesome-swiper&apos;</span><br><span class="line">import &apos;swiper/dist/css/swiper.css&apos;</span><br><span class="line">Vue.use(VueAwesomeSwiper)</span><br></pre></td></tr></table></figure></p><h3 id="后台获取图片信息"><a href="#后台获取图片信息" class="headerlink" title="后台获取图片信息"></a>后台获取图片信息</h3><p>mock/sliders.js 存放图片连接<br>mock/server.js 配置服务器<br>url.parse()可以将一个完整的URL地址，分为很多部分，常用的有：host、port、pathname、path、query。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let sliders = require(&apos;./sliders&apos;)</span><br><span class="line">http.createServer((req,res)=&gt;&#123;</span><br><span class="line">let&#123;pathname,query&#125; = url.parse(req.url);</span><br><span class="line">  if (pathname === &apos;/sliders&apos;)&#123;</span><br><span class="line">     res.setHeader(&apos;Content-Type&apos;,&apos;application/json;charset=utf-8&apos;)</span><br><span class="line">     res.end(JSON.stringify(sliders))</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是当前段发起ajax请求的时候，是8080端口请求3000端口的数据，所以有跨域的问题，这里需要在服务器中加入跨域头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">res.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type,Content-Length, Authorization, Accept,X-Requested-With&quot;);</span><br><span class="line">res.setHeader(&quot;Access-Control-Allow-Methods&quot;,&quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">res.setHeader(&quot;X-Powered-By&quot;,&apos; 3.2.1&apos;)</span><br><span class="line">if(req.method==&quot;OPTIONS&quot;) return res.end();/*让options请求快速返回*/</span><br></pre></td></tr></table></figure></p><h3 id="轮播图的api"><a href="#轮播图的api" class="headerlink" title="轮播图的api"></a>轮播图的api</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="comment">//设置基本的默认请求路径</span></span><br><span class="line">axios.defaults.baseURL =<span class="string">'http://localhost:3000'</span>;</span><br><span class="line"><span class="comment">//获取轮播图数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> getSliders=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"> <span class="comment">//因为设置了了efaults.baseURL，所以它请求的路径其实是http://localhost:3000/sliders,返回的是一个promise对象</span></span><br><span class="line"> <span class="keyword">return</span> axios.get(<span class="string">'/sliders'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>axios 笔记待整理</p></blockquote><h3 id="前端获取数据"><a href="#前端获取数据" class="headerlink" title="前端获取数据"></a>前端获取数据</h3><p>获取的数据父子组件传值，传给子组件，子组件渲染出图片<br>如果给接收到的data一个新的名字 slider {data：slider}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">async created()&#123;</span><br><span class="line"> let &#123;data&#125; = await getSliders().then()</span><br><span class="line"> this.sliders=data</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><blockquote><p>async/await 已整理</p></blockquote><h3 id="热门图书-删除图书"><a href="#热门图书-删除图书" class="headerlink" title="热门图书/删除图书"></a>热门图书/删除图书</h3><ul><li>先写服务端，确保数据能正常返回</li><li>增加api方法，实现调取数据的功能</li><li>在哪个组件中应用这个api，如果是一个基础组件需要这些数据，在使用这个组件的父级中调用这个方法，将数据传递给基础组件</li></ul><h3 id="详情页面"><a href="#详情页面" class="headerlink" title="详情页面"></a>详情页面</h3><p>如果用对象作为to的属性，并且使用了参数，必须给路由起个名字，通过名字跳转<br>router/index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;path:&apos;/detail/:bid&apos;,component:Detail,name:&apos;detail&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>component/List.vue<br>需要配置路径参数，点击哪个li跳转哪个详情<br>这是跳转用到router-link，把之前的li改为router-link，</p><ul><li>params是路径参数</li><li>循环组件，需要加上key</li><li>router-link是a标签，这里需要的是li，在taf里面修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link v-for=&quot;(book,index) in books&quot; :to=&quot;&#123;name:&apos;detail&apos;,params:&#123;bid:book.bookId&#125;&#125;&quot; :key=&quot;index&quot; tag=&quot;li&quot; &gt;</span><br></pre></td></tr></table></figure></li></ul><p>因为点击li跳转，删除按钮也在li里面，所以这个应该阻止删除按钮<br>冒泡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click.stop=&quot;remove(book.bookId)&quot;&gt;删除&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>component/Detail.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取通过传过来的参数</span><br><span class="line">$route.params.XXX</span><br></pre></td></tr></table></figure></p><p>获取当前id的图书信息渲染到界面。</p><ul><li>问题一:</li></ul><p>当修改的时候，价格原本是数字，修改之后会变成字符串,加上数字的修饰符<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model.number=&quot;book.bookPrice&quot; id=&quot;bookPrice&quot;&gt;</span><br></pre></td></tr></table></figure></p><ul><li><p>问题二<br>修改url的时候，页面没有刷新，因为模板已经渲染出来了，不会在走created办法。所以，需要监控url的变化，路径参数发生变化，通过监控参数的变化来发送ajax</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">//路径参数发生变化，通过监控参数的变化来发送ajax</span><br><span class="line">$route()&#123;</span><br><span class="line">     this.getData() ;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>问题三<br>如果没有找到对应id的书，那返回的是空对象，如果是空，需要跳转回列表页<br>Object.keys()，该方法返回一个数组,里面是对象的所有属性。如果是空对象那么返回一个空数组。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.keys(this.book).length&gt;0?void 0:this.$ruoter.push(&apos;/List&apos;)</span><br></pre></td></tr></table></figure><p>  处理一下url,server.js查询book的条件变一下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!isNaN(id))</span><br></pre></td></tr></table></figure></li></ul><p>数据改变之后，需要用put更新数据<br>PUT：<br>参数1：url:/book?id=3<br>参数2：请求体发送<br>server.js获取put/post请求体中的数据<br>使用这两个事件就可以获取来自服务器端的响应内容。</p><ul><li>data，数据传递时触发，</li><li>end，没有更多数据提供时触发<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;&quot;;</span><br><span class="line">   res.on(&apos;data&apos;,(chunk)=&gt;&#123;</span><br><span class="line">       str += chunk;</span><br><span class="line">   &#125;);</span><br><span class="line">   res.on(&apos;end&apos;,()=&gt;&#123;</span><br><span class="line">       console.log(str);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h3><p>同详情页面</p><h2 id="优化与其他功能"><a href="#优化与其他功能" class="headerlink" title="优化与其他功能"></a>优化与其他功能</h2><h3 id="loading"><a href="#loading" class="headerlink" title="loading"></a>loading</h3><p>轮播图和热门图书是分开获取的，这里改成一起获取<br>api/index<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return axios.all([getSliders(),getHotBook()])</span><br></pre></td></tr></table></figure></p><p>数据返回的是一个数组，里面是两个promise对象。</p><p>新建base/Loading.vue,挂载在Home.vue<br><a href="https://www.cnblogs.com/lhb25/p/loading-spinners-animated-with-css3.html" target="_blank" rel="noopener">https://www.cnblogs.com/lhb25/p/loading-spinners-animated-with-css3.html</a></p><h3 id="实现页面缓存"><a href="#实现页面缓存" class="headerlink" title="实现页面缓存"></a>实现页面缓存</h3><p>分页面缓存，路由元信息。<br>在配置路由映射的时候有meta(备注)属性,这条对象可以通过<code>this.$route</code>获取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;path:&apos;/home&apos;,component:Home,meta:&#123;keepAlive:true&#125;&#125;,</span><br></pre></td></tr></table></figure></p><p>修改APP.vue,写两个router-view，一个用于，显示缓存的，一个用于显示一般的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">     &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;Tab&gt;&lt;/Tab&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><h3 id="实现路由动画"><a href="#实现路由动画" class="headerlink" title="实现路由动画"></a>实现路由动画</h3><p>给router-view外面包裹一个<transition name="fadeIn"></transition>标签,注意点：一个只能包裹一个标签<br>写css样式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.fadeIn-enter&#123;</span><br><span class="line">  opacity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.fadeIn-enter-active&#123;</span><br><span class="line">  transition:all <span class="number">0.3</span>s;</span><br><span class="line">&#125;</span><br><span class="line">.fadeIn-leave-active&#123;</span><br><span class="line">  transition: all <span class="number">0.3</span>s;</span><br><span class="line">  opacity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="下拉加载更多"><a href="#下拉加载更多" class="headerlink" title="下拉加载更多"></a>下拉加载更多</h3><h3 id="打包上线"><a href="#打包上线" class="headerlink" title="打包上线"></a>打包上线</h3><h3 id="history路由"><a href="#history路由" class="headerlink" title="history路由"></a>history路由</h3><p>在路由中改变mode:history</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-book&quot;&gt;&lt;a href=&quot;#vue-book&quot; class=&quot;headerlink&quot; title=&quot;vue-book&quot;&gt;&lt;/a&gt;vue-book&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;接下来会学习vuex，在学习一门预处理语言，之后用我学过的所有东西做一个练习的项目
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 简括</title>
    <link href="http://yoursite.com/2018/10/24/http%E7%AE%80%E6%8B%AC/"/>
    <id>http://yoursite.com/2018/10/24/http简括/</id>
    <published>2018-10-24T13:11:13.000Z</published>
    <updated>2018-10-24T13:12:07.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><p>一次完整的HTTP请求需要7个步骤</p><ol><li>建立TCP连接</li><li>Web浏览器向Web服务器发送请求命令<ul><li>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。</li></ul></li><li>Web浏览器发送请求头信息<ul><li>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。</li></ul></li><li>Web服务器应答<ul><li>客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码</li></ul></li><li>Web服务器发送应答头信息<ul><li>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</li></ul></li><li>Web服务器向浏览器发送数据<ul><li>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。</li></ul></li><li>Web服务器关闭TCP连接<br>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：Connection:keep-alive，TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。</li></ol><p>http协议的特点<br>①通信流程：断开式（无状态）</p><ul><li>断开式：http协议每次响应完成后，会断开与客户端的连接</li><li>无状态：由于服务器断开了之前的连接，就无法知晓连接间的关系。</li></ul><p>②内容格式：消息头和消息体</p><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><ul><li>OPTIONS<br>返回服务器针对特定资源所支持的HTML请求方法   或web服务器发送*测试服务器功能。询问支持的方法。</li><li>HEAD<ul><li>类似get，但只返回响应头。</li><li>常用于查看某个页面的状态</li></ul></li><li>GET<ul><li>获取资源</li><li>GET方法要求服务器将URL定位的资源放在响应报文的数据部分，回送给客户端。</li><li>使用GET方法时，请求参数和对应的值附加在URL后面，利用一个问号（“?”）代表URL的结尾与请求参数的开始</li></ul></li><li>POST<ul><li>向指定资源提交数据进行处理请求（提交表单、上传文件）</li><li>将请求参数封装在HTTP请求数据中，以名称/值的形式出现</li></ul></li><li>PUT<br>向指定资源位置上上传其最新内容</li><li>DELETE<br>请求服务器删除</li><li>TRACE<br>  回显服务器收到的请求，用于测试和诊断</li><li>CONNECT<br>HTTP/1.1协议中能够将连接改为管道方式的代理服务器</li></ul><h3 id="get-和-post区别"><a href="#get-和-post区别" class="headerlink" title="get 和 post区别"></a>get 和 post区别</h3><p>get请求无消息体，只能携带少量数据<br>post请求有消息体，可以携带大量数据<br>get请求将数据放在url地址中<br>post请求将数据放在消息体中</p><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><ul><li>1xx：相关信息</li><li>2xx：操作成功</li><li>3xx：重定向</li><li>4xx：客户端错误</li><li>5xx：服务器错误<br>GET<br>安全且幂等<br>获取表示<br>变更时获取表示（缓存）</li><li>200（OK） - 表示已在响应中发出</li><li>204（无内容） - 资源有空表示</li><li>301（Moved Permanently） - 资源的URI已被更新</li><li>303（See Other） - 其他（如，负载均衡）</li><li>304（not modified）- 资源未更改（缓存）</li><li>400 （bad request）- 指代坏请求（如，参数错误）</li><li>404 （not found）- 资源不存在</li><li>406 （not acceptable）- 服务端不支持所需表示</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务端当前无法处理请求<br>POST<br>创建子资源<br>部分更新资源</li><li>如果没有被修改，则不过更新资源（乐观锁）</li><li>200（OK）- 如果现有资源已被更改</li><li>201（created）- 如果新资源被创建</li><li>202（accepted）- 已接受处理请求但尚未完成（异步处理）</li><li>301（Moved Permanently）- 资源的URI被更新</li><li>303（See Other）- 其他（如，负载均衡）</li><li>400（bad request）- 指代坏请求</li><li>404 （not found）- 资源不存在</li><li>406 （not acceptable）- 服务端不支持所需表示</li><li>409 （conflict）- 通用冲突</li><li>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</li><li>415 （unsupported media type）- 接受到的表示不受支持</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务当前无法处理请求</li></ul><p>PUT<br>通过替换的方式更新资源</p><ul><li>200 （OK）- 如果已存在资源被更改</li><li>201 （created）- 如果新资源被创建</li><li>301（Moved Permanently）- 资源的URI已更改</li><li>303 （See Other）- 其他（如，负载均衡）</li><li>400 （bad request）- 指代坏请求</li><li>404 （not found）- 资源不存在</li><li>406 （not acceptable）- 服务端不支持所需表示</li><li>409 （conflict）- 通用冲突</li><li>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</li><li>415 （unsupported media type）- 接受到的表示不受支持</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务当前无法处理请求</li></ul><p>DELETE<br>不安全但幂等<br>删除资源</p><ul><li>200 （OK）- 资源已被删除</li><li>301 （Moved Permanently）- 资源的URI已更改</li><li>303 （See Other）- 其他，如负载均衡</li><li>400 （bad request）- 指代坏请求</li><li>404 （not found）- 资源不存在</li><li>409 （conflict）- 通用冲突</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务端当前无法处理请求</li></ul><hr><h2 id="http的请求部分"><a href="#http的请求部分" class="headerlink" title="http的请求部分"></a>http的请求部分</h2><ul><li>请求方法（GET/POST）、URI、协议/版本</li><li>请求头(Request Header)</li><li>空行</li><li>请求正文</li></ul><p><a href="https://blog.csdn.net/chen1403876161/article/details/51546653" target="_blank" rel="noopener">https://blog.csdn.net/chen1403876161/article/details/51546653</a><br>| 请求头 | 说明 | 实列|<br>| —— | —— |——|<br>| Accept |这个头信息指定浏览器或其他客户端可以处理的 MIME 类型|Accept:application/json, text/plain, <em>/</em>|<br>|Accept-Encoding|浏览器能够进行解码的数据编码方式|Accept-Encoding:gzip, deflate, br|<br>|Accept-Language|    这个头信息指定客户端的首选语言，在这种情况下，Servlet 会产生多种语言的结果|Accept-Language:zh-CN,zh;q=0.8|<br>|Accept-Charset|浏览器可接受的字符集||<br>|Connection|这个头信息指示客户端是否可以处理持久 HTTP 连接。持久连接允许客户端或其他浏览器通过单个请求来检索多个文件|Connection:keep-alive|<br>|Host|指定请求资源的Intenet主机和端口号（服务器，向谁请求）|Host:localhost:3000|<br>|Referer|这个头信息指示所指向的 Web 页的 URL。例如，如果您在网页 1，点击一个链接到网页 2，当浏览器请求网页 2 时，网页 1 的 URL 就会包含在 Referer 头信息中。|<br>|User-Agent|这个头信息识别发出请求的浏览器或其他客户端，并可以向不同类型的浏览器返回不同的内容。|<br>|Content-Length|这个头信息只适用于 POST 请求，并给出 POST 数据的大小（以字节为单位）。|Content-Length:60|<br>|Content-Type|用于post请求|Content-Type：application/json;charset=UTF-8|<br>|Authorization|授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中||</p><h2 id="HTTP-content-type"><a href="#HTTP-content-type" class="headerlink" title="HTTP content-type"></a>HTTP content-type</h2><ul><li>application/x-www-form-urlencoded<br>  这应该是最常见的 POST 提交数据的方式了。<form enctype="””">中默认的encType，form表单数据被编码为         key/value格式发送到服务器（表单默认的提交数据的格式）</form></li><li>multipart/form-data<br> 需要在表单中进行文件上传时，就需要使用该格式</li><li>application/json<br>JSON数据格式</li></ul><h2 id="HTTP响应头信息"><a href="#HTTP响应头信息" class="headerlink" title="HTTP响应头信息"></a>HTTP响应头信息</h2><ol><li>状态行</li><li>响应头(Response Header)</li><li>空行</li><li>响应正文</li></ol><p>其他一般的在上面的连接中可以看到，这里整理了平时遇到的跨域问题</p><h3 id="跨域的响应头"><a href="#跨域的响应头" class="headerlink" title="跨域的响应头"></a>跨域的响应头</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line"> res.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Content-Length, Authorization, Accept,X-Requested-With"</span>);</span><br><span class="line"> res.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line"> res.setHeader(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>)</span><br><span class="line"> res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line"> <span class="keyword">if</span>(req.method==<span class="string">"OPTIONS"</span>)  <span class="keyword">return</span> res.end();<span class="comment">/*让options请求快速返回*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a&gt;http&lt;/h1&gt;&lt;p&gt;一次完整的HTTP请求需要7个步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立TCP连接&lt;/li&gt;
&lt;li&gt;Web浏览器向Web服务器发
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>promise/axios/async/await</title>
    <link href="http://yoursite.com/2018/10/22/promise-axios/"/>
    <id>http://yoursite.com/2018/10/22/promise-axios/</id>
    <published>2018-10-22T09:36:10.000Z</published>
    <updated>2018-10-22T09:45:11.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios-promise-async-await"><a href="#axios-promise-async-await" class="headerlink" title="axios/promise/async/await"></a>axios/promise/async/await</h1><p>这里整理axios时，把牵扯到的基础promise学习了，更深一步的以后再深入。axios跨域的问题等之后再整理，这篇仅仅是一些简单的基础</p><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>用法：可以将异步操作以同步操作的流程表达处理，避免层层嵌套回调函数<br>promise对象有三种状态，对象的状态不受外界影响</p><ul><li>pending 进行中</li><li>fulfilled 已成功</li><li>rejected 已失败</li></ul><p>并且一旦状态改变，就不会再变，任何时候都可以得到这个结果,这时称为resolved(已定型)。状态改变只有两种可能</p><ul><li>pending到fulfilled</li><li>pending到rejected</li></ul><p>Promise实例生成以后，then方法有2个参数，第一个函数接收resolved状态的执行，第二个参数接收reject状态的执行。且then的执行结果也会返回一个Promise对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success,resolved时调用</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure rejected时调用</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><hr><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>基于promise用于浏览器和node.js的http客户端</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>支持浏览器和node.js</li><li>支持promise</li><li>能拦截请求和响应</li><li>能转换请求和响应数据</li><li>能取消请求</li><li>自动转换JSON数据</li><li>浏览器端支持防止CSRF(跨站请求伪造)</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;;</span><br></pre></td></tr></table></figure><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><p>get请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.get(url)</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>.then访问成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//打印的是object对象</span><br><span class="line">//data，status，statusText，headers，comfig</span><br><span class="line">XXXX.then(res=&gt;&#123;console.log(res)&#125;)</span><br><span class="line">//打印的是promise对象</span><br><span class="line">XXXX.then()</span><br></pre></td></tr></table></figure></p><p>.catch捕获错误</p><h4 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(url,&#123;params:&#123;&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><p>配置全局默认路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL =&apos;http://localhost:3000&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>在请求或者返回被then或者catch处理之前对它们进行拦截<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 添加请求拦截器</span><br><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">    // 在发送请求之前做些什么</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对请求错误做些什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line">// 添加响应拦截器</span><br><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">    // 对响应数据做点什么</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对响应错误做点什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><hr><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><p>ES7 提出的async 函数，终于让 JavaScript 对于异步操作有了终极解决方案。<br>async作为一个关键字放到函数前面，表示函数是一个异步函数，异步函数也就意味着该函数的执行不会阻塞后面代码的执行。</p><ul><li>内置执行器。Generator 函数的执行必须依靠执行器，而 Aysnc 函数自带执行器，调用方式跟普通函数的调用一样</li><li>返回值是 Promise。async 函数返回值是 Promise 对象，比 Generator 函数返回的 Iterator 对象方便，可以直接使用 then() 方法进行调用</li><li>写异步代码就像写同步代码一样了，不用不断的回调了。</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="async-函数返回一个-Promise-对象"><a href="#async-函数返回一个-Promise-对象" class="headerlink" title="async 函数返回一个 Promise 对象"></a>async 函数返回一个 Promise 对象</h3><p>async 函数内部 return 返回的值是个Promise 对象。当调用该函数时，内部会调用Promise.solve() 方法把它转化成一个promise 对象作为返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">async function timeout() &#123;</span><br><span class="line">    return &apos;hello world&apos;</span><br><span class="line">&#125;</span><br><span class="line">console.log(timeout());</span><br><span class="line">console.log(&apos;虽然在后面，但是我先执行&apos;);</span><br><span class="line">//输出</span><br><span class="line">//Promise&#123;&#125;</span><br><span class="line">//虽然在后面，但是我先执行</span><br></pre></td></tr></table></figure></p><p>async 函数内部 return 返回的值。会成为 then 方法回调函数的参数。只有当 async 函数内部的异步操作都执行完，才会执行 then 方法的回调。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  async function timeout() &#123;</span><br><span class="line">    return &apos;hello world&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  timeout().then(result =&gt; &#123;</span><br><span class="line">    console.log(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(&apos;虽然在后面，但是我先执行&apos;);</span><br><span class="line">  //输出</span><br><span class="line">  //虽然在后面，但是我先执行</span><br><span class="line">  //hello world</span><br></pre></td></tr></table></figure></p><p>如果 async 函数内部抛出异常，则会导致返回的 Promise 对象状态变为 reject 状态。抛出的错误而会被 catch 方法回调函数接收到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">async function e()&#123;</span><br><span class="line">    throw new Error(&apos;error&apos;);</span><br><span class="line">&#125;</span><br><span class="line">e().then(v =&gt; console.log(v))</span><br><span class="line">.catch( e =&gt; console.log(e));</span><br></pre></td></tr></table></figure></p><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p> await 后面放置的就是返回promise对象的一个表达式。await 表示等一下，先执行await后面的代码，等后面的promise对象执行完毕，再继续像下执行。</p><hr><p> 正常情况下，await 命令后面跟着的是 Promise，如果不是的话，也会被转换成一个 立即 resolve 的 Promise<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> async function  f() &#123;</span><br><span class="line">    return await 1</span><br><span class="line">&#125;;</span><br><span class="line">f().then( (v) =&gt; console.log(v)) // 1</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;axios-promise-async-await&quot;&gt;&lt;a href=&quot;#axios-promise-async-await&quot; class=&quot;headerlink&quot; title=&quot;axios/promise/async/await&quot;&gt;&lt;/a&gt;axios/promi
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>demo_todoList</title>
    <link href="http://yoursite.com/2018/10/13/todolist/"/>
    <id>http://yoursite.com/2018/10/13/todolist/</id>
    <published>2018-10-13T14:51:07.000Z</published>
    <updated>2018-10-13T15:02:56.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="demo-todoList"><a href="#demo-todoList" class="headerlink" title="demo_todoList"></a>demo_todoList</h1><hr><p><img src="/img/vue/todoList.png" width="85%"></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>将数据循坏到页面</li><li>敲回车时添加新数据（需要添加isSelected属性）</li><li>删除功能</li><li>计算当前没有被选中的，选中的有删除样式</li><li>双击任务可以修改任务,已经完成的不可以</li><li>自定义输入框聚焦</li><li>回车或者失去焦点的时候修改成功</li><li>计算属性 根据hash展示todolist</li><li>数据永久化，hash单页刷新</li></ul><hr><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><ul><li>监控todos的变化,当变化时更新数据</li><li>watch:todos(){} 只能监控一层的数据变化（删减）</li><li>watch:todos:handler(){},deep:true 深度监控<h3 id="directivess"><a href="#directivess" class="headerlink" title="directivess"></a>directivess</h3></li><li>自定义指令，指令是操作的dom</li><li>XXX(el,bindings){} 名字需要和v-XXX的相同，el指代的是当前的dom，bindings参数</li></ul><hr><p>github: <a href="https://github.com/biubiuins/demo_todolist" target="_blank" rel="noopener">https://github.com/biubiuins/demo_todolist</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;demo-todoList&quot;&gt;&lt;a href=&quot;#demo-todoList&quot; class=&quot;headerlink&quot; title=&quot;demo_todoList&quot;&gt;&lt;/a&gt;demo_todoList&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/img/vue/to
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://yoursite.com/2018/10/12/git/"/>
    <id>http://yoursite.com/2018/10/12/git/</id>
    <published>2018-10-12T06:13:03.000Z</published>
    <updated>2018-10-15T05:27:14.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git的基本操作"><a href="#git的基本操作" class="headerlink" title="git的基本操作"></a>git的基本操作</h1><hr><h2 id="初次配置"><a href="#初次配置" class="headerlink" title="初次配置"></a>初次配置</h2><p>第一步需要配置用户名和邮箱地址，因为git为每一次提交记录名字和邮箱地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &apos;runoob&apos;</span><br><span class="line">$ git config --global user.email test@runoob.com</span><br></pre></td></tr></table></figure></p><h3 id="ssh-key"><a href="#ssh-key" class="headerlink" title="ssh key"></a>ssh key</h3><ol><li><p>生成一对shh key（id_rsa私钥，id_rsa.pub公钥）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p> 注：在主目录下生成的密钥在 /c/Users/用户名/.ssh/id_rsa 里</p></li><li><p>查看公钥内容（需在.ssh目录下执行）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>复制密钥内容添加到 github 上</p></li><li><p>使用ssh协议上传文件到仓库</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot; &quot;</span><br><span class="line">git remote add origin git@github.com:...</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p> 注：若在创建新仓库时有readme.md 文件会上传失败</p></li></ol><h2 id="新建版本库"><a href="#新建版本库" class="headerlink" title="新建版本库"></a>新建版本库</h2><ol><li>git里面先进入新建库的文件夹下</li><li><p>初始化库<br>初始化目录，目录下回出现一个.git的目录，该目录包含了资源的所有元数据</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git init 目录名</span><br></pre></td></tr></table></figure></li><li><p>添加文件到暂存区<br>将当前目录下几个文件纳入版本控制，需要先用git add 命令告诉git开始对这些文件进行跟踪</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .//添加当前项目的所有文件</span><br><span class="line">git add README //添加名为README的文件</span><br><span class="line">git add -A 所有修改的内容添加到缓存区</span><br></pre></td></tr></table></figure></li><li><p>增加到版本库中<br>使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit -m将缓存区内容添加到仓库中。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -a 跳过这一步</span><br><span class="line">git commit -m&quot;版本留言描述&quot;</span><br></pre></td></tr></table></figure></li><li><p>连接远程仓库（现在GitHub上面新建仓库）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 仓库地址</span><br></pre></td></tr></table></figure></li><li><p>讲本地仓库推送到远程库上</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br><span class="line">git push -u origin master //首次执行，说明上传到仓库的master分支上</span><br></pre></td></tr></table></figure></li></ol><hr><p>问题：![rejected] master -&gt; master (fetch first)<br>解决办法：1. 先执行<code>git pull</code>.<br>然后再执行git push –force origin master替换原先的 git push -u origin master</p><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>先把别人的fork进自己的库里面</p><ol><li><p>克隆仓库到指定目录</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//自己在本地进入需要克隆进的文件夹下执行下面第一条指令</span><br><span class="line">git clone 仓库地址</span><br><span class="line">git clone 仓库地址 本地目录</span><br></pre></td></tr></table></figure></li><li><p>add commit push</p></li></ol><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ol><li><p>本地删除文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//或者直接在文件管理器中把没用的文件删了</span><br><span class="line">//需要git进入文件夹下</span><br><span class="line">$ rm test.txt</span><br></pre></td></tr></table></figure><p> Git知道你删除了文件，这个时候只是本地删除了文件，而版本库里面还有文件，所以可以恢复文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure></li><li><p>远程库删除文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm test.txt</span><br></pre></td></tr></table></figure><p> 记得还需要commit</p><hr><p> 我的石墨文档：<a href="https://shimo.im/docs/2Eg0gszciPEQBPxG/" target="_blank" rel="noopener">https://shimo.im/docs/2Eg0gszciPEQBPxG/</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git的基本操作&quot;&gt;&lt;a href=&quot;#git的基本操作&quot; class=&quot;headerlink&quot; title=&quot;git的基本操作&quot;&gt;&lt;/a&gt;git的基本操作&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;初次配置&quot;&gt;&lt;a href=&quot;#初次配置&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>express学习笔记</title>
    <link href="http://yoursite.com/2018/10/12/express%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/12/express学习笔记/</id>
    <published>2018-10-12T06:09:06.000Z</published>
    <updated>2018-10-12T06:36:03.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="express-学习笔记"><a href="#express-学习笔记" class="headerlink" title="express 学习笔记"></a>express 学习笔记</h1><hr><h2 id="搭建简单服务器"><a href="#搭建简单服务器" class="headerlink" title="搭建简单服务器"></a>搭建简单服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//express() 是一个由 express 模块导出的入口（top-level）函数</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">//创建一个express应用实例名app</span></span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="comment">// 设置端口号：3000</span></span><br><span class="line"><span class="comment">//process.env.PORT：读取当前目录下环境变量port的值</span></span><br><span class="line"><span class="keyword">let</span> port = process.env.PORT || <span class="number">3000</span> ;</span><br><span class="line"><span class="comment">//在端口号上开启服务</span></span><br><span class="line">app.listen(port,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="app-listen-port-hostname-backlog-callback"><a href="#app-listen-port-hostname-backlog-callback" class="headerlink" title="app.listen(port, [hostname], [backlog], [callback])"></a>app.listen(port, [hostname], [backlog], [callback])</h3><p>类似于node中的http.Server.listen()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置端口号：3000</span></span><br><span class="line"><span class="comment">//process.env.PORT：读取当前目录下环境变量port的值</span></span><br><span class="line"><span class="keyword">let</span> port = process.env.PORT || <span class="number">3000</span> ;</span><br><span class="line"><span class="comment">//在端口号上开启服务</span></span><br><span class="line">app.listen(port,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>服务器启动时候，<br>默认端口3000：node app.js<br>设置端口8080：PORT=8080 node app.js</p><h3 id="app-set-name-value"><a href="#app-set-name-value" class="headerlink" title="app.set(name,value)"></a>app.set(name,value)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 views 文件夹为存放视图文件的目录, 即存放模板文件的地方,__dirname 为全局变量,存储当前正在执行的脚本所在的目录。</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">"views"</span>,<span class="string">"./views"</span>);</span><br><span class="line"><span class="comment">//设置使用的模板引擎</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs’)</span></span><br><span class="line"><span class="string">app.set("view engine","jade")</span></span><br><span class="line"><span class="string">npm install --save express-art-template</span></span><br><span class="line"><span class="string">//设置art模板引擎，后缀为art</span></span><br><span class="line"><span class="string">app.engine('</span>art<span class="string">', require('</span>express-art-template<span class="string">'));</span></span><br></pre></td></tr></table></figure><h3 id="app-get-name"><a href="#app-get-name" class="headerlink" title="app.get(name)"></a>app.get(name)</h3><p>返回name的value值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例一</span></span><br><span class="line">app.get(<span class="string">'title'</span>);</span><br><span class="line"><span class="comment">// =&gt; undefined</span></span><br><span class="line">app.set(<span class="string">'title'</span>, <span class="string">'My Site'</span>);</span><br><span class="line">app.get(<span class="string">'title'</span>);</span><br><span class="line"><span class="comment">// =&gt; "My Site"</span></span><br><span class="line"><span class="comment">//实例二</span></span><br><span class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="app-get-path-callback-callback-…"><a href="#app-get-path-callback-callback-…" class="headerlink" title="app.get(path, callback [, callback …])"></a>app.get(path, callback [, callback …])</h3><h3 id="app-all-path-callback-callback-…"><a href="#app-all-path-callback-callback-…" class="headerlink" title="app.all(path, callback [, callback …])"></a>app.all(path, callback [, callback …])</h3><p>这种方法就像标准的app.METHOD()方法, 除了它匹配所有HTTP动词。<br>访问path路径的所有方法执行的回调函数.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//* 表示匹配所有的路径</span></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.end(req.method + <span class="string">'user'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一般放在最后面防止前面的被覆盖</span></span><br></pre></td></tr></table></figure></p><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'hello world'</span>);</span><br><span class="line">  res.status(<span class="number">404</span>).send(错误请求)<span class="comment">//访问这个路径是设定状态码为404</span></span><br><span class="line">  <span class="comment">//通过res.send（）接口向客户端发送hello world，send只能响应一次，意思是只能出现一个send</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>res.send（）只能出现一次<br>如果要响应多次，用node原生的write和end，但是如果只有write会处于一个挂起状态<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.write(<span class="string">'hello world'</span>);</span><br><span class="line">  res.write(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>res.send有结束响应的作用</li><li>res.write没有结束响应的作用，需要res.end结束中间件挂起<h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3>下表中响应对象（res）的方法向客户端返回响应，终结请求响应的循环。如果在路由句柄中一个方法也不调用，来自客户端的请求会一直挂起。<br><img src="/img/express/response.jpg" width="80%"><h4 id="res-render"><a href="#res-render" class="headerlink" title="res.render()"></a>res.render()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 views 文件夹为存放视图文件的目录, 即存放模板文件的地方,__dirname 为全局变量,存储当前正在执行的脚本所在的目录。</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">"views"</span>,<span class="string">"./views"</span>);</span><br><span class="line"><span class="comment">//第一个是渲染的views文件夹下面的index，第二个是传递的数据,注意需要设置模板引擎</span></span><br><span class="line">res.render(<span class="string">"index"</span>,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="res-setHeader"><a href="#res-setHeader" class="headerlink" title="res.setHeader()"></a>res.setHeader()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//Content-Type的作用 该实体头的作用是让服务器告诉浏览器它发送的数据属于什么文件类型。</span><br><span class="line">res.setHeader(&quot;Content-Type&quot;,&apos;text/html;charset=utf-8&apos;)</span><br></pre></td></tr></table></figure><h4 id="res-redirect"><a href="#res-redirect" class="headerlink" title="res.redirect()"></a>res.redirect()</h4><p>调用redirect()方法后，其后的代码都不会被执行。<br>而使用redirect()设置的状态码不是301或302也不会发生跳转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.redirect([status,] path)</span><br><span class="line">//重定义到path所指定的URL，重定向时可以同时指定HTTP状态码，不指定状态码默认为302</span><br></pre></td></tr></table></figure></p><h4 id="res-location"><a href="#res-location" class="headerlink" title="res.location()"></a>res.location()</h4><p>location()方法本质上是调用了ServerResponse对象的setHeader()方法，但并没有设置状态码。<br>使用location()设置头信息，而不设置状态码或状态码不是301或302，并不会发生重定向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.location(path)</span><br></pre></td></tr></table></figure></p><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p><img src="/img/express/request.jpg" alt="response"></p><h4 id="req-query"><a href="#req-query" class="headerlink" title="req.query"></a>req.query</h4><p>处理 get 请求，获取 get 请求参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /search?q=tobi+ferret</span></span><br><span class="line">req.query.q</span><br><span class="line"><span class="comment">// =&gt; "tobi ferret"</span></span><br><span class="line"><span class="comment">// GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse</span></span><br><span class="line">req.query.order</span><br><span class="line"><span class="comment">// =&gt; "desc"</span></span><br><span class="line">req.query.shoe.color</span><br><span class="line"><span class="comment">// =&gt; "blue"</span></span><br><span class="line">req.query.shoe.type</span><br><span class="line"><span class="comment">// =&gt; "converse"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-body"><a href="#req-body" class="headerlink" title="req.body"></a>req.body</h4><p>处理 post 请求，获取 post 请求体<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// POST user[name]=tobi&amp;user[email]=tobi@learnboost.com</span></span><br><span class="line">req.body.user.name</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line">req.body.user.email</span><br><span class="line"><span class="comment">// =&gt; "tobi@learnboost.com"</span></span><br><span class="line"><span class="comment">// POST &#123; "name": "tobi" &#125;</span></span><br><span class="line">req.body.name</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-params"><a href="#req-params" class="headerlink" title="req.params"></a>req.params</h4><p>处理 /:xxx 形式的 get 或 post 请求，获取请求参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /user/tj</span></span><br><span class="line">req.params.name</span><br><span class="line"><span class="comment">// =&gt; "tj"</span></span><br><span class="line"><span class="comment">// GET /file/javascripts/jquery.js</span></span><br><span class="line">req.params[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// =&gt; "javascripts/jquery.js"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-param-name"><a href="#req-param-name" class="headerlink" title="req.param(name)"></a>req.param(name)</h4><p>处理 get 和 post 请求，但查找优先级由高到低为 req.params→req.body→req.query<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ?name=tobi</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line"><span class="comment">// POST name=tobi</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line"><span class="comment">// /user/tobi for /user/:name</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br></pre></td></tr></table></figure></p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>用于客户端与服务器路由匹配之前的中间操作，正常中间件放在路由上面，中间件通过next()往下走。</p><h4 id="app-use（-path-function）"><a href="#app-use（-path-function）" class="headerlink" title="app.use（[path],function）"></a>app.use（[path],function）</h4><p>利用express托管静态文件<br>node.js不能通过目录来引入文件，而express可以，public为静态目录<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置public文件夹为存放静态文件的目录。</span></span><br><span class="line"><span class="keyword">let</span> path=<span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="comment">//ex4里面唯一的内置中间件</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br></pre></td></tr></table></figure></p><p>一个中间件处理器，请求来了，让那些中间件先处理一遍</p><ul><li>没有挂载路径的中间件，应用的每个请求都会执行该中间件</li><li>挂载至 /path 的中间件，任何指向 /path 的请求都会执行它<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(&quot;/name&quot;,function(req,res,next)&#123;</span><br><span class="line">res.setHeader(&quot;Content-Type&quot;,&apos;text/html;charset=utf-8&apos;)</span><br><span class="line">next();</span><br><span class="line">&#125;)</span><br><span class="line">app.get(&quot;/name/n&quot;,function(req,res)&#123;</span><br><span class="line">&#125;)</span><br><span class="line">//也可以匹配到，在执行get请求/name/n时先执行上面的中间件</span><br></pre></td></tr></table></figure></li></ul><h4 id="错误中间件"><a href="#错误中间件" class="headerlink" title="错误中间件"></a>错误中间件</h4><p>错误处理中间件和其他中间件定义类似，只是必须要使用 4 个参数(err, req, res, next)。即使不需要 next 对象，也必须在签名中声明它，否则中间件会被识别为一个常规中间件，不能处理错误。遇见错误之后直接执行错误中间件。<br>错误处理中间件应当在在其他 app.use() 和路由调用之后才能加载，一般放在路由的最底部，比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> methodOverride = <span class="built_in">require</span>(<span class="string">'method-override'</span>);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line">app.use(methodOverride());</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">'Something broke!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="应用生成器"><a href="#应用生成器" class="headerlink" title="应用生成器"></a>应用生成器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">$ npm install express-generator -g</span><br><span class="line"><span class="comment">//view=XXX 使用引擎名字  myapp项目名称</span></span><br><span class="line">$ express --view=pug myapp</span><br><span class="line"><span class="comment">//安装所有依赖</span></span><br><span class="line">$ cd myapp</span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动myapp项目</span></span><br><span class="line">$ set DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure><hr><p>我的石墨文档链接：<a href="https://shimo.im/docs/TXeewzaE8Jsdgn0I/" target="_blank" rel="noopener">https://shimo.im/docs/TXeewzaE8Jsdgn0I/</a><br>练习的简易聊天室连接：<a href="https://github.com/biubiuins/demo_chat" target="_blank" rel="noopener">https://github.com/biubiuins/demo_chat</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;express-学习笔记&quot;&gt;&lt;a href=&quot;#express-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;express 学习笔记&quot;&gt;&lt;/a&gt;express 学习笔记&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;搭建简单服务器&quot;&gt;&lt;a href=&quot;#搭
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>project_email</title>
    <link href="http://yoursite.com/2018/10/11/project-email/"/>
    <id>http://yoursite.com/2018/10/11/project-email/</id>
    <published>2018-10-11T07:16:32.000Z</published>
    <updated>2018-10-12T06:37:09.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="邮件收发项目"><a href="#邮件收发项目" class="headerlink" title="邮件收发项目"></a>邮件收发项目</h2><p>大二上开始学html，css，js之后做的暑假做的前端页面，很感谢老师可以给一个练手的机会，在做的过程中发现了很多问题，以及项目完成之后的收获。<br>&nbsp;&nbsp;&nbsp;&nbsp;虽然是一个很简单的界面，但是之前学习的时候不太仔细，也没有demo练习，还是做的磕磕绊绊，还好最后做的差不多了。TAT<br>&nbsp;&nbsp;针对过程中的问题，阅读了很多关于语法规范的文章，js，jq又重新学习了一遍（练习了很多），大二下期基本在学习之中度过的。希望在以后的项目中可以有所进步，彻底的实现前后端分离！！！</p><h2 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h2><ul><li>完成时间：大二上期寒假  2018-3月左右</li><li>bootsrap框架，layui框架，jquery</li></ul><h2 id="项目不足"><a href="#项目不足" class="headerlink" title="项目不足"></a>项目不足</h2><ul><li>语法不规范，复用性不强，后面修改过一次感觉修改起来很复杂</li><li>js不熟练，项目之后大二下期又重新开始学习了一遍js，并写了总结 (<a href="https://biubiuins.github.io/2018/10/11/summary-2018-9/" target="_blank" rel="noopener">https://biubiuins.github.io/2018/10/11/summary-2018-9/</a>)</li><li><p>技术不足，没有实现前后端分离</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2></li><li><p>首页 <a href="http://mailroom.sicau.edu.cn/email/public/" target="_blank" rel="noopener">http://mailroom.sicau.edu.cn/email/public/</a></p><ul><li>bootsrap做了响应式，用了ajax请求数据</li></ul></li><li>管理页面（需要登陆仅提供图片）<br><img src="/img/project_email/admin.png" width="85%"><ul><li>实现全选与批量删除</li><li>点击已取之后，重新获取数据（保证筛选邮件之后点击已取仍显示的是筛选之后的邮件)</li><li>邮件类型默认显示上一次选择的类型，可输入筛选的下拉框<br><img src="/img/project_email/admin1.png" width="85%"></li><li>超级管理员界面实现了原生js模态框，并做了根据屏幕居中</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;邮件收发项目&quot;&gt;&lt;a href=&quot;#邮件收发项目&quot; class=&quot;headerlink&quot; title=&quot;邮件收发项目&quot;&gt;&lt;/a&gt;邮件收发项目&lt;/h2&gt;&lt;p&gt;大二上开始学html，css，js之后做的暑假做的前端页面，很感谢老师可以给一个练手的机会，在做的过程中发现
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>summary-2018.9</title>
    <link href="http://yoursite.com/2018/10/11/summary-2018-9/"/>
    <id>http://yoursite.com/2018/10/11/summary-2018-9/</id>
    <published>2018-10-11T04:32:50.000Z</published>
    <updated>2018-10-11T06:11:08.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="summary-2018-9"><a href="#summary-2018-9" class="headerlink" title="summary-2018-9"></a>summary-2018-9</h1><hr><p>这是在学会搭建博客之后的第一篇博客，以前学习的时候也有记笔记，所以把之前学习笔记上面整理的常见的功能、封装以及遇到的问题写出来，这篇仅限于js，jq。现在正在学习vue，希望在过段时间，自己也能写出关于vue学习的总结。<br>在此之前还需要了解markdown的语法TAT</p><blockquote><p>原来的笔记记录在石墨文档，<a href="https://shimo.im/docs/c8YrJy4obNICaWiS/" target="_blank" rel="noopener">https://shimo.im/docs/c8YrJy4obNICaWiS/</a></p></blockquote><h2 id="ID处理"><a href="#ID处理" class="headerlink" title="ID处理"></a>ID处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 获取id */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> id === <span class="string">"string"</span> ? <span class="built_in">document</span>.getElementById(id) : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="匀速动画"><a href="#匀速动画" class="headerlink" title="匀速动画"></a>匀速动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素，目标，步数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constant</span>(<span class="params">obj, target, speed</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 清除定时器</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="comment">//2.判断方向</span></span><br><span class="line">    <span class="comment">//如果现在的距离小于目标值,则往右，否则向左</span></span><br><span class="line">    <span class="keyword">let</span> dir =obj.offsetLeft&lt;target?speed:-speed;</span><br><span class="line">    <span class="comment">//3. 设置定时器</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        obj.style.left = obj.offsetLeft + dir + <span class="string">"px"</span>;</span><br><span class="line">        <span class="comment">//若超出目标值或者不到目标值</span></span><br><span class="line">        <span class="comment">//最后相减的值取绝对值后，总是小于步数的</span></span><br><span class="line">        <span class="comment">//Math.abs(dir)||speed</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(target-obj.offsetLeft)&lt;<span class="built_in">Math</span>.abs(dir))&#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">//根据目标值板正</span></span><br><span class="line">            obj.style.left =target+<span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buffer</span>(<span class="params">obj, json, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 清除定时器</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="keyword">var</span> begin = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 设置定时器</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.0 旗帜, 决定动画是否结束</span></span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 2.1 遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> json)&#123;</span><br><span class="line">            <span class="comment">// 2.2.-1 求出起始值 和 结束值</span></span><br><span class="line">            <span class="keyword">if</span>(k === <span class="string">'opacity'</span>)&#123; <span class="comment">// 透明度</span></span><br><span class="line">                begin = <span class="built_in">parseInt</span>( <span class="built_in">parseFloat</span>(getCssAttr(obj, k)) * <span class="number">100</span>);</span><br><span class="line">                end = <span class="built_in">parseInt</span>(<span class="built_in">parseFloat</span>(json[k]) * <span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'scrollTop'</span>)&#123; <span class="comment">// 滚动到头部</span></span><br><span class="line">                begin = obj.scrollTop;</span><br><span class="line">                end = <span class="built_in">parseInt</span>(json[k]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">// 正常情况</span></span><br><span class="line">                begin = <span class="built_in">parseInt</span>(getCssAttr(obj, k));</span><br><span class="line">                end = <span class="built_in">parseInt</span>(json[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2.0 求出步长</span></span><br><span class="line">            <span class="comment">//步长公式</span></span><br><span class="line">            <span class="keyword">let</span> step = (end - begin) * <span class="number">0.2</span>;</span><br><span class="line">            step = step &gt;=<span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">            <span class="comment">// 2.2.1 计算起始位置</span></span><br><span class="line">            <span class="keyword">if</span>(k === <span class="string">'opacity'</span>)&#123;</span><br><span class="line">                obj.style.opacity = (begin + step) / <span class="number">100</span>;</span><br><span class="line">                obj.style.filter = <span class="string">'alpha(opacity='</span> + (begin + end)+<span class="string">')'</span>; <span class="comment">// 针对IE</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'scrollTop'</span>)&#123;</span><br><span class="line">                obj.scrollTop = begin + step;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'zIndex'</span>)&#123;</span><br><span class="line">                obj.style[k] = json[k];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                obj.style[k] = begin + step + <span class="string">'px'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2.2 判断</span></span><br><span class="line">            <span class="keyword">if</span>(begin !== end)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.0 结束动画</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">// 开启动画组中的下一组动画</span></span><br><span class="line">            <span class="keyword">if</span>(fn)&#123; <span class="comment">// 判断有没有这个函数</span></span><br><span class="line">                fn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="js获取CSS"><a href="#js获取CSS" class="headerlink" title="js获取CSS"></a>js获取CSS</h4><p>利用 [] 访问属性 元素.style[“属性”];<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种语法的好处就是可以动态的传递参数作为属性</span></span><br><span class="line"><span class="comment">//只能获取行类标签</span></span><br><span class="line">     <span class="keyword">var</span> h = <span class="string">'height'</span>;</span><br><span class="line">     box.style[h] = <span class="number">300</span> + <span class="string">'px'</span>;</span><br><span class="line"><span class="comment">//获取外部css或页内的css</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyleAttr</span>(<span class="params">obj, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.currentStyle)&#123; <span class="comment">// IE 和 opera</span></span><br><span class="line">         <span class="keyword">return</span> obj.currentStyle[attr];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//window.getComputedStyle("元素", "伪类") （ 注意：两个选项是必须的，没有伪类 用 null 替代 ）</span></span><br><span class="line">    <span class="comment">//也可以点选，但是为了传递参数作为属性</span></span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(obj, <span class="literal">null</span>)[attr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><ul><li>在定时器事件前，先设置接收定时器的变量指向null</li><li>在定时器事件里，先要清除定时器再设置定时器，先清除是防止定时器累加<h2 id="轮播"><a href="#轮播" class="headerlink" title="轮播"></a>轮播</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3>这种不适合多图<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slider</span> (<span class="params">sliderid,olStyleClassName,imgWidth,speed,second</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//高级排他</span></span><br><span class="line">    <span class="comment">//lastIndex 选中的小圆点样式 currentIndex 小圆点索引  picIndex 图片索引</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex=<span class="number">0</span>,currentIndex=<span class="number">0</span>,picIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1. 获取需要的标签</span></span><br><span class="line">    <span class="keyword">let</span> ul=$(sliderid).children[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span>  ol=$(sliderid).children[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> list=ul.children;</span><br><span class="line">    <span class="keyword">let</span> olList= ol.children;</span><br><span class="line">    <span class="comment">// 2.克隆最后一个li标签</span></span><br><span class="line">    ul.appendChild(list[<span class="number">0</span>].cloneNode(<span class="literal">true</span>));</span><br><span class="line">    <span class="comment">// 3.动态创建小圆点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;list.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> li =<span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">        ol.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.第一个小圆点选中</span></span><br><span class="line">    olList[<span class="number">0</span>].className=olStyleClassName;</span><br><span class="line">    <span class="comment">//5.监听每个li的进入事件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;olList.length;i++)&#123;</span><br><span class="line">        <span class="comment">//5.1 每一个li绑定自己的事件</span></span><br><span class="line">        olList[i].onmouseover=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//先清除之前的选中状态，在把当前选中的索引给lastIndex</span></span><br><span class="line">            lastIndex=currentIndex;</span><br><span class="line">            olList[lastIndex].className=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">this</span>.className=olStyleClassName;</span><br><span class="line">            lastIndex=i;</span><br><span class="line">            <span class="comment">//5.2图片动起来</span></span><br><span class="line">            constant(ul,-(i * imgWidth),speed);</span><br><span class="line">            currentIndex=picIndex=i;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.定时器</span></span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    timer = setInterval(autoPlay, second);</span><br><span class="line">    <span class="comment">// 7. 清除和设置定时器</span></span><br><span class="line">    $(sliderid).onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;;</span><br><span class="line">    $(sliderid).onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        timer = setInterval(autoPlay, second);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        picIndex++;</span><br><span class="line">        currentIndex++;</span><br><span class="line">        <span class="comment">//如果图片到了最后一张</span></span><br><span class="line">        <span class="keyword">if</span> (picIndex &gt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">            ul.style.left = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//从第二张图片开始</span></span><br><span class="line">            picIndex = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        constant(ul, -(picIndex * imgWidth), speed);</span><br><span class="line">        <span class="comment">//小原点的选中</span></span><br><span class="line">        <span class="keyword">if</span> (currentIndex &gt; olList.length - <span class="number">1</span>) &#123;</span><br><span class="line">            currentIndex = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;olList.length;i++)&#123;</span><br><span class="line">            olList[i].className=<span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        olList[currentIndex].className=olStyleClassName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>两个图片宽度的位置，第一个位置显示（当前），第二位置隐藏<br><img src="/img/summary-2018.9/summary01.png" alt="轮播图"></p><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>改变透明度，循环一遍让所有的opacity动画为0，然后当前为opacity动画为1，索引++、<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opacityAutoPlay</span>(<span class="params">ulid,speed</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取所有的li标签</span></span><br><span class="line">    <span class="keyword">var</span> lis = $(ulid).getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 开始定时器</span></span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.1 改变透明度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;lis.length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> singerLi = lis[i];</span><br><span class="line">            buffer(singerLi, &#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer(lis[index], &#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 2.2 索引++</span></span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(index === lis.length)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, speed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h2><ul><li>父盒子居中<ol><li>Math.floor(屏幕宽度/子盒子宽度)=cols</li><li>子盒子的宽度*cols=父盒子的宽度</li><li>margin:0 auto;</li></ol></li><li><p>子盒子定位<br>第一行不变，其他子盒子接在第一行最矮的盒子的后面（反复）</p><ol><li>拿到所有盒子的高度。把第一行的盒子的高度放在一个数组里面（i&lt;cols,heightArr[])</li><li>在剩下的盒子里面(i&gt;=cols),找出第一行最矮的盒子的高度（Math.min(…heightArr)||Math.min.apply(this.height)）<br>2.1 找出最矮盒子的索引(遍历heightArr[],找出和第二步盒子高度一样的i返回)<br>2.2 剩下盒子定位（left=第2.1步的索引*子盒子宽度，top=最矮的盒子高度）<br>2.3 更新最矮盒子的高度 （heightArr[最矮盒子的高度]+=当前盒子的高度）</li></ol><ul><li>滚动加载图片</li></ul><ol><li>监听窗口的滚动，滚动到你需要的位置加载</li></ol><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 实现瀑布流布局</span></span><br><span class="line">    waterFull(<span class="string">"main"</span>, <span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 动态加载图片</span></span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(checkWillLoadImage())&#123;</span><br><span class="line">            <span class="comment">// 2.1 造数据</span></span><br><span class="line">            <span class="keyword">var</span> dataArr = [</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img04.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img06.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img08.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img09.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img10.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img12.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img14.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img16.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img18.jpg"</span>&#125;</span><br><span class="line">            ];</span><br><span class="line">            <span class="comment">// 2.2 创建元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;dataArr.length; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> newBox = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">                newBox.className = <span class="string">"box"</span>;</span><br><span class="line">                $(<span class="string">"main"</span>).appendChild(newBox);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> newPic = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">                newPic.className = <span class="string">"pic"</span>;</span><br><span class="line">                newBox.appendChild(newPic);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> newImg = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">                newImg.src = <span class="string">"images/"</span> + dataArr[i].src;</span><br><span class="line">                newPic.appendChild(newImg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.3 重新布局</span></span><br><span class="line">            waterFull(<span class="string">"main"</span>, <span class="string">"box"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现瀑布流布局</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterFull</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 父盒子居中</span></span><br><span class="line">    <span class="comment">// 1.1 获取所有的盒子</span></span><br><span class="line">    <span class="keyword">var</span> allBox = $(parent).getElementsByClassName(child);</span><br><span class="line">    <span class="comment">// 1.2 获取子盒子的宽度</span></span><br><span class="line">    <span class="keyword">var</span> boxWidth = allBox[<span class="number">0</span>].offsetWidth;</span><br><span class="line">    <span class="comment">// 1.3 获取屏幕的宽度</span></span><br><span class="line">    <span class="keyword">var</span> screenW = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">    <span class="comment">// 1.4 求出列数</span></span><br><span class="line">    <span class="keyword">var</span> cols = <span class="built_in">parseInt</span>(screenW / boxWidth);</span><br><span class="line">    <span class="comment">// 1.5 父盒子居中</span></span><br><span class="line">    $(parent).style.width = cols * boxWidth + <span class="string">'px'</span>;</span><br><span class="line">    $(parent).style.margin = <span class="string">"0</span></span><br><span class="line"><span class="string">    // 2. 子盒子的定位</span></span><br><span class="line"><span class="string">    // 2.1 定义高度数组</span></span><br><span class="line"><span class="string">    var heightArr = [], boxHeight = 0, minBoxHeight = 0, minBoxIndex = 0;</span></span><br><span class="line"><span class="string">    // 2.2 遍历子盒子</span></span><br><span class="line"><span class="string">    for (var i = 0; i &lt; allBox.length; i++) &#123;</span></span><br><span class="line"><span class="string">        // 2.2.1 求出每一个子盒子的高度</span></span><br><span class="line"><span class="string">        boxHeight = allBox[i].offsetHeight;</span></span><br><span class="line"><span class="string">        // 2.2.2 取出第一行盒子的高度放入高度数组</span></span><br><span class="line"><span class="string">        if (i &lt; cols) &#123; // 第一行</span></span><br><span class="line"><span class="string">            heightArr.push(boxHeight);</span></span><br><span class="line"><span class="string">        &#125; else &#123; // 剩余行</span></span><br><span class="line"><span class="string">            // 1. 取出最矮的盒子高度</span></span><br><span class="line"><span class="string">            // minBoxHeight = _.min(heightArr);</span></span><br><span class="line"><span class="string">            minBoxHeight=Math.min(...heightArr);</span></span><br><span class="line"><span class="string">            // 2. 求出最矮盒子对应的索引</span></span><br><span class="line"><span class="string">            minBoxIndex = getMinBoxIndex(heightArr, minBoxHeight);</span></span><br><span class="line"><span class="string">            // 3. 子盒子定位</span></span><br><span class="line"><span class="string">            allBox[i].style.position = "</span>absolute<span class="string">";</span></span><br><span class="line"><span class="string">            allBox[i].style.left = minBoxIndex * boxWidth + 'px';</span></span><br><span class="line"><span class="string">            allBox[i].style.top = minBoxHeight + 'px';</span></span><br><span class="line"><span class="string">            // 4. 更新数组中的高度</span></span><br><span class="line"><span class="string">            heightArr[minBoxIndex] += boxHeight;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    console.log(heightArr, minBoxHeight, minBoxIndex);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 获取数组中最矮盒子高度的索引</span></span><br><span class="line"><span class="string"> * @param arr</span></span><br><span class="line"><span class="string"> * @param val</span></span><br><span class="line"><span class="string"> * @returns &#123;number&#125;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function getMinBoxIndex(arr, val) &#123;</span></span><br><span class="line"><span class="string">    for(var i=0; i&lt;arr.length; i++)&#123;</span></span><br><span class="line"><span class="string">        if(arr[i] === val)&#123;</span></span><br><span class="line"><span class="string">            return i;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 判断是否具备加载图片的条件</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function checkWillLoadImage() &#123;</span></span><br><span class="line"><span class="string">    // 1. 获取最后一个盒子</span></span><br><span class="line"><span class="string">    var allBox = document.getElementsByClassName("</span>box<span class="string">");</span></span><br><span class="line"><span class="string">    var lastBox = allBox[allBox.length - 1];</span></span><br><span class="line"><span class="string">    // 2. 求出最后一个盒子自身高度的一半 + offsetTop</span></span><br><span class="line"><span class="string">    var lastBoxDis = lastBox.offsetHeight * 0.5 + lastBox.offsetTop;</span></span><br><span class="line"><span class="string">    // 3. 求出屏幕的高度</span></span><br><span class="line"><span class="string">    var screenW = document.body.clientHeight || document.documentElement.clientHeight;</span></span><br><span class="line"><span class="string">    // 4. 求出页面偏离浏览器的高度</span></span><br><span class="line"><span class="string">    var scrollTop = scroll().top;</span></span><br><span class="line"><span class="string">    return lastBoxDis &lt;= screenW + scrollTop;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>jq<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当页面加载完毕</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'load'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//1.实现瀑布流布局</span></span><br><span class="line">waterFall();</span><br><span class="line"><span class="comment">//2.滚动加载</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//判断是否加载</span></span><br><span class="line"><span class="keyword">if</span> (checkWillLoad())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">////创造假数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="string">'dataImg'</span>:[&#123;<span class="string">'img'</span>:<span class="string">'23.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'24.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'25.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'26.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'27.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'28.jpg'</span>&#125;]&#125;;</span><br><span class="line"><span class="comment">//遍历创建盒子</span></span><br><span class="line">$.each(data.dataImg,<span class="function"><span class="keyword">function</span> (<span class="params">index,value</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个div标签 设置它的类为'box' 添加到'main'里面去</span></span><br><span class="line"><span class="keyword">var</span> newBox = $(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'box'</span>).appendTo($(<span class="string">'#main'</span>));</span><br><span class="line">    <span class="keyword">var</span> newPic = $(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'pic'</span>).appendTo($(newBox));</span><br><span class="line">        <span class="comment">//创建img  取出遍历的对象value的img属性对应的值</span></span><br><span class="line">     $(<span class="string">'&lt;img&gt;'</span>).attr(<span class="string">'src'</span>,<span class="string">'images/'</span>+$(value).attr(<span class="string">'img'</span>)).appendTo($(newPic));</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//1.实现瀑布流布局</span></span><br><span class="line">        waterFall();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//实现瀑布流布局</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">waterFall</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//拿到所有的盒子</span></span><br><span class="line">        <span class="keyword">var</span> allBox = $(<span class="string">'#main &gt; .box'</span>);</span><br><span class="line">        <span class="comment">//取出其中一个盒子的宽度</span></span><br><span class="line">        <span class="keyword">var</span> boxWidth = $(allBox).eq(<span class="number">0</span>).outerWidth();</span><br><span class="line">        <span class="comment">//取出屏幕的高度</span></span><br><span class="line">        <span class="keyword">var</span> screenWidth = $(<span class="built_in">window</span>).width();</span><br><span class="line">        <span class="comment">//求出列数 //取整函数取整</span></span><br><span class="line">        <span class="keyword">var</span> cols = <span class="built_in">Math</span>.floor( screenWidth/boxWidth);</span><br><span class="line">        <span class="comment">//父标签居中</span></span><br><span class="line">        $(<span class="string">'#main'</span>).css(&#123;</span><br><span class="line">        <span class="string">'width'</span>:cols * boxWidth + <span class="string">'px'</span>,</span><br><span class="line">        <span class="string">'margin'</span>:<span class="string">'0 auto'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//对子盒子定位</span></span><br><span class="line">        <span class="keyword">var</span> heightArr = [];</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        $.each(allBox,<span class="function"><span class="keyword">function</span> (<span class="params">index,value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//取出单独盒子的高度</span></span><br><span class="line">        <span class="keyword">var</span> boxHeight = $(value).outerHeight();</span><br><span class="line">        <span class="comment">//判断是否第一行</span></span><br><span class="line">        <span class="keyword">if</span>(index &lt; cols)</span><br><span class="line">        &#123;</span><br><span class="line">        heightArr[index] = boxHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">//剩余的盒子要瀑布流布局</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//求出最矮的盒子高度</span></span><br><span class="line">        <span class="keyword">var</span> minBoxHeight = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,heightArr);</span><br><span class="line">        <span class="comment">//取出最矮高度对应的索引  封装了js的这个方法</span></span><br><span class="line">        <span class="keyword">var</span> minBoxIndex = $.inArray(minBoxHeight,heightArr);</span><br><span class="line">        <span class="comment">//定位</span></span><br><span class="line">        $(value).css(&#123;</span><br><span class="line">        <span class="string">'position'</span>:<span class="string">'absolute'</span>,</span><br><span class="line">        <span class="string">'top'</span>:minBoxHeight + <span class="string">'px'</span>,</span><br><span class="line">        <span class="string">'left'</span>:minBoxIndex * boxWidth + <span class="string">'px'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//更新数组中最矮的高度</span></span><br><span class="line">        heightArr[minBoxIndex] += boxHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否符合加载条件</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkWillLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//直接取出最后一个盒子</span></span><br><span class="line">        <span class="keyword">var</span> lastBox = $(<span class="string">'#main &gt; div'</span>).last();</span><br><span class="line">        <span class="comment">//取出最后一个盒子高度的一半 + 头部偏离的位置</span></span><br><span class="line">        <span class="keyword">var</span> lastBoxDis = $(lastBox).outerHeight() + $(lastBox).offset().top;</span><br><span class="line">        <span class="comment">//求出浏览器的高度</span></span><br><span class="line">        <span class="keyword">var</span> clientHeight = $(<span class="built_in">window</span>).height();</span><br><span class="line">        <span class="comment">//求出页面偏离浏览器高度</span></span><br><span class="line">        <span class="keyword">var</span> scrollTopHeight = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">        <span class="comment">//比较返回</span></span><br><span class="line">        <span class="keyword">return</span> lastBoxDis &lt;= clientHeight + scrollTopHeight;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h4 id="margin-0-auto"><a href="#margin-0-auto" class="headerlink" title="margin:0 auto"></a>margin:0 auto</h4><ol><li>块级元素</li><li>给定要居中的块级元素的宽度。</li><li>所有元素也可以通过对父元素设置<code>text-align：center；</code>的方式来实现居中。而对于块元素来说，对要居中的元素自身进行设置<code>text-align:center</code>也能实现居中</li><li><code>margin:0 auto;</code>可以使盒子居中，<code>text-align:center;</code>可以使文本居中，<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4>onresize举列子<br>窗口大小一变化就执行，太过灵敏，所以需要阻止<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用定时器</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    <span class="comment">// 节流</span></span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        waterFull(<span class="string">'main'</span>, <span class="string">'box'</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装之后的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(fn, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="apply-call"><a href="#apply-call" class="headerlink" title="apply/call"></a>apply/call</h4><p>这个面试中常考到，现在只做初步了解<br>(<a href="https://www.cnblogs.com/gaowx/p/4837687.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaowx/p/4837687.html</a> )</p><ul><li>改变函数的this指向</li><li>apply可以改变传递给函数参数的形式<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newDate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//声明日期对象，里面可以设置参数表示其他时间</span></span><br><span class="line">  <span class="keyword">let</span> date =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="comment">//获取时间里面的年</span></span><br><span class="line">  date.getFullYear()</span><br><span class="line">  <span class="comment">//月0-11</span></span><br><span class="line">  date.getMonth()+<span class="number">1</span></span><br><span class="line">  <span class="comment">//日1-31</span></span><br><span class="line">  date.getDate()</span><br><span class="line">  <span class="comment">//获取星期0-6</span></span><br><span class="line">  data.Day</span><br><span class="line">  <span class="comment">//设置某一天</span></span><br><span class="line">  date.setDate（day）</span><br><span class="line">  <span class="comment">//时0-23</span></span><br><span class="line">  date.getHours()</span><br><span class="line">  <span class="comment">//分0-59</span></span><br><span class="line">  date.getMinutes()</span><br><span class="line">  <span class="comment">//秒0-59</span></span><br><span class="line">  date.getSeconds()</span><br><span class="line">  <span class="comment">//获取毫秒</span></span><br><span class="line">  date.getMilliSeconds()</span><br><span class="line">  <span class="comment">//时间戳</span></span><br><span class="line">  date.getTime()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ms转化时间"><a href="#ms转化时间" class="headerlink" title="ms转化时间"></a>ms转化时间</h3><p><img src="/img/summary-2018.9/data.jpg" alt="data"></p><h2 id="cookie封装"><a href="#cookie封装" class="headerlink" title="cookie封装"></a>cookie封装</h2><p>封装成插件，引入该文件后，$.addCookie(key,value,day,path,domain)来引用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$,window</span>) </span>&#123;</span><br><span class="line">    $.extend(&#123;</span><br><span class="line">        addCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">addCookie</span>(<span class="params">key,value,day,path,domain</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//1.处理默认保存的路径</span></span><br><span class="line">        <span class="keyword">var</span> index=<span class="built_in">window</span>.location.pathname.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line">        <span class="keyword">var</span> currentPath=<span class="built_in">window</span>.location.pathname.slice(<span class="number">0</span>,index)</span><br><span class="line">        path=path||currentPath</span><br><span class="line">        <span class="comment">//2.处理默认domain</span></span><br><span class="line">        domain=domain||<span class="built_in">document</span>.domain</span><br><span class="line">        <span class="comment">//3.处理默认的过期时间</span></span><br><span class="line">        <span class="keyword">if</span>(!day)&#123;</span><br><span class="line">          <span class="built_in">document</span>.cookie=key+<span class="string">"="</span>+value+<span class="string">";path="</span>+path+<span class="string">";domain="</span>+domain+<span class="string">';'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> date =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            date.setDate(date.getDate()+day)</span><br><span class="line">            <span class="built_in">document</span>.cookie=key+<span class="string">"="</span>+value+<span class="string">";expires="</span>+date.toGMTString()+<span class="string">";path="</span>+path+<span class="string">";domain="</span>+domain+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        getCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> res=<span class="built_in">document</span>.cookie.split(<span class="string">';'</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++)&#123;</span><br><span class="line">        <span class="comment">//把key和value切割</span></span><br><span class="line">            <span class="keyword">var</span> temp=res[i].split(<span class="string">'='</span>)</span><br><span class="line">            <span class="comment">//前后可能有空格，把空格删除</span></span><br><span class="line">            <span class="keyword">if</span>(temp[<span class="number">0</span>].trim()===key)&#123;</span><br><span class="line">                <span class="keyword">return</span> temp[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        delCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">delCookie</span>(<span class="params">key, path</span>) </span>&#123;</span><br><span class="line">         <span class="comment">//默认情况下只能删除默认路径中保存的cookie，如果要删除指定路径保存的cookie，要把路径值传出去</span></span><br><span class="line">         <span class="comment">//设置过期时间为-1</span></span><br><span class="line">                addCookie(key, getCookie(key), <span class="number">-1</span>, path)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery,<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><h2 id="动态添加的元素绑定事件"><a href="#动态添加的元素绑定事件" class="headerlink" title="动态添加的元素绑定事件"></a>动态添加的元素绑定事件</h2><ul><li><p>delegate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;ul&apos;).delegate(&apos;li&apos;,&apos;click&apos;,function()&#123;</span><br><span class="line">//操作的还是li</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>onclick事件<br>在动态添加数据的时候，就给元素绑定onclick事件</p></li><li>on（）<br>常用  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//把动态添加的元素写在on里面，如果调用的函数是外部定义好的，则在调用的时候不加（）</span><br><span class="line">//不然会跳过点击事件直接执行函数</span><br><span class="line">$(&quot;父元素或祖辈元素&quot;).on(&quot;click&quot;,&quot;动态添加的元素&quot;,function()&#123;</span><br><span class="line">$(this).css(&quot;border&quot;,&quot;5px solid #000&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h3><p><a href="http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css" target="_blank" rel="noopener">http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css</a></p><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拿到select对象：</span></span><br><span class="line"><span class="keyword">var</span> myselect=<span class="built_in">document</span>.getElementById(<span class="string">"select"</span>);</span><br><span class="line"><span class="comment">//拿到选中项的索引</span></span><br><span class="line"><span class="keyword">var</span> index=myselect.selectedIndex ; <span class="comment">// selectedIndex代表的是你所选中项的index</span></span><br><span class="line"><span class="comment">//拿到选中项options的value：</span></span><br><span class="line">myselect.options[index].value;</span><br><span class="line"><span class="comment">//拿到选中项options的text：</span></span><br><span class="line">myselect.options[index].text;</span><br><span class="line"><span class="comment">//拿到选中项的其他值，比如这里的url：</span></span><br><span class="line"> myselect.options[index].getAttribute(<span class="string">'url'</span>);</span><br><span class="line"><span class="comment">//jquery</span></span><br><span class="line">var options=$(“#select option:selected”); //获取选中的项</span><br><span class="line">alert(options.val()); <span class="comment">//拿到选中项的值</span></span><br><span class="line">alert(options.text()); <span class="comment">//拿到选中项的文本</span></span><br><span class="line">alert(options.attr(<span class="string">'url'</span>)); <span class="comment">//拿到选中项的url值</span></span><br><span class="line"><span class="comment">//设置</span></span><br><span class="line"><span class="comment">//设置value为pxx的项选中</span></span><br><span class="line">$(<span class="string">".selector"</span>).val(<span class="string">"pxx"</span>)</span><br><span class="line"><span class="comment">//设置text为pxx的项选中</span></span><br><span class="line">$(<span class="string">".selector"</span>).find(<span class="string">"option[text='pxx']"</span>).attr(<span class="string">"selected"</span>,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="H5-datalist"><a href="#H5-datalist" class="headerlink" title="H5 datalist"></a>H5 datalist</h3><p>datalist 只是列表<br>赋值取值还是通过input.样式等都在input上操作<br><a href="https://www.zhangxinxu.com/wordpress/2013/03/html5-datalist-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8-%E5%8F%AF%E8%A1%8C%E6%80%A7/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2013/03/html5-datalist-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8-%E5%8F%AF%E8%A1%8C%E6%80%A7/</a></p><h4 id="邮箱的自动补全"><a href="#邮箱的自动补全" class="headerlink" title="邮箱的自动补全"></a>邮箱的自动补全</h4><p>HTML代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">邮箱：&lt;input type=&quot;email&quot; id=&quot;email&quot; list=&quot;emailList&quot; name=&quot;off_autocomplete&quot; /&gt;</span><br><span class="line">&lt;datalist id=&quot;emailList&quot;&gt;</span><br><span class="line">//其中*为占位符，当文本框输入内容的时候，*替换成邮箱地址的前半部分，于是，动态邮件地址提示的效果就实现了</span><br><span class="line">    &lt;option value=&quot;*@qq.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@163.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@gmail.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@yahoo.com.cn&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@126.com&quot;&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br></pre></td></tr></table></figure></p><p>JS代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eleList = <span class="built_in">document</span>.getElementById(<span class="string">"emailList"</span>)</span><br><span class="line">    , eleMail = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>)</span><br><span class="line">    , htmlListInit = <span class="string">''</span>, arrEmailList = [];</span><br><span class="line"><span class="keyword">if</span> (eleMail &amp;&amp; eleList &amp;&amp; (htmlListInit = eleList.innerHTML) !== <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// 得到类似["qq.com", "163.com", "gmail.com", ...]的数据</span></span><br><span class="line">    arrEmailList = [].slice.call(eleList.getElementsByTagName(<span class="string">"option"</span>)).map(<span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> option.value.replace(<span class="string">"*@"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    eleMail.fnListReplace = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arrValue = <span class="keyword">this</span>.value.trim().split(<span class="string">"@"</span>);</span><br><span class="line">        <span class="comment">// 修复FireFox浏览器下无限input问题</span></span><br><span class="line">        <span class="comment">// 如果值不完全匹配某option值，执行动态替换</span></span><br><span class="line">        <span class="keyword">if</span> (arrValue.length !== <span class="number">2</span> || arrEmailList.indexOf(arrValue[<span class="number">1</span>]) === <span class="number">-1</span>) &#123;</span><br><span class="line">            eleList.innerHTML = htmlListInit.replace(<span class="regexp">/\*/g</span>, arrValue[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 绑定输入事件侦听</span></span><br><span class="line">    eleMail.addEventListener(<span class="string">"input"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fnListReplace.call(<span class="keyword">this</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//  载入即匹配</span></span><br><span class="line">    eleMail.fnListReplace.call(eleMail).focus();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    eleList = <span class="built_in">document</span>.createElement(<span class="string">"datalist"</span>);</span><br><span class="line">    eleList.innerHTML = <span class="string">'&lt;p class=sorry&gt;抱歉，当前浏览器不支持HTML5 datalist.&lt;/p&gt;'</span>;</span><br><span class="line">    eleMail.parentNode.appendChild(eleList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="jquery-editable-select控件"><a href="#jquery-editable-select控件" class="headerlink" title="jquery.editable-select控件"></a>jquery.editable-select控件</h4><p>引入<br>jquery.editable-select.css<br>jquery.editable-select.js<br>调用方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#editable-select'</span>).editableSelect(&#123;</span><br><span class="line">    bg_iframe: <span class="literal">true</span>, <span class="comment">//是否加iframe</span></span><br><span class="line">    case_sensitive: <span class="literal">false</span>,</span><br><span class="line">    items_then_scroll: <span class="number">10</span> ,<span class="comment">//设置下拉选项的数目</span></span><br><span class="line">    isFilter:<span class="literal">false</span>/<span class="literal">true</span>,    <span class="comment">//是否根据条件过滤下拉选项</span></span><br><span class="line">    onCreate:,            <span class="comment">//当输入时触发</span></span><br><span class="line">    onShow：,             <span class="comment">//当下拉时触发</span></span><br><span class="line">    onHide：,              <span class="comment">//当下拉框隐藏时触发</span></span><br><span class="line">    onSelect：,            <span class="comment">//当下拉框中的选项被选中时触发</span></span><br><span class="line">    effects:<span class="keyword">default</span>/slide/fade， <span class="comment">//动画效果</span></span><br><span class="line">    duration：                   <span class="comment">//动画效果的时间</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;summary-2018-9&quot;&gt;&lt;a href=&quot;#summary-2018-9&quot; class=&quot;headerlink&quot; title=&quot;summary-2018-9&quot;&gt;&lt;/a&gt;summary-2018-9&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;这是在学会搭建博客之后的第一篇博客
      
    
    </summary>
    
    
      <category term="summary" scheme="http://yoursite.com/tags/summary/"/>
    
  </entry>
  
</feed>
