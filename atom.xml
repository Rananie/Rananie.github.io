<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>biubiu的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-22T09:58:25.655Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>biubiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>summary_js</title>
    <link href="http://yoursite.com/2018/11/22/summary_js/"/>
    <id>http://yoursite.com/2018/11/22/summary_js/</id>
    <published>2018-11-22T05:32:22.000Z</published>
    <updated>2018-11-22T09:58:25.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="enter回车"><a href="#enter回车" class="headerlink" title="enter回车"></a>enter回车</h2><blockquote><p>持续更新</p></blockquote><p>在修改项目的过程中，学习到了关于表单enter键提交是否可以触发</p><ul><li>如果type是submit，一个文本或者多个文本都会提交</li><li>如果是button，仅一个文本的时候提交</li><li>type为image的按钮，等同于type为submit的效果</li><li>用button时，fx和IE有不同的表现。radio和checkbox在FX下也会触发提交表单，在IE下不会</li></ul><h2 id="事件代理，时间委托"><a href="#事件代理，时间委托" class="headerlink" title="事件代理，时间委托"></a>事件代理，时间委托</h2><h2 id="es6-module模块"><a href="#es6-module模块" class="headerlink" title="es6 module模块"></a>es6 module模块</h2><p>通过export抛出，import引入</p><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><ul><li><p>抛出一个变量</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="comment">//写法二</span></span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;firstName&#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>as关键字重命名</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>抛出默认</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  xxx</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><ul><li><p>接收一个变量</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;firstName&#125; from &apos;./profile.js&apos;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>as关键字重命名</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; firstName as surname &#125; from &apos;./profile.js&apos;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>import命令输入的变量都是只读的，因为它的本质是输入接口，不可以修改</p></li><li><p>整体加载</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import * as XXX from &apos;./profile.js&apos;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>引入默认抛出的接口，可以自己随便命名</p></li></ul><h2 id="js跳转"><a href="#js跳转" class="headerlink" title="js跳转"></a>js跳转</h2><p><a href="https://www.cnblogs.com/Renyi-Fan/p/9130325.html" target="_blank" rel="noopener">https://www.cnblogs.com/Renyi-Fan/p/9130325.html</a></p><p>js对打开的页面ULR进行跳转，</p><ul><li>location的href属性</li><li>open 方法</li><li>histoty的三个方法</li><li>location的assign方法</li></ul><h3 id="常规的js页面跳转"><a href="#常规的js页面跳转" class="headerlink" title="常规的js页面跳转"></a>常规的js页面跳转</h3><ul><li><p>在原来的窗口中直接跳转</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.location.href=&quot;你所要跳转的页面&quot;;</span><br></pre></td></tr></table></figure></li><li><p>在新窗口中打开页面用</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.open(&apos;你所要跳转的页面&apos;);</span><br><span class="line">//open属性的参数　&apos;page.html&apos; 弹出窗口的文件名；&apos;newwindow&apos; 弹出窗口的名字（不是文件名），非必须，可用空&apos;代替；height=100 窗口高度；width=500 窗口宽度；top=0 窗口距离屏幕上方的象素值；left=0 窗口距离屏幕左侧的象素值。</span><br></pre></td></tr></table></figure></li></ul><p>##[object Object]</p><p>这个不是两个对象的意思，是对象的字符串形式，是隐式调用了Object对象的toString()方法，形式是”[object Object]”.<br>[object objcet]      自定义的对象   没有覆盖toString方法，返回默认<br>[object]            window对象      覆盖了toString方法，显式调用返回[object Object]<br>123                  字条串         覆盖了toString方法，显式调用返回[object String]</p><p>在我做项目的时候遇见了一个问题，把对象放进cookie之后，cookie存储的格式变成了object Object<br>,解决办法是转化成字符串之后存入,使用时再解析成json对象</p><ul><li><p>JSON.parse()【从一个字符串中解析出json对象】</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//定义一个字符串</span><br><span class="line">var data=&apos;&#123;&quot;name&quot;:&quot;goatling&quot;&#125;&apos;</span><br><span class="line">//解析对象​</span><br><span class="line">​JSON.parse(data)</span><br><span class="line">结果是：</span><br><span class="line">​name:&quot;goatling&quot;</span><br></pre></td></tr></table></figure></li><li><p>JSON.stringify()【从一个对象中解析出字符串】</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var data=&#123;name:&apos;goatling&apos;&#125;</span><br><span class="line">JSON.stringify(data)</span><br><span class="line">结果是：</span><br><span class="line">&apos;&#123;&quot;name&quot;:&quot;goatling&quot;&#125;&apos;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;enter回车&quot;&gt;&lt;a href=&quot;#enter回车&quot; class=&quot;headerlink&quot; title=&quot;enter回车&quot;&gt;&lt;/a&gt;enter回车&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;持续更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在修改项目的过程中，学
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>rem</title>
    <link href="http://yoursite.com/2018/11/18/rem/"/>
    <id>http://yoursite.com/2018/11/18/rem/</id>
    <published>2018-11-18T11:13:05.000Z</published>
    <updated>2018-11-18T12:19:17.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h1><ul><li>rem是相对于根元素<html>的字体大小相对单位</html></li><li>类似与em，不过rem是依赖根元素计算的，em是依赖父元素计算的</li><li>rem能等比例适配所有屏幕</li><li>这里有个插件flexible.js就是用rem实现的</li></ul><p>这个button按钮的宽度为120px，高度为60px</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">html&#123;</span><br><span class="line">    font-size:20px;</span><br><span class="line">&#125;</span><br><span class="line">.btn &#123;</span><br><span class="line">    width: 6rem;</span><br><span class="line">    height: 3rem;</span><br><span class="line">    line-height: 3rem;</span><br><span class="line">    font-size: 1.2rem;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    background: #06c;</span><br><span class="line">    color: #fff;</span><br><span class="line">    border-radius: .5rem;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是不同分辨率下的font-size的值，应该如何计算<br><img src="/img/rem/rem.png"><br>计算之后可以用媒体查询设置html的font-size值</p><h2 id="移动端页面自适应解决方案"><a href="#移动端页面自适应解决方案" class="headerlink" title="移动端页面自适应解决方案"></a>移动端页面自适应解决方案</h2><ul><li>不需要手动设置viewport了</li><li>原理是根据设备屏幕的DPR(设备像素比，比如dpr=2时，表示1个CSS像素由4个物理像素点组成） 动态设置 html 的font-size, 同时根据设备DPR调整页面的缩放值，进而达到高清效果。)</li><li>绝不是每个地方都要用rem，rem只适合与固定宽度</li><li>此方案也是默认1rem=100px</li></ul><p>比如你在效果图上量取的某个按钮元素长 55px, 宽37px</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.myBtn &#123;</span><br><span class="line">   width: 0.55rem;</span><br><span class="line">   height: 0.37rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rem&quot;&gt;&lt;a href=&quot;#rem&quot; class=&quot;headerlink&quot; title=&quot;rem&quot;&gt;&lt;/a&gt;rem&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;rem是相对于根元素&lt;html&gt;的字体大小相对单位&lt;/html&gt;&lt;/li&gt;
&lt;li&gt;类似与em，不过rem是依赖根元素计
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>demo_vue-shop3</title>
    <link href="http://yoursite.com/2018/11/16/demo-vue-shop3/"/>
    <id>http://yoursite.com/2018/11/16/demo-vue-shop3/</id>
    <published>2018-11-16T11:57:44.000Z</published>
    <updated>2018-11-16T12:24:12.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue实战项目外卖3"><a href="#vue实战项目外卖3" class="headerlink" title="vue实战项目外卖3"></a>vue实战项目外卖3</h1><h2 id="实现登陆注册功能"><a href="#实现登陆注册功能" class="headerlink" title="实现登陆注册功能"></a>实现登陆注册功能</h2><h3 id="模块界面效果及交互功能说明"><a href="#模块界面效果及交互功能说明" class="headerlink" title="模块界面效果及交互功能说明"></a>模块界面效果及交互功能说明</h3><p><strong>界面相关效果</strong></p><ol><li>切换登陆方式</li><li>手机号合法检查</li><li>倒计时效果</li><li>切换显示或隐藏密码</li><li>前台验证提示</li></ol><p><strong>前后台交互功能</strong></p><ol><li>动态一次性图形验证码</li><li>动态一次性短信验证码</li><li>短信登陆</li><li>密码登陆</li><li>获取用户信息,实现自动登陆</li><li>退出登陆</li></ol><h4 id="效果一：切换登陆方式"><a href="#效果一：切换登陆方式" class="headerlink" title="效果一：切换登陆方式"></a>效果一：切换登陆方式</h4><ol><li><p>既然要切换登陆方式，就需要一个变量来标识这两种方式</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   data () &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">loginWay: <span class="literal">false</span> <span class="comment">// true代表短信登陆, false代表密码</span></span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>动态绑定a标签的class和点击事件来实现点击切换样式</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_header_title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">:class</span>=<span class="string">"&#123;on: loginWay&#125;"</span> @<span class="attr">click</span>=<span class="string">"loginWay=true"</span>&gt;</span>短信登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">:class</span>=<span class="string">"&#123;on: !loginWay&#125;"</span> @<span class="attr">click</span>=<span class="string">"loginWay=false"</span>&gt;</span>密码登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>同时实现下面的表单登陆框自动切换</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;on: loginWay&#125;"</span>&gt;</span></span><br><span class="line">        短信登陆的input...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;on: !loginWay&#125;"</span>&gt;</span></span><br><span class="line">        密码登陆的input...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="效果二：手机号合法检查"><a href="#效果二：手机号合法检查" class="headerlink" title="效果二：手机号合法检查"></a>效果二：手机号合法检查</h4><ul><li><p>既然是要对手机号格式进行检查就要为其绑定数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--v-model的值最好按照api文档里要求的字段来命名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">maxlength</span>=<span class="string">"11"</span> <span class="attr">placeholder</span>=<span class="string">"手机号"</span> <span class="attr">v-model</span>=<span class="string">"phone"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>根据手机号格式是否正确来动态的为获取验证码添加一个类名right_phone</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span> <span class="attr">class</span>=<span class="string">"get_verification"</span> <span class="attr">:class</span>=<span class="string">"&#123;right_phone:rightPhone&#125;"</span>&gt;</span>获取验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>right_phone的值是根据phone来确定的，所以应该是一个计算属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  rightPhone () &#123;</span><br><span class="line">    <span class="comment">// 利用正则对手机号进行匹配，返回布尔值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^1\d&#123;10&#125;$/</span>.test(<span class="keyword">this</span>.phone)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>此时button的disabled也应该根据rightPhone的返回值来确定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"!rightPhone"</span> <span class="attr">class</span>=<span class="string">"get_verification"</span> <span class="attr">:class</span>=<span class="string">"&#123;right_phone:rightPhone&#125;"</span>&gt;</span>获取验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在style部分加入新定义的right_phone样式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.get_verification</span></span><br><span class="line">...</span><br><span class="line">&amp;<span class="selector-class">.right_phone</span></span><br><span class="line">    <span class="attribute">color</span> black</span><br></pre></td></tr></table></figure></li></ul><h4 id="效果三：30s倒计时"><a href="#效果三：30s倒计时" class="headerlink" title="效果三：30s倒计时"></a>效果三：30s倒计时</h4><ul><li><p>点击获取验证码之后会显示30s倒计时的效果并发送获取验证码的请求</p></li><li><p>注意要阻止点击button的默认提交表单事件，所以用<a href="mailto:`@click.prevent" target="_blank" rel="noopener">`@click.prevent</a>`</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"!rightPhone"</span> <span class="attr">class</span>=<span class="string">"get_verification"</span> <span class="attr">:class</span>=<span class="string">"&#123;right_phone:rightPhone&#125;"</span> @<span class="attr">click.prevent</span>=<span class="string">"getCode"</span>&gt;</span>获取验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在data里定义定时变量computeTime，然后感觉时间判断显示的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"get_verification"</span>&gt;</span>&#123;&#123;computeTime&gt;0 ? `($&#123;computeTime&#125;s)已发送` : '获取验证码'&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后在methods里定义定时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    getCode () &#123;</span><br><span class="line">     <span class="comment">// 如果当前没有计时!this.computeTime等于this.computeTime === 0</span></span><br><span class="line">       <span class="keyword">if</span>(!<span class="keyword">this</span>.computeTime) &#123;</span><br><span class="line">         <span class="comment">// 启动倒计时</span></span><br><span class="line">         <span class="keyword">this</span>.computeTime = <span class="number">30</span></span><br><span class="line">         <span class="keyword">this</span>.intervalId = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">this</span>.computeTime--</span><br><span class="line">           <span class="keyword">if</span>(<span class="keyword">this</span>.computeTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="comment">// 停止计时</span></span><br><span class="line">             clearInterval(<span class="keyword">this</span>.intervalId)</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;, <span class="number">1000</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     <span class="comment">// 发送ajax请求（向指定手机号发送验证码短信）</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="效果四：-密码的显示隐藏"><a href="#效果四：-密码的显示隐藏" class="headerlink" title="效果四： 密码的显示隐藏"></a>效果四： 密码的显示隐藏</h4><ul><li><p>利用两个type不同的input来实现密码的显示隐藏</p></li><li><p>在data里定义showPwd(默认为false)控制两者的显隐，同时使用v-model绑定数据pwd</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"login_verification"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">maxlength</span>=<span class="string">"8"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">v-if</span>=<span class="string">"showPwd"</span> <span class="attr">v-model</span>=<span class="string">"pwd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">maxlength</span>=<span class="string">"8"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">v-else</span> <span class="attr">v-model</span>=<span class="string">"pwd"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>为滑块区域添加点击监听，用来切换showPwd的值</p></li><li><p>同时切换滑块的各种样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"switch_button"</span> <span class="attr">:class</span>=<span class="string">"showPwd?'on':'off'"</span> @<span class="attr">click</span>=<span class="string">"showPwd=!showPwd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"switch_circle"</span> <span class="attr">:class</span>=<span class="string">"&#123;right: showPwd&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"switch_text"</span>&gt;</span>&#123;&#123;showPwd ? 'abc' : '...'&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加必要的style</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="selector-class">.switch_circle</span></span><br><span class="line">...</span><br><span class="line">&amp;<span class="selector-class">.right</span></span><br><span class="line">    <span class="attribute">transform</span> translateX(30px)</span><br></pre></td></tr></table></figure></li></ul><h4 id="效果五：前台表单验证"><a href="#效果五：前台表单验证" class="headerlink" title="效果五：前台表单验证"></a>效果五：前台表单验证</h4><ol><li><p>首先阻止点击登录button的默认提交表单事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span> = <span class="string">"login"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在methods里定义login方法并收集表单数据(即为未使用v-model绑定data的input添加data)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        name: <span class="string">''</span>, <span class="comment">// 用户名</span></span><br><span class="line">        code: <span class="string">''</span>, <span class="comment">// 短信验证码</span></span><br><span class="line">        captcha: <span class="string">''</span>, <span class="comment">// 图形验证码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在login里根据不同的登录方式对收集的数据进行检查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.loginWay) &#123;  <span class="comment">// 短信登陆</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.rightPhone) &#123;</span><br><span class="line"><span class="comment">// 手机号不正确</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="regexp">/^\d&#123;6&#125;$/</span>.test(code)) &#123;</span><br><span class="line">        <span class="comment">// 验证必须是6位数字</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">// 密码登陆</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要将验证失败的提示信息显示出来，可以使用自定义AlertTip弹窗组件(开发中可以用第三方插件)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AlertTip <span class="keyword">from</span> <span class="string">'../../components/AlertTip/AlertTip.vue'</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">...</span><br><span class="line">components: &#123;</span><br><span class="line">    AlertTip</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为AlertTip定义状态数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        alertText: <span class="string">''</span>, <span class="comment">// 提示文本</span></span><br><span class="line">        alertShow: <span class="literal">false</span>, <span class="comment">// 是否显示警告框</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在页面中放置弹窗组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">AlertTip</span> <span class="attr">:alertText</span>=<span class="string">"alertText"</span> <span class="attr">v-show</span>=<span class="string">"alertShow"</span> @<span class="attr">closeTip</span>=<span class="string">"closeTip"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>抽取显示弹窗和关闭弹窗的方法，并在login方法和AlertTip中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">showAlert (alertText) &#123;</span><br><span class="line"><span class="keyword">this</span>.alertShow = <span class="literal">true</span></span><br><span class="line"><span class="keyword">this</span>.alertText = alertText</span><br><span class="line">&#125;,</span><br><span class="line">closeTip () &#123;</span><br><span class="line"><span class="keyword">this</span>.alertShow = <span class="literal">false</span></span><br><span class="line"><span class="keyword">this</span>.alertText = <span class="string">''</span></span><br><span class="line">&#125;,</span><br><span class="line">login () &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.loginWay) &#123;  <span class="comment">// 短信登陆</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.rightPhone) &#123;</span><br><span class="line"><span class="comment">// 手机号不正确</span></span><br><span class="line">            <span class="keyword">this</span>.showAlert(<span class="string">'手机号不正确'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="regexp">/^\d&#123;6&#125;$/</span>.test(code)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.showAlert(<span class="string">'验证必须是6位数字'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="功能一：图形验证码"><a href="#功能一：图形验证码" class="headerlink" title="功能一：图形验证码"></a>功能一：图形验证码</h3><ul><li><p>根据API文档，动态一次性图形验证码的接口为<code>http://localhost:4000/captcha</code></p></li><li><p>同时为这个img添加点击事件，让其可以点击重新发送请求，刷新图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"get_verification"</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/captcha"</span> <span class="attr">alt</span>=<span class="string">"captcha"</span> @<span class="attr">click</span>=<span class="string">"getCaptcha"</span> <span class="attr">ref</span>=<span class="string">"captcha"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>为这个img元素添加ref属性，方便在getCaptcha中使用</p></li><li><p>利用时间戳使其每次加载时的请求参数不一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getCaptcha () &#123;</span><br><span class="line"><span class="comment">// 每次指定的src要不一样</span></span><br><span class="line">    <span class="keyword">this</span>.$refs.captcha.src = <span class="string">'http://localhost:4000/captcha?time='</span>+<span class="built_in">Date</span>.now()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="功能二：短信验证码"><a href="#功能二：短信验证码" class="headerlink" title="功能二：短信验证码"></a>功能二：短信验证码</h4><ul><li><p>利用第三方短信验证码平台(容联云通讯)提供的接口来实现</p></li><li><p>先在服务端项目将自己的sid与token填入util文件夹下的sms_util.js文件</p></li><li><p>再在客户端的登录组件中引入接口请求函数(这是为了方便处理，同样也可以在action里调用)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reqSendCode, reqSmsLogin, reqPwdLogin&#125; <span class="keyword">from</span> <span class="string">'../../api'</span></span><br></pre></td></tr></table></figure></li><li><p>在getCode方法里进行调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求返回的是promise对象，所以用到了async await</span></span><br><span class="line"><span class="keyword">async</span> getCode () &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 发送ajax请求(向指定手机号发送验证码短信)</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> reqSendCode(<span class="keyword">this</span>.phone)</span><br><span class="line">    <span class="keyword">if</span>(result.code===<span class="number">1</span>) &#123; <span class="comment">// 手机号验证失败</span></span><br><span class="line">    <span class="comment">// 显示提示</span></span><br><span class="line">        <span class="keyword">this</span>.showAlert(result.msg)</span><br><span class="line">        <span class="comment">// 停止计时</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.computeTime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.computeTime = <span class="number">0</span></span><br><span class="line">            clearInterval(<span class="keyword">this</span>.intervalId)</span><br><span class="line">            <span class="keyword">this</span>.intervalId = <span class="literal">undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只要手机号填写正确 短信验证码也可以在服务端的控制台中查看</span></span><br></pre></td></tr></table></figure><h3 id="功能三：短信与密码登录"><a href="#功能三：短信与密码登录" class="headerlink" title="功能三：短信与密码登录"></a>功能三：短信与密码登录</h3></li><li><p>在login方法里完成短信和密码登录的aiax请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> login () &#123;</span><br><span class="line">    <span class="keyword">let</span> result <span class="comment">// 保存登录成功后返回的数据</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 发送ajax请求短信登陆</span></span><br><span class="line">    result = <span class="keyword">await</span> reqSmsLogin(phone, code)</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 发送ajax请求密码登陆</span></span><br><span class="line">    result = <span class="keyword">await</span> reqPwdLogin(&#123;name, pwd, captcha&#125;)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击登录发送请求的同时停止计时器，然后将请求的结果进行处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> ...</span><br><span class="line"><span class="comment">// 停止计时</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.computeTime) &#123;</span><br><span class="line"><span class="keyword">this</span>.computeTime = <span class="number">0</span></span><br><span class="line">    clearInterval(<span class="keyword">this</span>.intervalId)</span><br><span class="line">    <span class="keyword">this</span>.intervalId = <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据结果数据处理</span></span><br><span class="line"><span class="keyword">if</span>(result.code===<span class="number">0</span>) &#123; <span class="comment">// 成功</span></span><br><span class="line"><span class="keyword">const</span> user = result.data</span><br><span class="line"> <span class="comment">// 将user信息保存到vuex的state</span></span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">    <span class="comment">// 去个人中心界面</span></span><br><span class="line">    <span class="keyword">this</span>.$router.replace(<span class="string">'/profile'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 显示新的图片验证码</span></span><br><span class="line">    <span class="keyword">this</span>.getCaptcha()</span><br><span class="line">    <span class="comment">// 显示警告提示</span></span><br><span class="line">    <span class="keyword">const</span> msg = result.msg</span><br><span class="line">    <span class="keyword">this</span>.showAlert(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试用的用户名: abc，密码: 123。</p></li></ul><h3 id="功能四：获取用户信息-实现自动登陆"><a href="#功能四：获取用户信息-实现自动登陆" class="headerlink" title="功能四：获取用户信息,实现自动登陆"></a>功能四：获取用户信息,实现自动登陆</h3><p><strong>1. 将用户信息保存到vuex</strong></p><ol><li><p>在state中添加用户信息的状态数据userInfo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userInfo: &#123;&#125; <span class="comment">// 用户信息</span></span><br></pre></td></tr></table></figure></li><li><p>在mutation-types中定义常量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_USER_INFO = <span class="string">'receive_user_info'</span> <span class="comment">// 接收用户信息</span></span><br></pre></td></tr></table></figure></li><li><p>在mutations文件中增加改变state的方法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//先import引入RECEIVE_USER_INFO</span></span><br><span class="line">  [RECEIVE_USER_INFO] (state, &#123;userInfo&#125;) &#123;</span><br><span class="line">  state.userInfo = userInfo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在actions文件中增加同步用户信息的方法</p><ul><li>因为之前已经异步获取了用户信息，所以这里将用户信息state更新的操作是同步的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要先引入RECEIVE_USER_INFO这个mutation</span></span><br><span class="line"><span class="comment">// 同步记录用户信息</span></span><br><span class="line">  recordUser (&#123;commit&#125;, userInfo) &#123;</span><br><span class="line">    commit(RECEIVE_USER_INFO, &#123;userInfo&#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>在Login组件中调用这个action</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将user保存到vuex的state</span></span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'recordUser'</span>,user)</span><br></pre></td></tr></table></figure></li><li><p>之后可以在个人中心Profile页面读取并显示用户信息userInfo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">...</span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapState([<span class="string">'userInfo'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"user-info-top"</span>&gt;</span>&#123;&#123;userInfo.name || '登录/注册'&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>2. 更新登录后的个人中心界面</strong></p><ul><li><p>使用用户名和密码登录时显示用户名和绑定的手机号信息</p></li><li><p>使用手机号登录时只需要显示手机号</p></li><li><p>根据用户是否登录来定义a标签不同的路由</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--userinfo路由对应的页面暂时未做--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"userInfo._id ? '/userinfo': '/login'"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-info"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"user-info-top"</span> <span class="attr">v-if</span>=<span class="string">"!userInfo.phone"</span> &gt;</span>&#123;&#123;userInfo.name || '登录/注册'&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-mobile-number"</span>&gt;</span>&#123;&#123;userInfo.phone || '暂无绑定手机号'&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>同时要注意首页Msite顶部的信息也要进行更改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"header_login"</span> <span class="attr">slot</span>=<span class="string">"right"</span> <span class="attr">:to</span>=<span class="string">"userInfo._id ? '/userinfo': '/login'"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"header_login_text"</span> <span class="attr">v-if</span>=<span class="string">"!userInfo._id"</span>&gt;</span></span><br><span class="line">          登录|注册</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果已经登录则显示一个icon--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"header_login_text"</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-yonghuming"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. 完成自动登录功能</strong></p></li><li><p>服务器端的routes文件夹下的index.js中已经定义了返回用户信息的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其中她将用户的userid取出来放入一个session会话中</span></span><br><span class="line">router.get(<span class="string">'/userinfo'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 取出userid</span></span><br><span class="line">  <span class="keyword">const</span> userid = req.session.userid</span><br><span class="line">  <span class="comment">// 查询</span></span><br><span class="line">  UserModel.findOne(&#123;<span class="attr">_id</span>: userid&#125;, _filter, <span class="function"><span class="keyword">function</span> (<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有, 返回错误提示</span></span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      <span class="comment">// 清除浏览器保存的userid的cookie</span></span><br><span class="line">      <span class="keyword">delete</span> req.session.userid</span><br><span class="line"></span><br><span class="line">      res.send(&#123;<span class="attr">code</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">'请先登陆'</span>&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果有, 返回user</span></span><br><span class="line">      res.send(&#123;<span class="attr">code</span>: <span class="number">0</span>, <span class="attr">data</span>: user&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>服务端的app.js中已经定义了这个用户登录的session会话的维持时间为24h</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.use(session(&#123;</span><br><span class="line">  secret: <span class="string">'12345'</span>,</span><br><span class="line">  cookie: &#123;<span class="attr">maxAge</span>: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span> &#125;,  <span class="comment">//设置maxAge是80000ms，即80s后session和相应的cookie失效过期</span></span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li><li><p>api中的对应接口已经完成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取用户信息(根据会话)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reqUserInfo = <span class="function"><span class="params">()</span> =&gt;</span> ajax(BASE_URL + <span class="string">'/userinfo'</span>)</span><br></pre></td></tr></table></figure></li><li><p>在action中定义一个方法来调用这个接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步获取用户信息(先引入reqUserInfo接口)</span></span><br><span class="line"><span class="keyword">async</span> getUserInfo (&#123;commit&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> reqUserInfo()</span><br><span class="line">    <span class="keyword">if</span> (result.code === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> userInfo = result.data</span><br><span class="line">      commit(RECEIVE_USER_INFO, &#123;userInfo&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>最后在App.vue中引入action并触发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> mounted () &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// this.getAddress()</span></span><br><span class="line">    <span class="keyword">this</span>.getUserInfo()</span><br><span class="line">  &#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    ...mapActions([<span class="string">'getUserInfo'</span>])</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="功能五：退出登录"><a href="#功能五：退出登录" class="headerlink" title="功能五：退出登录"></a>功能五：退出登录</h3><ul><li><p>用户登录后在个人中心页面添加一个退出登录的按钮</p></li><li><p>下载安装mint-ui来实现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装mint-ui</span><br><span class="line">npm install --save mint-ui</span><br></pre></td></tr></table></figure></li><li><p>实现自动按需打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装工具包</span><br><span class="line">npm install --save-dev babel-pulgin-component</span><br></pre></td></tr></table></figure></li><li><p>修改.babeirc</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置</span></span><br><span class="line"><span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>,[<span class="string">"component"</span>, [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"libraryName"</span>: <span class="string">"mint-ui"</span>,</span><br><span class="line"><span class="string">"style"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">]]]</span><br></pre></td></tr></table></figure></li><li><p>引入并注册使用mint-ui的标签组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在入口的main.js引入Button</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line">Vue.component(Button.name, Button)</span><br></pre></td></tr></table></figure></li><li><p>在Profile页面中使用mint-ui的标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"profile_my_order border-1px"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只有用户登录之后才会显示 同时绑定点击事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mt-button</span> <span class="attr">type</span>=<span class="string">"danger"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span> <span class="attr">v-if</span>=<span class="string">"userInfo._id"</span> @<span class="attr">click</span>=<span class="string">"logout"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">mt-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引入mint-ui的confirm确认和toast文本提示框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MessageBox, Toast &#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span></span><br><span class="line"></span><br><span class="line">logout () &#123;</span><br><span class="line">MessageBox.confirm(<span class="string">'确认退出吗?'</span>).then(</span><br><span class="line">action =&gt; &#123;</span><br><span class="line">         <span class="comment">// 请求退出</span></span><br><span class="line">         <span class="keyword">this</span>.$store.dispatch(<span class="string">'logout'</span>)</span><br><span class="line">         Toast(<span class="string">'登出完成'</span>)</span><br><span class="line">         &#125;,</span><br><span class="line">action =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'取消登录'</span>)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在actions.js中定义退出登录的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先引入api的index.js中定义的reqLogout接口和mutation</span></span><br><span class="line"><span class="comment">// 异步登出</span></span><br><span class="line"><span class="keyword">async</span> logout (&#123;commit&#125;) &#123;</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> reqLogout()</span><br><span class="line"><span class="keyword">if</span> (result.code === <span class="number">0</span>) &#123; commit(RESET_USER_INFO)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同时改动下列两个文件</span></span><br><span class="line"><span class="comment">//mutations-types文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RESET_USER_INFO = <span class="string">'receive_user_info'</span> <span class="comment">// 重置用户信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mutations文件</span></span><br><span class="line">[RESET_USER_INFO] (state) &#123;</span><br><span class="line">    state.userInfo = &#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue实战项目外卖3&quot;&gt;&lt;a href=&quot;#vue实战项目外卖3&quot; class=&quot;headerlink&quot; title=&quot;vue实战项目外卖3&quot;&gt;&lt;/a&gt;vue实战项目外卖3&lt;/h1&gt;&lt;h2 id=&quot;实现登陆注册功能&quot;&gt;&lt;a href=&quot;#实现登陆注册功能&quot; cla
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>demo_vue-shop2</title>
    <link href="http://yoursite.com/2018/11/11/vue-shop2/"/>
    <id>http://yoursite.com/2018/11/11/vue-shop2/</id>
    <published>2018-11-11T09:30:09.000Z</published>
    <updated>2018-11-16T12:24:13.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue实战项目外卖2"><a href="#vue实战项目外卖2" class="headerlink" title="vue实战项目外卖2"></a>vue实战项目外卖2</h1><h2 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a>ajax请求</h2><p><strong>问题分析：</strong></p><ul><li>目前为止运行的所有页面都是静态页面</li><li>接下来先测试使用封装的ajax接口请求函数来异步获取数据</li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先在App.vue中引入封装的接口函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;reqCategorys&#125; <span class="keyword">from</span> <span class="string">'./api'</span></span><br><span class="line"><span class="comment">// 然后再调用接口，测试打印数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> mounted () &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> reqCategorys()</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    FooterGuide</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   报错了，跨域问题。8080的端口在请求4000端口的数据，然后在api文件夹下的index.js中修改测试</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义BASE_URL</span></span><br><span class="line"><span class="keyword">const</span> BASE_URL = <span class="string">'http://local:4000'</span></span><br><span class="line"><span class="comment">// 然后修改请求接口的url</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reqCategorys = <span class="function"><span class="params">()</span> =&gt;</span> ajax(BASE_URL + <span class="string">'/index_category'</span>)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>跨域是浏览器的限制。解决办法：1.服务器告诉浏览器允许跨域 2.蒙蔽浏览器的双眼</p></blockquote><p><strong>配置代理并测试接口：</strong></p><ul><li>除了设置让服务器允许跨域的方法之外，还可以通过配置代理实现跨域请求</li></ul><ol><li><p>在项目config文件夹下的index.js文件里设置代理配置表</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Paths</span></span><br><span class="line"> <span class="comment">// 静态资源文件夹</span></span><br><span class="line"> assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line"> <span class="comment">// 发布路径</span></span><br><span class="line">assetsPublicPath: <span class="string">'/'</span>,</span><br><span class="line"><span class="comment">// 代理配置表，在这里可以配置特定的请求代理到对应的API接口</span></span><br><span class="line"><span class="comment">// 例如将'localhost:8080/api/xxx'代理到'www.example.com/api/xxx'</span></span><br><span class="line">proxyTable: &#123;</span><br><span class="line"> <span class="string">'/api'</span>: &#123; <span class="comment">// 匹配所有以 '/api'开头的请求路径</span></span><br><span class="line">target: <span class="string">'http://localhost:4000'</span>,</span><br><span class="line"><span class="comment">// 代理目标的基础路径</span></span><br><span class="line">  <span class="comment">// secure: false,</span></span><br><span class="line">  <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">  changeOrigin: <span class="literal">true</span>, <span class="comment">// 支持跨域</span></span><br><span class="line">  pathRewrite: &#123; <span class="comment">// 重写路径: 去掉路径中开头的'/api'</span></span><br><span class="line">    <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li><li><p>修改api文件夹index.js里接口函数的请求路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const BASE_URL = 'http://local:4000'</span></span><br><span class="line"><span class="keyword">const</span> BASE_URL = <span class="string">'/api'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reqAddress = <span class="function"><span class="params">geohash</span> =&gt;</span> ajax(<span class="string">`<span class="subst">$&#123;BASE_URL&#125;</span>/position/<span class="subst">$&#123;geohash&#125;</span>`</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reqCategorys = <span class="function"><span class="params">()</span> =&gt;</span> ajax(BASE_URL + <span class="string">'/index_category'</span>)</span><br><span class="line"><span class="comment">// 下面修改后的接口省略...</span></span><br></pre></td></tr></table></figure></li><li><p>因为修改了项目的config文件，所以需要重启项目<code>npm run dev</code></p></li><li><p>此时可以在控制台看到跨域请求到的数据<code>{code: 0, data: Array(16)}</code></p></li></ol><h2 id="vuex管理状态"><a href="#vuex管理状态" class="headerlink" title="vuex管理状态"></a>vuex管理状态</h2><ul><li>安装Vuex<code>npm install vuex --save</code>用来管理从后台获取的状态数据</li><li>以下代码以首页Msite为例</li></ul><h3 id="11-1-创建Store-核心仓库"><a href="#11-1-创建Store-核心仓库" class="headerlink" title="11.1 创建Store(核心仓库)"></a>11.1 创建Store(核心仓库)</h3><ul><li><p>在项目的store文件夹下新建index.js</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">vuex最核心的管理对象store</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 首先引入Vue及Vuex</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">// 引入四个基本模块</span></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></span><br><span class="line"><span class="comment">// 一定要声明使用插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="comment">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state,</span><br><span class="line">mutations,</span><br><span class="line">actions,</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="模块对象"><a href="#模块对象" class="headerlink" title="模块对象"></a>模块对象</h3><ul><li>状态对象 state</li><li>操作state 直接更新state的多个方法对象 mutations</li><li>操作mutations 间接更新state的多个方法对象 actions</li><li>包含多个基于state的getter计算属性的对象 getters</li><li>包含n个mutations的type名称常量 mutations-type</li></ul><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><ul><li>分析整理出项目首页Msite中有哪些状态需要管理，然后写入state.js</li><li><p>在之前应该定位，这里直接保存当前状态</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">状态对象 state</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> latitude: <span class="number">40.10038</span>, <span class="comment">// 纬度</span></span><br><span class="line"> longitude: <span class="number">116.36867</span>, <span class="comment">// 经度</span></span><br><span class="line"> address: &#123;&#125;, <span class="comment">// 地址相关信息对象</span></span><br><span class="line"> categorys: [], <span class="comment">// 食品分类数组</span></span><br><span class="line">  shops: [] <span class="comment">// 商家数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><ul><li><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation</p></li><li><p>每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong></p></li><li><p>我们可以使用常量替代 Mutation 事件类型，新建<strong>mutations-types文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">包含n个mutation的type名称常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_ADDRESS = <span class="string">'receive_address'</span> <span class="comment">// 接收地址信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_CATEGORYS = <span class="string">'receive_categorys'</span> <span class="comment">// 接收分类数组</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_SHOPS = <span class="string">'receive_shops'</span> <span class="comment">// 接收商家数组</span></span><br></pre></td></tr></table></figure></li><li><p>然后在mutations.js文件内引入使用 <strong>(注意书写格式[ ])</strong></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   vuex 的 mutations 模块</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">import</span> &#123;RECEIVE_ADDRESS,RECEIVE_CATEGORYS,RECEIVE_SHOPS&#125; <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// [方法名](state,&#123;param&#125;)&#123;&#125;</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    [RECEIVE_ADDRESS](state, &#123;address&#125;) &#123;</span><br><span class="line">state.address = address</span><br><span class="line">&#125;,</span><br><span class="line">[RECEIVE_CATEGORYS](state, &#123;categorys&#125;) &#123;</span><br><span class="line">state.categorys = categorys</span><br><span class="line">&#125;,</span><br><span class="line">[RECEIVE_SHOPS](state, &#123;shops&#125;) &#123;</span><br><span class="line">state.shops = shops</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>而回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数</p></li></ul><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><ul><li>和后台交互的异步action，</li></ul><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li><p>Action 可以包含任意异步操作。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Action:通过操作mutation间接更新state的多个方法的对象</span></span><br><span class="line">  <span class="comment">// 注意要引入api接口函数</span></span><br><span class="line">  <span class="keyword">import</span> &#123;reqAddress, reqCategorys, reqShops&#125; <span class="keyword">from</span> <span class="string">'../api'</span></span><br><span class="line">  <span class="keyword">import</span> &#123;RECEIVE_ADDRESS, RECEIVE_CATEGORYS, RECEIVE_SHOPS&#125; <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异步获取地址</span></span><br><span class="line">  <span class="keyword">async</span> getAddress (&#123;commit, state&#125;) &#123;</span><br><span class="line">  <span class="comment">// 从state状态中获取到经纬度用来设置reqAddress的参数（看接口文档）</span></span><br><span class="line">  <span class="keyword">const</span> geohash = state.latitude + <span class="string">','</span> + state.longitude</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 发送异步ajax请求</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> reqAddress(geohash)</span><br><span class="line">  <span class="comment">// 2. 根据结果提交一个mutation</span></span><br><span class="line">  <span class="comment">//因为mutation.js里面的函数接收的参数是&#123;address&#125;</span></span><br><span class="line">  commit(RECEIVE_ADDRESS, &#123;<span class="attr">address</span>: result.data&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 异步获取分类列表</span></span><br><span class="line"><span class="keyword">async</span> getCategorys (&#123;commit&#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> reqCategorys()</span><br><span class="line">  commit(RECEIVE_CATEGORYS, &#123;<span class="attr">categorys</span>: result.data&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 异步获取商家列表</span></span><br><span class="line"><span class="keyword">async</span> getShops (&#123;commit, state&#125;) &#123;</span><br><span class="line">  <span class="comment">// 对象的解构赋值</span></span><br><span class="line">  <span class="keyword">const</span> &#123;latitude, longitude&#125; = state</span><br><span class="line">  <span class="comment">// 注意参数的顺序</span></span><br><span class="line">  <span class="keyword">const</span> result = aowait reqShops(&#123;latitude, longitude&#125;)</span><br><span class="line">  commit(RECEIVE_SHOPS, &#123;<span class="attr">shops</span>: result.data&#125;)</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>至此已经完成了首页状态数据的vuex设置</p></li></ul><h3 id="异步获取并显示数据"><a href="#异步获取并显示数据" class="headerlink" title="异步获取并显示数据"></a>异步获取并显示数据</h3><ol><li><p>在项目中注册store</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//项目的main.js文件</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>测试异步<strong>获取</strong>当前地址数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 地址信息要尽早的获取，所以请求可以写在App.vue中</span></span><br><span class="line"><span class="comment">// 首先删除之前测试使用封装的ajax接口的代码</span></span><br><span class="line"><span class="keyword">async</span> mounted () &#123;</span><br><span class="line">    <span class="comment">// 通过this.$store.dispatch 方法触发调用Action</span></span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">'getAddress'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行项目，在浏览器控制台里打开vue开发工具，切换到vuex，可以看到通过vuex异步获取的状态数据</li><li>除了这种方法调用action，还可以使用mapActions语法糖</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.getAddress()</span><br><span class="line">&#125;</span><br><span class="line">methods: &#123;</span><br><span class="line">...mapActions([<span class="string">'getAddress'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>读取</strong>并显示获取到的当前地址数据</p><ul><li>首页Msite组件中显示地址信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用mapState语法糖去读取state对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">...mapState([<span class="string">'address'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;HeaderTop :title=<span class="string">"address.name"</span>&gt;</span><br><span class="line"><span class="comment">// 将静态地址信息换成异步获取的地址数据 注意:title为绑定数据</span></span><br><span class="line">&lt;<span class="regexp">/HeaderTop&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="完成Msite页面"><a href="#完成Msite页面" class="headerlink" title="完成Msite页面"></a>完成Msite页面</h2><h3 id="异步显示食品分类轮播列表"><a href="#异步显示食品分类轮播列表" class="headerlink" title="异步显示食品分类轮播列表"></a>异步显示食品分类轮播列表</h3><ul><li>上面已经完成了首页当前地址信息的获取与显示，接下来是完成Msite.vue中的食品分类的轮播图</li></ul><ol><li><p>mounted方法中通过this.$store.dispatch调用Action来获取异步数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 忘记Actuon里对应的方法名时查看Action.js</span></span><br><span class="line">mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">'getCategorys'</span>)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过mapState语法糖来读取获取到的异步数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 忘记state名时查看State.js</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapState([<span class="string">'address'</span>, <span class="string">'categorys'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分析template结构并处理categorys数据</p><p>轮播图应该在数组数据显示之后才能显示</p><blockquote><p>业务分析： 此时获取到的categorys是所有食品类别的一维数组，而如果要完成轮播图，需要将其变成这种<code>[[page1], [page2], [page3]]</code>二维数组categorysArr。</p></blockquote><blockquote><p>比如本项目中有两页轮播图，一页为8个数据。应该把categorys数组处理成<code>[[data1 - 8], [data1 - 8]]</code>这种数据格式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//template</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span> <span class="attr">v-for</span>=<span class="string">"(pages,index) in categorysArr"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:"</span> <span class="attr">class</span>=<span class="string">"(data,index) in pages"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>利用计算属性将categorys处理成期望的数据结构categorysArr</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">computed () &#123;</span><br><span class="line">    ...mapState([<span class="string">'address'</span>, <span class="string">'categorys'</span>]),</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    根据categorys一维数组生成一个2维数组</span></span><br><span class="line"><span class="comment">    小数组中的元素个数最大是8</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    categorysArr () &#123;</span><br><span class="line">      <span class="comment">// 1.先从当前组件中得到所有食品分类的一维数组</span></span><br><span class="line">      <span class="keyword">const</span> &#123;categorys&#125; = <span class="keyword">this</span></span><br><span class="line">      <span class="comment">// 2.准备一个空的二维数组--categorysArr</span></span><br><span class="line">      <span class="keyword">const</span> arr = []</span><br><span class="line">      <span class="comment">// 3.准备一个小数组--pages(最大长度为8)</span></span><br><span class="line">      <span class="keyword">let</span> minArr = []</span><br><span class="line">      <span class="comment">// 4.遍历categorys得到处理后的二维数组catagorysArr</span></span><br><span class="line">      categorys.forEach(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 如果当前小数组(pages)已经满了, 创建一个新的</span></span><br><span class="line">        <span class="keyword">if</span> (minArr.length === <span class="number">8</span>) &#123;</span><br><span class="line">          minArr = []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果minArr是空的, 将小数组(pages)保存到大数组(categorysArr)中</span></span><br><span class="line">        <span class="keyword">if</span> (minArr.length === <span class="number">0</span>) &#123;</span><br><span class="line">          arr.push(minArr)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将当前分类信息保存到小数组(pages)中</span></span><br><span class="line">        minArr.push(data)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意第4步forEach里的逻辑顺序</p><p>1.为什么当minArr数组的长度为0时就将它与大数组关联起来，不是等它存满(8个)？</p><p>因为有可能categorys里的数据个数不为8的倍数，最后一个minArr内的数据不足8个。</p><p>2.为什么先判断minArr的长度为8的情况再判断等于0的情况？</p><p>因为先判断minArr的长度为0，将其放入大数组中与大数组关联起来，那么等到当前这个minArr填充完成之后新建的小数组则无法与大数组关联起来。</p><p>所以先判断长度为8的情况，再判断数组长度为0的情况。就可以确保之前的minArr填充完成后，新建的minArr都可以被放到大数组里与大数组关联起来。</p></blockquote><ul><li><p>除了上面的方式处理categorys，也可以采用分割数组的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">categorysArr () &#123;</span><br><span class="line"><span class="keyword">const</span> &#123;categorys&#125; = <span class="keyword">this</span></span><br><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>,len = categorys.length;i &lt; len; i += <span class="number">8</span>)&#123;</span><br><span class="line">    arr.push(categorys.slice(i, i + <span class="number">8</span>))</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="4"><li><p>将数据显示到页面上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为食品分类的图片信息都有一个baseImageUrl所以在data里定义</span></span><br><span class="line">data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      baseImageUrl: <span class="string">'https://fuss10.elemecdn.com'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过v-for循环渲染data的信息 注意src为绑定数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span> <span class="attr">v-for</span>=<span class="string">"(pages,index) in categorysArr"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:"</span> <span class="attr">class</span>=<span class="string">"link_to_food"</span> <span class="attr">v-for</span>=<span class="string">"(data,index) in pages"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"food_container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"baseImageUrl+data.image_url"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;data.title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="使用watch与-nextTick解决轮播的Bug"><a href="#使用watch与-nextTick解决轮播的Bug" class="headerlink" title="使用watch与$nextTick解决轮播的Bug"></a>使用watch与$nextTick解决轮播的Bug</h3><ul><li><p>分页器Swiper其实应该是在轮播列表显示(即categorys数组有了数据)以后才初始化。</p></li><li><p>最开始categorys为空数组，有了数据才会显示轮播列表，而要监视categorys的数据变化，就要用到<strong>watch</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建watch 监听categorys</span></span><br><span class="line">watch: &#123;</span><br><span class="line">    categorys (value) &#123; <span class="comment">// categorys数组中有数据了</span></span><br><span class="line">    <span class="comment">// 但界面还没有异步更新</span></span><br><span class="line">    <span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>, &#123;</span><br><span class="line">          autoplay: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// 如果需要分页器</span></span><br><span class="line">          pagination: &#123;</span><br><span class="line">            el: <span class="string">'.swiper-pagination'</span>,</span><br><span class="line">            clickable: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除mounted中的new Swiper...代码</span></span><br></pre></td></tr></table></figure></li><li><p>但其实<strong>state里的状态数据改变（categorys接收数据）与异步更新界面（显示轮播列表）是两个步骤</strong>。所以需要等一等，界面完成异步更新后才可以进行Swiper的初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用setTimeout可以实现效果, 但是时机不准确</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 创建一个Swiper实例对象, 来实现轮播</span></span><br><span class="line"><span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>, &#123;</span><br><span class="line">          autoplay: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// 如果需要分页器</span></span><br><span class="line">          pagination: &#123;</span><br><span class="line">            el: <span class="string">'.swiper-pagination'</span>,</span><br><span class="line">            clickable: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></li><li><p>利用<code>vm.$nextTick( [callback] )</code>来实现等待界面完成异步更新就立即创建Swiper对象</p></li><li>nextTick将回调延迟到下次DOM更新循环之后执行</li><li><p>在修改数据之后立即使用它，然后等待DOM更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在修改数据之后立即使用它，然后等待 DOM 更新。</span></span><br><span class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 一旦完成界面更新, 立即执行回调</span></span><br><span class="line">    <span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>, &#123;</span><br><span class="line">    autoplay: <span class="literal">true</span>,</span><br><span class="line">    pagination: &#123;</span><br><span class="line">    el: <span class="string">'.swiper-pagination'</span>,</span><br><span class="line">    clickable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="异步显示商家列表"><a href="#异步显示商家列表" class="headerlink" title="异步显示商家列表"></a>异步显示商家列表</h3><ol><li><p>在Msite的mounted中获取异步数据</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'getShops'</span>)</span><br></pre></td></tr></table></figure></li><li><p>在ShopList.vue中引入mapState，在computed中读取状态数据</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> computed: &#123;</span><br><span class="line">...mapState([<span class="string">'shops'</span>])</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>修改template并添加data</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   data () &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">     baseImgUrl: <span class="string">'http://owoccema2.bkt.clouddn.com/show/MintShop/'</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"shop_li border-1px"</span> <span class="attr">v-for</span>=<span class="string">"(shop,index) in shops"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shop_left"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"shop_img"</span> <span class="attr">:src</span>=<span class="string">"baseImgUrl + shop.image_path"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shop_right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"shop_detail_header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"shop_title ellipsis"</span>&gt;</span>&#123;&#123;shop.name&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"shop_detail_ul"</span>&gt;</span></span><br><span class="line">               ...</span><br><span class="line">             <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"shop_rating_order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"shop_rating_order_left"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="开发评分Star组件"><a href="#开发评分Star组件" class="headerlink" title="开发评分Star组件"></a>开发评分Star组件</h3><ul><li>不仅在首页的商家列表中有五颗星星的评分部分，商家信息的评价区域也有star评分，所以可以把它抽取成一个可复用的一般组件。</li></ul><ol><li><p>在components文件夹下新建Star文件夹，然后将原本在ShopList文件夹下的images文件夹里的stars移动到新建的Star文件夹里并重命名为images</p></li><li><p>在Star文件夹里新建Star.vue并将ShopList.vue中评分部分的模版和样式剪切进去，注意修改图片路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"star star-24"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"star-item on"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"star-item on"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"star-item on"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"star-item half"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"star-item off"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>根据类名为组件设置属性props和计算属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类名常量</span></span><br><span class="line"><span class="keyword">const</span> CLASS_ON = <span class="string">'on'</span></span><br><span class="line"><span class="keyword">const</span> CLASS_HALF = <span class="string">'half'</span></span><br><span class="line"><span class="keyword">const</span> CLASS_OFF = <span class="string">'off'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    score: <span class="built_in">Number</span>,</span><br><span class="line">    size: <span class="built_in">Number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    3.2: 3 + 0 + 2</span></span><br><span class="line"><span class="comment">    4.7: 4 + 1 + 0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 该方法产生一个数组starArr来表示on half off类名的span数量（总长度为5）</span></span><br><span class="line">    starClasses () &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;score&#125; = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">const</span> starArr = []</span><br><span class="line">      <span class="comment">// 向starArr中添加n个CLASS_ON</span></span><br><span class="line">      <span class="keyword">const</span> scoreInteger = <span class="built_in">Math</span>.floor(score)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; scoreInteger; i++) &#123;</span><br><span class="line">        starArr.push(CLASS_ON)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 向starArr中添加0/1个CLASS_HALF</span></span><br><span class="line">      <span class="keyword">if</span>(score*<span class="number">10</span>-scoreInteger*<span class="number">10</span>&gt;=<span class="number">5</span>) &#123;</span><br><span class="line">        starArr.push(CLASS_HALF)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 向starArr中添加n个CLASS_OFF</span></span><br><span class="line">      <span class="keyword">while</span>(starArr.length&lt;<span class="number">5</span>) &#123;</span><br><span class="line">        starArr.push(CLASS_OFF)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> starArr</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改template模版</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"star"</span> <span class="attr">:class</span>=<span class="string">"'star-'+size"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"star-item"</span> <span class="attr">v-for</span>=<span class="string">"(sc, index) in starClasses"</span> <span class="attr">:class</span>=<span class="string">"sc"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在ShopList中import引入并注册使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Star</span> <span class="attr">:score</span>=<span class="string">"shop.rating"</span> <span class="attr">:size</span>=<span class="string">"24"</span>&gt;</span><span class="tag">&lt;/<span class="name">Star</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="使用svg显示页面加载中提示界面"><a href="#使用svg显示页面加载中提示界面" class="headerlink" title="使用svg显示页面加载中提示界面"></a>使用svg显示页面加载中提示界面</h3><ul><li><p>目前首页的内容数据已经可以异步获取并显示，但在数据还未加载完成时，为了优化用户体验，应该给出页面加载中的提示界面。</p></li><li><p>首先将svg资源图片放入相应的Msite和ShopList的images文件夹里</p></li><li><p>然后修改模版的显示条件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Msite--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span> <span class="attr">v-if</span>=<span class="string">"categorys.length"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//没有数据的时候显示图片</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/msite_back.svg"</span> <span class="attr">alt</span>=<span class="string">"back"</span> <span class="attr">v-else</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ShopList--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"shop_list"</span> <span class="attr">v-if</span>=<span class="string">"shops.length"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 循环显示6个svg图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in 6"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/shop_back.svg"</span> <span class="attr">alt</span>=<span class="string">"back"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue实战项目外卖2&quot;&gt;&lt;a href=&quot;#vue实战项目外卖2&quot; class=&quot;headerlink&quot; title=&quot;vue实战项目外卖2&quot;&gt;&lt;/a&gt;vue实战项目外卖2&lt;/h1&gt;&lt;h2 id=&quot;ajax请求&quot;&gt;&lt;a href=&quot;#ajax请求&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vuex</title>
    <link href="http://yoursite.com/2018/11/11/vuex/"/>
    <id>http://yoursite.com/2018/11/11/vuex/</id>
    <published>2018-11-11T06:38:13.000Z</published>
    <updated>2018-11-11T07:03:41.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><p>主要是状态管理，将数据统一管理(state)</p><p> <img src="/img/vue/liucheng.jpg" alt="流程图"></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul><li>状态对象 stat</li><li>操作state 直接更新state的多个方法对象 mutations</li><li>操作mutations 间接更新state的多个方法对象 actions</li><li>包含多个基于state的getter计算属性的对象 getters</li><li>包含n个mutations的type名称常量 mutations-type</li></ul><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>共享的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const state=&#123;&#125;;</span><br></pre></td></tr></table></figure></p><p>建立统一数据容器，唯一的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let store = new Vuex.Store(&#123;</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>store(容器)注册到实例上，main.js里面，所有的组件都会有一个属性this.$store<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">store,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在组件中使用，加不加this都一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;this.$store.state.XXX&#125;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="state-单向数据流"><a href="#state-单向数据流" class="headerlink" title="state(单向数据流)"></a>state(单向数据流)</h2><p> 注意,在组件中最好不要直接更改共享的数据，共享的数据仅仅给组件染</p><h2 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h2><p> 通过mutation(管理员)来更改状态，可以在store里面设置成严格模式<br> <code>strict：true</code>，mutation不支持异步</p><ol><li><p>告诉mutations需要更改,mutations相当于methods</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations=&#123;</span><br><span class="line">    add(state,count)&#123;</span><br><span class="line">        <span class="comment">//state是自动放入的，默认指的就是当前的state</span></span><br><span class="line">        <span class="comment">//操作state的属性</span></span><br><span class="line">        state.XXX +=count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state，</span><br><span class="line">mutations,</span><br><span class="line">strict：<span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件通过mutations提交,第一个参数是与mutatioons里面的方法绑定，第二个参数是自定义参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.commit(&apos;add&apos;,2)</span><br></pre></td></tr></table></figure></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>打印日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import logger from &apos;vuex/dist/logger&apos;</span><br><span class="line">const store = new Vuex.store(&#123;</span><br><span class="line">    plugins:[logger()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><p>src下面创建一个store文件\index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span></span><br><span class="line"><span class="keyword">const</span> state=&#123;&#125;;</span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state，</span><br><span class="line">    mutations,</span><br><span class="line">    strict：<span class="literal">true</span>,</span><br><span class="line">    plugins:[logger()]</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>store下面再创建一个mutations.js,里面存放mutations的相关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import * as Types from &apos;mutations.types.js&apos;</span><br><span class="line">const mutations = &#123;</span><br><span class="line"> // [方法名](state,&#123;param&#125;)&#123;&#125;</span><br><span class="line">[Types.INCREMENT](state)&#123;</span><br><span class="line">   state.count+=1</span><br><span class="line">&#125;,</span><br><span class="line">[Types.DECREMENT](state)&#123;</span><br><span class="line">    state.count-=1</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default mutations;</span><br></pre></td></tr></table></figure></p><p>宏(一般大写)<br>store下面再创建一个mutations.types.js里面存放mutations的方法的名字，方便查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//增加</span><br><span class="line">export const INCREMENT=&apos;INCREMENT&apos;</span><br><span class="line">//减少</span><br><span class="line">export const DECREMENT=&apos;DECREMENT&apos;</span><br></pre></td></tr></table></figure></p><p>组件中引入同mutations.js中引入一样,只不过不加中括号<br>import * as Types from ‘mutations.types.js’</p><p>Types.INCREMENT<br>Types.DECREMENT</p><h2 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h2><p>相当于computed,如果数据多了可以模仿mutations的抽离<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const getters=&#123;</span><br><span class="line"> val(state)&#123;</span><br><span class="line"> state.count%2?&apos;奇数&apos;:&apos;偶数&apos;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default new Vuex.store(&#123;</span><br><span class="line">getters,</span><br><span class="line">&#125;)</span><br><span class="line">//引用时</span><br><span class="line">&#123;&#123;$store.getters.val&#125;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h2><ul><li>和后台交互的异步action，后台数据也需要修改</li></ul><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><ol><li>引入api以及mutation-types</li><li><p>异步获取数据</p><ul><li>异步获取地址</li><li>发送异步ajax请求</li><li><p>提交一个mutation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> //async 方法名(&#123;commit,参数可选&#125;&#123;&#125;)</span><br><span class="line">// 异步获取地址</span><br><span class="line"> async getAddress (&#123;commit, state&#125;) &#123;</span><br><span class="line"> // 从state状态中获取到经纬度用来设置reqAddress的参数（看接口文档）</span><br><span class="line"> const geohash = state.latitude + &apos;,&apos; + state.longitude</span><br><span class="line"> // 1. 发送异步ajax请求</span><br><span class="line"> const result = await reqAddress(geohash)</span><br><span class="line"> // 2. 根据结果提交一个mutation</span><br><span class="line"> commit(RECEIVE_ADDRESS, &#123;address: result.data&#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vuex&quot;&gt;&lt;a href=&quot;#vuex&quot; class=&quot;headerlink&quot; title=&quot;vuex&quot;&gt;&lt;/a&gt;vuex&lt;/h1&gt;&lt;p&gt;主要是状态管理，将数据统一管理(state)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/img/vue/liucheng.jpg
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>demo_vue-shop1</title>
    <link href="http://yoursite.com/2018/10/30/vue-shop1/"/>
    <id>http://yoursite.com/2018/10/30/vue-shop1/</id>
    <published>2018-10-30T11:52:29.000Z</published>
    <updated>2018-10-30T11:18:53.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue实战项目外卖1"><a href="#vue实战项目外卖1" class="headerlink" title="vue实战项目外卖1"></a>vue实战项目外卖1</h1><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>前段数据处理/交互/组件化</p><ul><li>vue全家桶/技术栈<ul><li>vue</li><li>vue-router</li><li>vuex</li><li>mint-ui</li><li>vue-lazyload</li><li>vue-scroller</li></ul></li><li>滑动库<ul><li>vue-scroller</li><li>better-scroll</li><li>swiper</li></ul></li><li>日期处理<ul><li>moment</li><li>date-fns</li></ul></li></ul><p>前后台交互</p><ul><li>mock数据：mockjs</li><li>接口测试：postman</li><li>ajax请求 axios</li></ul><p>模块化</p><ul><li>ES6</li><li>babel</li></ul><p>项目构建/工程化</p><ul><li>webpack</li><li>vue-cli</li></ul><p>css预编译器</p><ul><li>stylus</li></ul><p>后台</p><ul><li>node</li><li>express</li><li>mongodb</li></ul><h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><p>一级路由</p><ul><li>首页  /miste Miste.vue</li><li>搜索  /search Search.vue</li><li>订单  /order Order.vue</li><li>个人  /profile Profile.vue</li><li>登陆  /login  Login.vue(不适用底部导航)</li><li>商家  /shop  Shop.vue(不适用底部导航)</li></ul><p>二级导航</p><ul><li>商家商品 /goods ShopGoods.vue</li><li>商家评价 /ratings ShopRatings.vue</li><li>商家信息 /info  ShopInfo.vue</li></ul><h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><h3 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h3><ul><li>|– build : webpack 相关的配置文件夹(基本不需要修改)</li><li>|– config: webpack 相关的配置文件夹(基本不需要修改)<ul><li>index.js: 指定的后台服务的端口号和静态资源文件夹</li></ul></li><li>|– node_modules</li><li>|– src : 源码文件夹<ul><li>|– main.js: 应用入口 js  （初始化vue实例并使用需要的插件 ）</li></ul></li><li>|– static: 静态资源文件夹</li><li>|– .babelrc: babel 的配置文件</li><li>|– .editorconfig: 通过编辑器的编码/格式进行一定的配置</li><li>|– .eslintignore: eslint 检查忽略的配置</li><li>|– .eslintrc.js: eslint 检查的配置</li><li>|– .gitignore: git 版本管理忽略的配置</li><li>|– index.html: 默认的主渲染页面文件</li><li>|– package.json: 应用包配置文件</li><li>|– README.md: 应用描述说明的 readme 文件</li></ul><h3 id="编码测试与打包发布项目"><a href="#编码测试与打包发布项目" class="headerlink" title="编码测试与打包发布项目"></a>编码测试与打包发布项目</h3><ul><li>编码测试<br>npm run dev<br>访问: <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br>编码, 自动编译打包(HMR), 查看效果</li><li>打包发布<br>npm run build<br>//服务器管理<br>npm install -g serve<br>serve dist<br>访问: <a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a></li></ul><h3 id="字体图标准备"><a href="#字体图标准备" class="headerlink" title="字体图标准备"></a>字体图标准备</h3><p>使用阿里的图标库<a href="http://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2" target="_blank" rel="noopener">http://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2</a><br>生成的资源:<a href="http://at.alicdn.com/t/font_726904_68moeoeirj3.css" target="_blank" rel="noopener">http://at.alicdn.com/t/font_726904_68moeoeirj3.css</a></p><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><ul><li>src<ul><li>api 与后台交互模板文件夹</li><li>common 通用资源文件夹，如fonts/img/stylus</li><li>components 非路由组件文件夹</li><li>filters 自定义过滤器模块文件夹</li><li>mock 模拟数据接口文件夹</li><li>pages 路由组件文件夹</li><li>router 路由器文件夹</li><li>store vuex相关模块文件夹</li><li>App.vue 应用组件，根组件</li><li>main.js 入口js</li></ul></li></ul><h2 id="stylus"><a href="#stylus" class="headerlink" title="stylus"></a>stylus</h2><p>安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install stylus stylus-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&apos;stylus&apos; rel=&apos;stylesheet/stylus&apos;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><ul><li><p>在common文件夹下新建stylus文件夹</p></li><li><p>在stylus文件加下面新建mixins.styl文件</p></li></ul><h2 id="分析整个项目的-vue-组件结构"><a href="#分析整个项目的-vue-组件结构" class="headerlink" title="分析整个项目的 vue 组件结构"></a>分析整个项目的 vue 组件结构</h2><ul><li>|– components————非路由组件文件夹<ul><li>|– FooterGuide—————底部组件文件夹<ul><li>|– FooterGuide.vue——–底部组件 vue</li></ul></li></ul></li><li>|– pages—————–路由组件文件夹<ul><li>|– Msite—————首页组件文件夹<ul><li>|– Msite.vue——–首页组件 vue</li></ul></li><li>|– Search—————-搜索组件文件夹<ul><li>|– Search.vue———搜索组件 vue</li></ul></li><li>|– Order————–订单组件文件夹<ul><li>|– Order.vue——-订单组件 vue<ul><li>|– Profile————–个人组件文件夹</li><li>|– Profile.vue——-个人组件 vue</li></ul></li></ul></li></ul></li><li>|– App.vue—————应用根组件 vue</li><li>|– main.js—————应用入口 js</li></ul><ol><li>页面底部的FooterGuide组件只是用来放pages里的组件的容器，所以它不是路由组件</li><li>页面最上面的标题栏在我们的项目中属于路由组件的组成部分（与中间内容部分在一起）</li><li>但每个路由组件中都有最顶部的组件且相似度很高，所以可以将其抽取成为一个单独的组件</li></ol><h2 id="编写网页"><a href="#编写网页" class="headerlink" title="编写网页"></a>编写网页</h2><h3 id="样式重置"><a href="#样式重置" class="headerlink" title="样式重置"></a>样式重置</h3><p>在项目主目录下的static文件夹内新建css文件夹</p><ul><li>在css文件夹内新建重置样式文件reset.css</li><li><p>在index.html 中引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/css/reset.css"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><ul><li><p>meta</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>Fastclick</p><blockquote><p>当用户一次点击屏幕之后，浏览器并不能立刻判断用户是要进行双击缩放，还是想要进行单击操作。因此，iOS Safari 就等待 300 毫秒，以判断用户是否再次点击了屏幕。 于是，300 毫秒延迟就这么诞生了。</p></blockquote><ul><li><p>安装fastclick库  解决点击响应延时 0.3s 问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install fastclick --save</span><br></pre></td></tr></table></figure></li><li><p>在main.js中引入，并绑定到body</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> FastClick <span class="keyword">from</span> <span class="string">'fastclick'</span></span><br><span class="line">FastClick.attach(<span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h4><p>普通引入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Msite <span class="keyword">from</span> <span class="string">'../pages/Msite/Msite.vue'</span></span><br></pre></td></tr></table></figure></p><p>动态引入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">path</span>:<span class="string">'/msite'</span>,<span class="attr">component</span>:<span class="function"><span class="params">()</span>=&gt;</span> <span class="keyword">import</span>(<span class="string">'.../pages/Msite/Msite.vue'</span>)&#125;</span><br></pre></td></tr></table></figure></p><h4 id="在App-vue里使用router-view"><a href="#在App-vue里使用router-view" class="headerlink" title="在App.vue里使用router-view"></a>在App.vue里使用router-view</h4><p>引入底部导航FooterFuide，映射成标签，渲染到页面上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="keyword">import</span> FooterGuide <span class="keyword">from</span> <span class="string">'./components/FooterGuide/FooterGuide.vue'</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  templates:&#123;FooterGuide&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-view&gt; <span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">FooterGuide</span>&gt;</span><span class="tag">&lt;/<span class="name">FooterGuide</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="FooterGuide-vue"><a href="#FooterGuide-vue" class="headerlink" title="FooterGuide.vue"></a>FooterGuide.vue</h3><h3 id="HeaderTop-vue"><a href="#HeaderTop-vue" class="headerlink" title="HeaderTop.vue"></a>HeaderTop.vue</h3><p>因为基本每个组件的头部样式都类似，只有内容有区别，所以把它抽离出来。<br><strong>页面分析</strong></p><ol><li>中间有一个固定的标题栏，只是用在不同的路由组件中显示的内容不同</li><li>标题栏两侧可能有搜索框之类的部分（Msite）也可能没有</li><li>此组件为非路由组件的公用组件（所以在Components文件夹内）<br><strong>实现</strong></li></ol><ul><li>标题栏两侧是否有其他部分，要用到slot插槽进行组件间通信</li><li>slot 通信是标签, 而不是单纯的数据</li><li>中间标题栏接收的文本可以用props</li></ul><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;header class=&quot;header&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;left&quot;&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;span class=&quot;header_title&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;header_title_text ellipsis&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">      &lt;slot name=&quot;right&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p><strong>props 传递数据</strong></p><ol><li><p>父组件传值</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;HeaderTop title=<span class="string">"四川农业大学(雅安市雨城区)"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">HeaderTop</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>子组件接收</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">    title:String</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>插槽 传递标签</strong><br>插槽用于显示父组件使用子组件时，中间内容的显示<br>命名插槽</p><ol><li><p>子组件插槽命名</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=&quot;left&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure></li><li><p>父组件匹配插槽</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span slot=&quot;left&quot;&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Msite-vue"><a href="#Msite-vue" class="headerlink" title="Msite.vue"></a>Msite.vue</h3><h4 id="Swiper-轮播"><a href="#Swiper-轮播" class="headerlink" title="Swiper 轮播"></a>Swiper 轮播</h4><p><strong>文档:</strong>  <a href="http://www.swiper.com.cn/api/" target="_blank" rel="noopener">Swiper官方文档</a><br>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save swiper</span><br></pre></td></tr></table></figure></p><p>引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Swiper from &apos;swiper&apos;</span><br><span class="line">import &apos;swiper/dist/css/swiper.min.css&apos;</span><br></pre></td></tr></table></figure></p><h4 id="ShopList-vue"><a href="#ShopList-vue" class="headerlink" title="ShopList.vue"></a>ShopList.vue</h4><p>抽离出一个组件</p><h4 id="Login-vue"><a href="#Login-vue" class="headerlink" title="Login.vue"></a>Login.vue</h4><ul><li>利用<code>@click=&quot;$router.back()&quot;</code>实现点击页面的箭头返回上一级路由/Profile的功能</li><li>已确定底部的四个路由组件需要显示Footer部分</li><li>而Login组件为一级路由组件，且不需要显示底部的FooterGuide导航组件</li><li><p>所以为路由组件添加meta元数据来标识是否显示Footer,<code>v-show=&quot;$route.meta.showFooter&quot;</code>·来判断是否显示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/msite'</span>,</span><br><span class="line">  component: Msite,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    showFooter: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="后台应用"><a href="#后台应用" class="headerlink" title="后台应用"></a>后台应用</h2><ol><li>整个项目为前后端分离的项目：mintshop-client 与 mintshop-server</li><li>后台应用负责处理前台应用提交的请求, 并给前台应用返回 json 数据</li><li>前台应用负责展现数据, 与用户交互, 与后台应用交互<br><strong>数据库</strong></li><li>确保启动 mongodb 服务</li><li>进入mintshop-server文件夹，启动服务器应用:  <code>npm start</code></li></ol><h3 id="封装ajax请求函数"><a href="#封装ajax请求函数" class="headerlink" title="封装ajax请求函数"></a>封装ajax请求函数</h3><p>新建两个文件<br>api/ajax.js<br>api/index.js</p><ul><li>为了实现统一向后端发送请求数据，所以需要封装一个ajax请求函数</li></ul><p>引入axios,axios返回的是一个promise对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br></pre></td></tr></table></figure></p><blockquote><p>之前调用请求函数，返回的是response,现在想实现请求函数之后直接返回response.data</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向外部暴漏一个函数 ajax</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; url 请求路径，默认为空</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; data 请求参数，默认为空对象</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; type 请求方法，默认为GET</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">url = <span class="string">''</span>, data = &#123;&#125;, type = <span class="string">'GET'</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回值 Promise对象 （异步返回的数据是response.data，而不是response）</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// （利用axios）异步执行ajax请求</span></span><br><span class="line">    <span class="keyword">let</span> promise <span class="comment">// 这个内部的promise用来保存axios的返回值(promise对象)</span></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'GET'</span>) &#123;</span><br><span class="line">      <span class="comment">// 准备 url query 参数数据</span></span><br><span class="line">      <span class="keyword">let</span> dataStr = <span class="string">''</span> <span class="comment">// 数据拼接字符串，将data连接到url</span></span><br><span class="line">      <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        dataStr += key + <span class="string">'='</span> + data[key] + <span class="string">'&amp;'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (dataStr !== <span class="string">''</span>) &#123;</span><br><span class="line">        dataStr = dataStr.substring(<span class="number">0</span>, dataStr.lastIndexOf(<span class="string">'&amp;'</span>))</span><br><span class="line">        url = url + <span class="string">'?'</span> + dataStr</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 发送 get 请求</span></span><br><span class="line">      promise = axios.get(url)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 发送 post 请求</span></span><br><span class="line">      promise = axios.post(url, data)</span><br><span class="line">    &#125;</span><br><span class="line">    promise.then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 成功回调resolve()</span></span><br><span class="line">      resolve(response.data)</span><br><span class="line">    &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 失败回调reject()</span></span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装接口请求函数"><a href="#封装接口请求函数" class="headerlink" title="封装接口请求函数"></a>封装接口请求函数</h3><ul><li>有了发送请求数据的ajax函数，还需要封装一些与后台交互的接口函数</li><li>根据接口文档来定义接口请求函数</li><li>这个接口函数返回的仍然是promise</li><li>在路径里面的是路径参数，通过第二个参数传过去的query参数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue实战项目外卖1&quot;&gt;&lt;a href=&quot;#vue实战项目外卖1&quot; class=&quot;headerlink&quot; title=&quot;vue实战项目外卖1&quot;&gt;&lt;/a&gt;vue实战项目外卖1&lt;/h1&gt;&lt;h2 id=&quot;技术栈&quot;&gt;&lt;a href=&quot;#技术栈&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>reset.css</title>
    <link href="http://yoursite.com/2018/10/29/reset-css/"/>
    <id>http://yoursite.com/2018/10/29/reset-css/</id>
    <published>2018-10-29T09:06:14.000Z</published>
    <updated>2018-10-29T09:07:50.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器的样式重置"><a href="#浏览器的样式重置" class="headerlink" title="浏览器的样式重置"></a>浏览器的样式重置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Eric Meyer&apos;s Reset CSS v2.0 (http://meyerweb.com/eric/tools/css/reset/)</span><br><span class="line"> * http://cssreset.com</span><br><span class="line"> */</span><br><span class="line">html, body, div, span, applet, object, iframe,</span><br><span class="line">h1, h2, h3, h4, h5, h6, p, blockquote, pre,</span><br><span class="line">a, abbr, acronym, address, big, cite, code,</span><br><span class="line">del, dfn, em, img, ins, kbd, q, s, samp,</span><br><span class="line">small, strike, strong, sub, sup, tt, var,</span><br><span class="line">b, u, i, center,</span><br><span class="line">dl, dt, dd, ol, ul, li,</span><br><span class="line">fieldset, form, label, legend,</span><br><span class="line">table, caption, tbody, tfoot, thead, tr, th, td,</span><br><span class="line">article, aside, canvas, details, embed,</span><br><span class="line">figure, figcaption, footer, header,</span><br><span class="line">menu, nav, output, ruby, section, summary,</span><br><span class="line">time, mark, audio, video, input &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  border: 0;</span><br><span class="line">  font-size: 100%;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">  vertical-align: baseline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* HTML5 display-role reset for older browsers */</span><br><span class="line">article, aside, details, figcaption, figure,</span><br><span class="line">footer, header, menu, nav, section &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  line-height: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blockquote, q &#123;</span><br><span class="line">  quotes: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blockquote:before, blockquote:after,</span><br><span class="line">q:before, q:after &#123;</span><br><span class="line">  content: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table &#123;</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">  border-spacing: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* custom */</span><br><span class="line">a &#123;</span><br><span class="line">  color: #7e8c8d;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  -webkit-backface-visibility: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  width: 5px;</span><br><span class="line">  height: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track-piece &#123;</span><br><span class="line">  background-color: rgba(0, 0, 0, 0.2);</span><br><span class="line">  -webkit-border-radius: 6px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb:vertical &#123;</span><br><span class="line">  height: 5px;</span><br><span class="line">  background-color: rgba(125, 125, 125, 0.7);</span><br><span class="line">  -webkit-border-radius: 6px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb:horizontal &#123;</span><br><span class="line">  width: 5px;</span><br><span class="line">  background-color: rgba(125, 125, 125, 0.7);</span><br><span class="line">  -webkit-border-radius: 6px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html, body &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  -webkit-text-size-adjust: none;</span><br><span class="line">  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*显示省略号*/</span><br><span class="line">.ellipsis&#123;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浏览器的样式重置&quot;&gt;&lt;a href=&quot;#浏览器的样式重置&quot; class=&quot;headerlink&quot; title=&quot;浏览器的样式重置&quot;&gt;&lt;/a&gt;浏览器的样式重置&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>stylus</title>
    <link href="http://yoursite.com/2018/10/29/stylus/"/>
    <id>http://yoursite.com/2018/10/29/stylus/</id>
    <published>2018-10-29T06:08:13.000Z</published>
    <updated>2018-10-29T08:34:58.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stylus学习笔记"><a href="#stylus学习笔记" class="headerlink" title="stylus学习笔记"></a>stylus学习笔记</h1><ul><li>冒号可选，分号可选，逗号可选，括号可选</li><li><p>缩进与空格很重要</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">body</span><br><span class="line">  color white</span><br></pre></td></tr></table></figure></li><li><p>父级引用 &amp;</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">textarea</span><br><span class="line">input</span><br><span class="line">  color #A7A7A7</span><br><span class="line">  &amp;:hover</span><br><span class="line">    color #000</span><br><span class="line">//等于</span><br><span class="line">textarea,</span><br><span class="line">  input &#123;</span><br><span class="line">    color: #a7a7a7;</span><br><span class="line">  &#125;</span><br><span class="line">  textarea:hover,</span><br><span class="line">  input:hover &#123;</span><br><span class="line">    color: #000;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>变量</p></li><li><p>属性查找 @</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#logo</span><br><span class="line">  position: absolute</span><br><span class="line">  top: 50%</span><br><span class="line">  left: 50%</span><br><span class="line">  width: 150px</span><br><span class="line">  height: 80px</span><br><span class="line">  margin-left: -(@width / 2)</span><br><span class="line">  margin-top: -(@height / 2)</span><br></pre></td></tr></table></figure></li><li><p>运算符</p><ul><li>范围 .. 包含界限 …包含开头不包含结尾</li><li>存在操作符in</li><li>实例检查 is a</li><li>条件赋值：?= :=</li><li>变量定义：is defined</li></ul></li><li>混合书写</li><li>方法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;stylus学习笔记&quot;&gt;&lt;a href=&quot;#stylus学习笔记&quot; class=&quot;headerlink&quot; title=&quot;stylus学习笔记&quot;&gt;&lt;/a&gt;stylus学习笔记&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;冒号可选，分号可选，逗号可选，括号可选&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>demo_vue-book</title>
    <link href="http://yoursite.com/2018/10/27/vue-book/"/>
    <id>http://yoursite.com/2018/10/27/vue-book/</id>
    <published>2018-10-27T07:33:54.000Z</published>
    <updated>2018-10-27T08:51:35.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-book"><a href="#vue-book" class="headerlink" title="vue-book"></a>vue-book</h1><hr><p>接下来会学习vuex，在学习一门预处理语言，之后用我学过的所有东西做一个练习的项目<br>vue学习之后，用vue-cli做的一个练习。<br>这是学习vue的过程中走通了一遍流程，但还有很多功能没有实现</p><ul><li>上拉下拉刷新</li><li>图片的懒加载</li><li>打包之后如何上线</li><li>vuex的学习</li><li>如何连接数据库等</li></ul><p>github:<a href="https://github.com/biubiuins/vue-book" target="_blank" rel="noopener">https://github.com/biubiuins/vue-book</a></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul><li>npm install vue</li><li>npm install -g webpack</li><li>npm install -g vue-cli</li><li>npm install less less-loader axios vuex bootstrap</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>build 打包后的脚本文件</li><li>src 源码文件</li><li>mock后台代码，模拟数据</li><li>src/api 代表的是所有的接口,获取数据给前端调用</li><li>src/base 基础组件</li><li>src/components 页面组件<br><img src="/img/vue-book/lujing.jpg" width="90%"><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3>根据页面划分了5个页面组件</li><li>首页 Home.vue</li><li>列表 List.vue</li><li>收藏 Collect.vue</li><li>添加 Add.vue</li><li>详情 Detail.vue</li></ul><p>配置路由，配置路由映射表并new个实例,挂载在根组件上，router-view显示在App.vue<br>router/index.js</p><p><font color="red">Vue.use()是用来安装Vue插件</font><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">Vue.use(Router);</span><br></pre></td></tr></table></figure></p><blockquote><p>这里用了模板，将会另外写一篇，关于前端的模板与node的</p></blockquote><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><p>base/Tab.vue<br>scoped 表示是当前组件的样式，并不是全局的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>less预处理语言，学习之后会写一篇博客</p></blockquote><p>点击导航之后会通过to跳转页面，并且样式改变<br>这里需要注意<br>/home 确切激活，仅仅这个路径有效。router-link-exact-active<br>/home /home/a 都可以。router-link-active<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/add&quot;&gt;</span><br><span class="line">&lt;i class=&quot;iconfont icon-add&quot;&gt;&lt;/i&gt;&lt;span&gt;添加&lt;/span&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></p><p>基础组件Tab挂载在App.vue上（导航很多页面都需要），并在App.vue上写全局的样式，清除默认样式。<br>新学习到的清除输入框和按钮的默认样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input，button&#123;appearance:none;&#125;</span><br></pre></td></tr></table></figure></p><p>App.vue的组件中有<code>name: &#39;App&#39;</code>，这里<code>name: &#39;app&#39;</code> 相当于一个全局 ID。可以不写，写了可以提供更好的调试信息。<br>页面渲染也是在App.vue中实现的</p><h4 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h4><p><a href="http://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2" target="_blank" rel="noopener">http://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2</a><br>图标打包好了之后在index.html中引入\<br>iconfont是必须类名表明是个icon，后面根据页面选择<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;iconfont icon-shouye&quot;&gt;&lt;/i&gt;&lt;span&gt;首页&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><p>base/Mheader.vue<br>头部的标题不是全部一样的，并且比如首页是没有返回键的，所以这里用到的插槽和父组件给子组件传值<br>这里用Home.vue-Mheader.vue为例</p><ol><li>在父组件上挂载Mheader.vue</li><li>&lt;Mheader.vue&gt;首页，首页需要显示出来，需要在子组件Mheader.vue中放个匿名插槽接收</li><li><p>父组件需要传递一个值告诉子组件是否显示返回键。子组件接收back，不需要验证的时候用数组，需要验证的时候用对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;i class=&quot;iconfont icon-fanhui&quot; v-if=&quot;back&quot;&gt;&lt;/i&gt;</span><br><span class="line">...</span><br><span class="line">props:&#123;</span><br><span class="line"> back:&#123;type:Boolean,default:false&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>点击返回键，返回上一个操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$router.go(-1);</span><br></pre></td></tr></table></figure></li></ol><ul><li>扩展一下,back也可以返回。this.$router.back()</li><li>强制跳转页面，在后面追加，点返回还可以回去。this.$router.push(‘/XXX’)</li><li>路由替换，将原来的替换。this.$router.replace(‘/XXX’)<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3>base/Swiper.vue<br>安装依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-awesome-swiper --save-dev</span><br></pre></td></tr></table></figure></li></ul><p>在main.js中引入vue-awesome-swiper插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import VueAwesomeSwiper from &apos;vue-awesome-swiper&apos;</span><br><span class="line">import &apos;swiper/dist/css/swiper.css&apos;</span><br><span class="line">Vue.use(VueAwesomeSwiper)</span><br></pre></td></tr></table></figure></p><h3 id="后台获取图片信息"><a href="#后台获取图片信息" class="headerlink" title="后台获取图片信息"></a>后台获取图片信息</h3><p>mock/sliders.js 存放图片连接<br>mock/server.js 配置服务器<br>url.parse()可以将一个完整的URL地址，分为很多部分，常用的有：host、port、pathname、path、query。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let sliders = require(&apos;./sliders&apos;)</span><br><span class="line">http.createServer((req,res)=&gt;&#123;</span><br><span class="line">let&#123;pathname,query&#125; = url.parse(req.url);</span><br><span class="line">  if (pathname === &apos;/sliders&apos;)&#123;</span><br><span class="line">     res.setHeader(&apos;Content-Type&apos;,&apos;application/json;charset=utf-8&apos;)</span><br><span class="line">     res.end(JSON.stringify(sliders))</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是当前段发起ajax请求的时候，是8080端口请求3000端口的数据，所以有跨域的问题，这里需要在服务器中加入跨域头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">res.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type,Content-Length, Authorization, Accept,X-Requested-With&quot;);</span><br><span class="line">res.setHeader(&quot;Access-Control-Allow-Methods&quot;,&quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">res.setHeader(&quot;X-Powered-By&quot;,&apos; 3.2.1&apos;)</span><br><span class="line">if(req.method==&quot;OPTIONS&quot;) return res.end();/*让options请求快速返回*/</span><br></pre></td></tr></table></figure></p><h3 id="轮播图的api"><a href="#轮播图的api" class="headerlink" title="轮播图的api"></a>轮播图的api</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="comment">//设置基本的默认请求路径</span></span><br><span class="line">axios.defaults.baseURL =<span class="string">'http://localhost:3000'</span>;</span><br><span class="line"><span class="comment">//获取轮播图数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> getSliders=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"> <span class="comment">//因为设置了了efaults.baseURL，所以它请求的路径其实是http://localhost:3000/sliders,返回的是一个promise对象</span></span><br><span class="line"> <span class="keyword">return</span> axios.get(<span class="string">'/sliders'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>axios 笔记待整理</p></blockquote><h3 id="前端获取数据"><a href="#前端获取数据" class="headerlink" title="前端获取数据"></a>前端获取数据</h3><p>获取的数据父子组件传值，传给子组件，子组件渲染出图片<br>如果给接收到的data一个新的名字 slider {data：slider}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">async created()&#123;</span><br><span class="line"> let &#123;data&#125; = await getSliders().then()</span><br><span class="line"> this.sliders=data</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><blockquote><p>async/await 已整理</p></blockquote><h3 id="热门图书-删除图书"><a href="#热门图书-删除图书" class="headerlink" title="热门图书/删除图书"></a>热门图书/删除图书</h3><ul><li>先写服务端，确保数据能正常返回</li><li>增加api方法，实现调取数据的功能</li><li>在哪个组件中应用这个api，如果是一个基础组件需要这些数据，在使用这个组件的父级中调用这个方法，将数据传递给基础组件</li></ul><h3 id="详情页面"><a href="#详情页面" class="headerlink" title="详情页面"></a>详情页面</h3><p>如果用对象作为to的属性，并且使用了参数，必须给路由起个名字，通过名字跳转<br>router/index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;path:&apos;/detail/:bid&apos;,component:Detail,name:&apos;detail&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>component/List.vue<br>需要配置路径参数，点击哪个li跳转哪个详情<br>这是跳转用到router-link，把之前的li改为router-link，</p><ul><li>params是路径参数</li><li>循环组件，需要加上key</li><li>router-link是a标签，这里需要的是li，在taf里面修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link v-for=&quot;(book,index) in books&quot; :to=&quot;&#123;name:&apos;detail&apos;,params:&#123;bid:book.bookId&#125;&#125;&quot; :key=&quot;index&quot; tag=&quot;li&quot; &gt;</span><br></pre></td></tr></table></figure></li></ul><p>因为点击li跳转，删除按钮也在li里面，所以这个应该阻止删除按钮<br>冒泡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click.stop=&quot;remove(book.bookId)&quot;&gt;删除&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>component/Detail.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取通过传过来的参数</span><br><span class="line">$route.params.XXX</span><br></pre></td></tr></table></figure></p><p>获取当前id的图书信息渲染到界面。</p><ul><li>问题一:</li></ul><p>当修改的时候，价格原本是数字，修改之后会变成字符串,加上数字的修饰符<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model.number=&quot;book.bookPrice&quot; id=&quot;bookPrice&quot;&gt;</span><br></pre></td></tr></table></figure></p><ul><li><p>问题二<br>修改url的时候，页面没有刷新，因为模板已经渲染出来了，不会在走created办法。所以，需要监控url的变化，路径参数发生变化，通过监控参数的变化来发送ajax</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">//路径参数发生变化，通过监控参数的变化来发送ajax</span><br><span class="line">$route()&#123;</span><br><span class="line">     this.getData() ;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>问题三<br>如果没有找到对应id的书，那返回的是空对象，如果是空，需要跳转回列表页<br>Object.keys()，该方法返回一个数组,里面是对象的所有属性。如果是空对象那么返回一个空数组。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.keys(this.book).length&gt;0?void 0:this.$ruoter.push(&apos;/List&apos;)</span><br></pre></td></tr></table></figure><p>  处理一下url,server.js查询book的条件变一下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!isNaN(id))</span><br></pre></td></tr></table></figure></li></ul><p>数据改变之后，需要用put更新数据<br>PUT：<br>参数1：url:/book?id=3<br>参数2：请求体发送<br>server.js获取put/post请求体中的数据<br>使用这两个事件就可以获取来自服务器端的响应内容。</p><ul><li>data，数据传递时触发，</li><li>end，没有更多数据提供时触发<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;&quot;;</span><br><span class="line">   res.on(&apos;data&apos;,(chunk)=&gt;&#123;</span><br><span class="line">       str += chunk;</span><br><span class="line">   &#125;);</span><br><span class="line">   res.on(&apos;end&apos;,()=&gt;&#123;</span><br><span class="line">       console.log(str);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h3><p>同详情页面</p><h2 id="优化与其他功能"><a href="#优化与其他功能" class="headerlink" title="优化与其他功能"></a>优化与其他功能</h2><h3 id="loading"><a href="#loading" class="headerlink" title="loading"></a>loading</h3><p>轮播图和热门图书是分开获取的，这里改成一起获取<br>api/index<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return axios.all([getSliders(),getHotBook()])</span><br></pre></td></tr></table></figure></p><p>数据返回的是一个数组，里面是两个promise对象。</p><p>新建base/Loading.vue,挂载在Home.vue<br><a href="https://www.cnblogs.com/lhb25/p/loading-spinners-animated-with-css3.html" target="_blank" rel="noopener">https://www.cnblogs.com/lhb25/p/loading-spinners-animated-with-css3.html</a></p><h3 id="实现页面缓存"><a href="#实现页面缓存" class="headerlink" title="实现页面缓存"></a>实现页面缓存</h3><p>分页面缓存，路由元信息。<br>在配置路由映射的时候有meta(备注)属性,这条对象可以通过<code>this.$route</code>获取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;path:&apos;/home&apos;,component:Home,meta:&#123;keepAlive:true&#125;&#125;,</span><br></pre></td></tr></table></figure></p><p>修改APP.vue,写两个router-view，一个用于，显示缓存的，一个用于显示一般的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">     &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;Tab&gt;&lt;/Tab&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><h3 id="实现路由动画"><a href="#实现路由动画" class="headerlink" title="实现路由动画"></a>实现路由动画</h3><p>给router-view外面包裹一个<transition name="fadeIn"></transition>标签,注意点：一个只能包裹一个标签<br>写css样式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.fadeIn-enter&#123;</span><br><span class="line">  opacity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.fadeIn-enter-active&#123;</span><br><span class="line">  transition:all <span class="number">0.3</span>s;</span><br><span class="line">&#125;</span><br><span class="line">.fadeIn-leave-active&#123;</span><br><span class="line">  transition: all <span class="number">0.3</span>s;</span><br><span class="line">  opacity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="下拉加载更多"><a href="#下拉加载更多" class="headerlink" title="下拉加载更多"></a>下拉加载更多</h3><h3 id="打包上线"><a href="#打包上线" class="headerlink" title="打包上线"></a>打包上线</h3><h3 id="history路由"><a href="#history路由" class="headerlink" title="history路由"></a>history路由</h3><p>在路由中改变mode:’history’</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>router/index<br>meta:{title:XXX}<br>main.js<br>全局钩子，在进入路由之前每一次都会执行此方法。有拦截的作用<br>router.beforeEach(function(from.to,next){<br>   document.title = to.meta.title;<br>   next();<br>});</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-book&quot;&gt;&lt;a href=&quot;#vue-book&quot; class=&quot;headerlink&quot; title=&quot;vue-book&quot;&gt;&lt;/a&gt;vue-book&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;接下来会学习vuex，在学习一门预处理语言，之后用我学过的所有东西做一个练习的项目
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 简括</title>
    <link href="http://yoursite.com/2018/10/24/http%E7%AE%80%E6%8B%AC/"/>
    <id>http://yoursite.com/2018/10/24/http简括/</id>
    <published>2018-10-24T13:11:13.000Z</published>
    <updated>2018-10-24T13:12:07.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><p>一次完整的HTTP请求需要7个步骤</p><ol><li>建立TCP连接</li><li>Web浏览器向Web服务器发送请求命令<ul><li>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。</li></ul></li><li>Web浏览器发送请求头信息<ul><li>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。</li></ul></li><li>Web服务器应答<ul><li>客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码</li></ul></li><li>Web服务器发送应答头信息<ul><li>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</li></ul></li><li>Web服务器向浏览器发送数据<ul><li>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。</li></ul></li><li>Web服务器关闭TCP连接<br>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：Connection:keep-alive，TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。</li></ol><p>http协议的特点<br>①通信流程：断开式（无状态）</p><ul><li>断开式：http协议每次响应完成后，会断开与客户端的连接</li><li>无状态：由于服务器断开了之前的连接，就无法知晓连接间的关系。</li></ul><p>②内容格式：消息头和消息体</p><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><ul><li>OPTIONS<br>返回服务器针对特定资源所支持的HTML请求方法   或web服务器发送*测试服务器功能。询问支持的方法。</li><li>HEAD<ul><li>类似get，但只返回响应头。</li><li>常用于查看某个页面的状态</li></ul></li><li>GET<ul><li>获取资源</li><li>GET方法要求服务器将URL定位的资源放在响应报文的数据部分，回送给客户端。</li><li>使用GET方法时，请求参数和对应的值附加在URL后面，利用一个问号（“?”）代表URL的结尾与请求参数的开始</li></ul></li><li>POST<ul><li>向指定资源提交数据进行处理请求（提交表单、上传文件）</li><li>将请求参数封装在HTTP请求数据中，以名称/值的形式出现</li></ul></li><li>PUT<br>向指定资源位置上上传其最新内容</li><li>DELETE<br>请求服务器删除</li><li>TRACE<br>  回显服务器收到的请求，用于测试和诊断</li><li>CONNECT<br>HTTP/1.1协议中能够将连接改为管道方式的代理服务器</li></ul><h3 id="get-和-post区别"><a href="#get-和-post区别" class="headerlink" title="get 和 post区别"></a>get 和 post区别</h3><p>get请求无消息体，只能携带少量数据<br>post请求有消息体，可以携带大量数据<br>get请求将数据放在url地址中<br>post请求将数据放在消息体中</p><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><ul><li>1xx：相关信息</li><li>2xx：操作成功</li><li>3xx：重定向</li><li>4xx：客户端错误</li><li>5xx：服务器错误<br>GET<br>安全且幂等<br>获取表示<br>变更时获取表示（缓存）</li><li>200（OK） - 表示已在响应中发出</li><li>204（无内容） - 资源有空表示</li><li>301（Moved Permanently） - 资源的URI已被更新</li><li>303（See Other） - 其他（如，负载均衡）</li><li>304（not modified）- 资源未更改（缓存）</li><li>400 （bad request）- 指代坏请求（如，参数错误）</li><li>404 （not found）- 资源不存在</li><li>406 （not acceptable）- 服务端不支持所需表示</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务端当前无法处理请求<br>POST<br>创建子资源<br>部分更新资源</li><li>如果没有被修改，则不过更新资源（乐观锁）</li><li>200（OK）- 如果现有资源已被更改</li><li>201（created）- 如果新资源被创建</li><li>202（accepted）- 已接受处理请求但尚未完成（异步处理）</li><li>301（Moved Permanently）- 资源的URI被更新</li><li>303（See Other）- 其他（如，负载均衡）</li><li>400（bad request）- 指代坏请求</li><li>404 （not found）- 资源不存在</li><li>406 （not acceptable）- 服务端不支持所需表示</li><li>409 （conflict）- 通用冲突</li><li>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</li><li>415 （unsupported media type）- 接受到的表示不受支持</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务当前无法处理请求</li></ul><p>PUT<br>通过替换的方式更新资源</p><ul><li>200 （OK）- 如果已存在资源被更改</li><li>201 （created）- 如果新资源被创建</li><li>301（Moved Permanently）- 资源的URI已更改</li><li>303 （See Other）- 其他（如，负载均衡）</li><li>400 （bad request）- 指代坏请求</li><li>404 （not found）- 资源不存在</li><li>406 （not acceptable）- 服务端不支持所需表示</li><li>409 （conflict）- 通用冲突</li><li>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</li><li>415 （unsupported media type）- 接受到的表示不受支持</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务当前无法处理请求</li></ul><p>DELETE<br>不安全但幂等<br>删除资源</p><ul><li>200 （OK）- 资源已被删除</li><li>301 （Moved Permanently）- 资源的URI已更改</li><li>303 （See Other）- 其他，如负载均衡</li><li>400 （bad request）- 指代坏请求</li><li>404 （not found）- 资源不存在</li><li>409 （conflict）- 通用冲突</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务端当前无法处理请求</li></ul><hr><h2 id="http的请求部分"><a href="#http的请求部分" class="headerlink" title="http的请求部分"></a>http的请求部分</h2><ul><li>请求方法（GET/POST）、URI、协议/版本</li><li>请求头(Request Header)</li><li>空行</li><li>请求正文</li></ul><p><a href="https://blog.csdn.net/chen1403876161/article/details/51546653" target="_blank" rel="noopener">https://blog.csdn.net/chen1403876161/article/details/51546653</a><br>| 请求头 | 说明 | 实列|<br>| —— | —— |——|<br>| Accept |这个头信息指定浏览器或其他客户端可以处理的 MIME 类型|Accept:application/json, text/plain, <em>/</em>|<br>|Accept-Encoding|浏览器能够进行解码的数据编码方式|Accept-Encoding:gzip, deflate, br|<br>|Accept-Language|    这个头信息指定客户端的首选语言，在这种情况下，Servlet 会产生多种语言的结果|Accept-Language:zh-CN,zh;q=0.8|<br>|Accept-Charset|浏览器可接受的字符集||<br>|Connection|这个头信息指示客户端是否可以处理持久 HTTP 连接。持久连接允许客户端或其他浏览器通过单个请求来检索多个文件|Connection:keep-alive|<br>|Host|指定请求资源的Intenet主机和端口号（服务器，向谁请求）|Host:localhost:3000|<br>|Referer|这个头信息指示所指向的 Web 页的 URL。例如，如果您在网页 1，点击一个链接到网页 2，当浏览器请求网页 2 时，网页 1 的 URL 就会包含在 Referer 头信息中。|<br>|User-Agent|这个头信息识别发出请求的浏览器或其他客户端，并可以向不同类型的浏览器返回不同的内容。|<br>|Content-Length|这个头信息只适用于 POST 请求，并给出 POST 数据的大小（以字节为单位）。|Content-Length:60|<br>|Content-Type|用于post请求|Content-Type：application/json;charset=UTF-8|<br>|Authorization|授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中||</p><h2 id="HTTP-content-type"><a href="#HTTP-content-type" class="headerlink" title="HTTP content-type"></a>HTTP content-type</h2><ul><li>application/x-www-form-urlencoded<br>  这应该是最常见的 POST 提交数据的方式了。<form enctype="””">中默认的encType，form表单数据被编码为         key/value格式发送到服务器（表单默认的提交数据的格式）</form></li><li>multipart/form-data<br> 需要在表单中进行文件上传时，就需要使用该格式</li><li>application/json<br>JSON数据格式</li></ul><h2 id="HTTP响应头信息"><a href="#HTTP响应头信息" class="headerlink" title="HTTP响应头信息"></a>HTTP响应头信息</h2><ol><li>状态行</li><li>响应头(Response Header)</li><li>空行</li><li>响应正文</li></ol><p>其他一般的在上面的连接中可以看到，这里整理了平时遇到的跨域问题</p><h3 id="跨域的响应头"><a href="#跨域的响应头" class="headerlink" title="跨域的响应头"></a>跨域的响应头</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line"> res.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Content-Length, Authorization, Accept,X-Requested-With"</span>);</span><br><span class="line"> res.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line"> res.setHeader(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>)</span><br><span class="line"> res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line"> <span class="keyword">if</span>(req.method==<span class="string">"OPTIONS"</span>)  <span class="keyword">return</span> res.end();<span class="comment">/*让options请求快速返回*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a&gt;http&lt;/h1&gt;&lt;p&gt;一次完整的HTTP请求需要7个步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立TCP连接&lt;/li&gt;
&lt;li&gt;Web浏览器向Web服务器发
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>promise/axios/async/await</title>
    <link href="http://yoursite.com/2018/10/22/promise-axios/"/>
    <id>http://yoursite.com/2018/10/22/promise-axios/</id>
    <published>2018-10-22T09:36:10.000Z</published>
    <updated>2018-10-22T09:45:11.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios-promise-async-await"><a href="#axios-promise-async-await" class="headerlink" title="axios/promise/async/await"></a>axios/promise/async/await</h1><p>这里整理axios时，把牵扯到的基础promise学习了，更深一步的以后再深入。axios跨域的问题等之后再整理，这篇仅仅是一些简单的基础</p><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>用法：可以将异步操作以同步操作的流程表达处理，避免层层嵌套回调函数<br>promise对象有三种状态，对象的状态不受外界影响</p><ul><li>pending 进行中</li><li>fulfilled 已成功</li><li>rejected 已失败</li></ul><p>并且一旦状态改变，就不会再变，任何时候都可以得到这个结果,这时称为resolved(已定型)。状态改变只有两种可能</p><ul><li>pending到fulfilled</li><li>pending到rejected</li></ul><p>Promise实例生成以后，then方法有2个参数，第一个函数接收resolved状态的执行，第二个参数接收reject状态的执行。且then的执行结果也会返回一个Promise对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success,resolved时调用</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure rejected时调用</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><hr><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>基于promise用于浏览器和node.js的http客户端</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>支持浏览器和node.js</li><li>支持promise</li><li>能拦截请求和响应</li><li>能转换请求和响应数据</li><li>能取消请求</li><li>自动转换JSON数据</li><li>浏览器端支持防止CSRF(跨站请求伪造)</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;;</span><br></pre></td></tr></table></figure><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><p>get请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.get(url)</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>.then访问成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//打印的是object对象</span><br><span class="line">//data，status，statusText，headers，comfig</span><br><span class="line">XXXX.then(res=&gt;&#123;console.log(res)&#125;)</span><br><span class="line">//打印的是promise对象</span><br><span class="line">XXXX.then()</span><br></pre></td></tr></table></figure></p><p>.catch捕获错误</p><h4 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(url,&#123;params:&#123;&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><p>配置全局默认路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL =&apos;http://localhost:3000&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>在请求或者返回被then或者catch处理之前对它们进行拦截<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 添加请求拦截器</span><br><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">    // 在发送请求之前做些什么</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对请求错误做些什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line">// 添加响应拦截器</span><br><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">    // 对响应数据做点什么</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对响应错误做点什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><hr><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><p>ES7 提出的async 函数，终于让 JavaScript 对于异步操作有了终极解决方案。<br>async作为一个关键字放到函数前面，表示函数是一个异步函数，异步函数也就意味着该函数的执行不会阻塞后面代码的执行。</p><ul><li>内置执行器。Generator 函数的执行必须依靠执行器，而 Aysnc 函数自带执行器，调用方式跟普通函数的调用一样</li><li>返回值是 Promise。async 函数返回值是 Promise 对象，比 Generator 函数返回的 Iterator 对象方便，可以直接使用 then() 方法进行调用</li><li>写异步代码就像写同步代码一样了，不用不断的回调了。</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="async-函数返回一个-Promise-对象"><a href="#async-函数返回一个-Promise-对象" class="headerlink" title="async 函数返回一个 Promise 对象"></a>async 函数返回一个 Promise 对象</h3><p>async 函数内部 return 返回的值是个Promise 对象。当调用该函数时，内部会调用Promise.solve() 方法把它转化成一个promise 对象作为返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">async function timeout() &#123;</span><br><span class="line">    return &apos;hello world&apos;</span><br><span class="line">&#125;</span><br><span class="line">console.log(timeout());</span><br><span class="line">console.log(&apos;虽然在后面，但是我先执行&apos;);</span><br><span class="line">//输出</span><br><span class="line">//Promise&#123;&#125;</span><br><span class="line">//虽然在后面，但是我先执行</span><br></pre></td></tr></table></figure></p><p>async 函数内部 return 返回的值。会成为 then 方法回调函数的参数。只有当 async 函数内部的异步操作都执行完，才会执行 then 方法的回调。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  async function timeout() &#123;</span><br><span class="line">    return &apos;hello world&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  timeout().then(result =&gt; &#123;</span><br><span class="line">    console.log(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(&apos;虽然在后面，但是我先执行&apos;);</span><br><span class="line">  //输出</span><br><span class="line">  //虽然在后面，但是我先执行</span><br><span class="line">  //hello world</span><br></pre></td></tr></table></figure></p><p>如果 async 函数内部抛出异常，则会导致返回的 Promise 对象状态变为 reject 状态。抛出的错误而会被 catch 方法回调函数接收到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">async function e()&#123;</span><br><span class="line">    throw new Error(&apos;error&apos;);</span><br><span class="line">&#125;</span><br><span class="line">e().then(v =&gt; console.log(v))</span><br><span class="line">.catch( e =&gt; console.log(e));</span><br></pre></td></tr></table></figure></p><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p> await 后面放置的就是返回promise对象的一个表达式。await 表示等一下，先执行await后面的代码，等后面的promise对象执行完毕，再继续像下执行。</p><hr><p> 正常情况下，await 命令后面跟着的是 Promise，如果不是的话，也会被转换成一个 立即 resolve 的 Promise<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> async function  f() &#123;</span><br><span class="line">    return await 1</span><br><span class="line">&#125;;</span><br><span class="line">f().then( (v) =&gt; console.log(v)) // 1</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;axios-promise-async-await&quot;&gt;&lt;a href=&quot;#axios-promise-async-await&quot; class=&quot;headerlink&quot; title=&quot;axios/promise/async/await&quot;&gt;&lt;/a&gt;axios/promi
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>demo_todoList</title>
    <link href="http://yoursite.com/2018/10/13/todolist/"/>
    <id>http://yoursite.com/2018/10/13/todolist/</id>
    <published>2018-10-13T14:51:07.000Z</published>
    <updated>2018-10-13T15:02:56.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="demo-todoList"><a href="#demo-todoList" class="headerlink" title="demo_todoList"></a>demo_todoList</h1><hr><p><img src="/img/vue/todoList.png" width="85%"></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>将数据循坏到页面</li><li>敲回车时添加新数据（需要添加isSelected属性）</li><li>删除功能</li><li>计算当前没有被选中的，选中的有删除样式</li><li>双击任务可以修改任务,已经完成的不可以</li><li>自定义输入框聚焦</li><li>回车或者失去焦点的时候修改成功</li><li>计算属性 根据hash展示todolist</li><li>数据永久化，hash单页刷新</li></ul><hr><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><ul><li>监控todos的变化,当变化时更新数据</li><li>watch:todos(){} 只能监控一层的数据变化（删减）</li><li>watch:todos:handler(){},deep:true 深度监控<h3 id="directivess"><a href="#directivess" class="headerlink" title="directivess"></a>directivess</h3></li><li>自定义指令，指令是操作的dom</li><li>XXX(el,bindings){} 名字需要和v-XXX的相同，el指代的是当前的dom，bindings参数</li></ul><hr><p>github: <a href="https://github.com/biubiuins/demo_todolist" target="_blank" rel="noopener">https://github.com/biubiuins/demo_todolist</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;demo-todoList&quot;&gt;&lt;a href=&quot;#demo-todoList&quot; class=&quot;headerlink&quot; title=&quot;demo_todoList&quot;&gt;&lt;/a&gt;demo_todoList&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/img/vue/to
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://yoursite.com/2018/10/12/git/"/>
    <id>http://yoursite.com/2018/10/12/git/</id>
    <published>2018-10-12T06:13:03.000Z</published>
    <updated>2018-10-15T05:27:14.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git的基本操作"><a href="#git的基本操作" class="headerlink" title="git的基本操作"></a>git的基本操作</h1><hr><h2 id="初次配置"><a href="#初次配置" class="headerlink" title="初次配置"></a>初次配置</h2><p>第一步需要配置用户名和邮箱地址，因为git为每一次提交记录名字和邮箱地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &apos;runoob&apos;</span><br><span class="line">$ git config --global user.email test@runoob.com</span><br></pre></td></tr></table></figure></p><h3 id="ssh-key"><a href="#ssh-key" class="headerlink" title="ssh key"></a>ssh key</h3><ol><li><p>生成一对shh key（id_rsa私钥，id_rsa.pub公钥）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p> 注：在主目录下生成的密钥在 /c/Users/用户名/.ssh/id_rsa 里</p></li><li><p>查看公钥内容（需在.ssh目录下执行）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>复制密钥内容添加到 github 上</p></li><li><p>使用ssh协议上传文件到仓库</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot; &quot;</span><br><span class="line">git remote add origin git@github.com:...</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p> 注：若在创建新仓库时有readme.md 文件会上传失败</p></li></ol><h2 id="新建版本库"><a href="#新建版本库" class="headerlink" title="新建版本库"></a>新建版本库</h2><ol><li>git里面先进入新建库的文件夹下</li><li><p>初始化库<br>初始化目录，目录下回出现一个.git的目录，该目录包含了资源的所有元数据</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git init 目录名</span><br></pre></td></tr></table></figure></li><li><p>添加文件到暂存区<br>将当前目录下几个文件纳入版本控制，需要先用git add 命令告诉git开始对这些文件进行跟踪</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .//添加当前项目的所有文件</span><br><span class="line">git add README //添加名为README的文件</span><br><span class="line">git add -A 所有修改的内容添加到缓存区</span><br></pre></td></tr></table></figure></li><li><p>增加到版本库中<br>使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit -m将缓存区内容添加到仓库中。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -a 跳过这一步</span><br><span class="line">git commit -m&quot;版本留言描述&quot;</span><br></pre></td></tr></table></figure></li><li><p>连接远程仓库（现在GitHub上面新建仓库）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 仓库地址</span><br></pre></td></tr></table></figure></li><li><p>讲本地仓库推送到远程库上</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br><span class="line">git push -u origin master //首次执行，说明上传到仓库的master分支上</span><br></pre></td></tr></table></figure></li></ol><hr><p>问题：![rejected] master -&gt; master (fetch first)<br>解决办法：1. 先执行<code>git pull</code>.<br>然后再执行git push –force origin master替换原先的 git push -u origin master</p><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>先把别人的fork进自己的库里面</p><ol><li><p>克隆仓库到指定目录</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//自己在本地进入需要克隆进的文件夹下执行下面第一条指令</span><br><span class="line">git clone 仓库地址</span><br><span class="line">git clone 仓库地址 本地目录</span><br></pre></td></tr></table></figure></li><li><p>add commit push</p></li></ol><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ol><li><p>本地删除文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//或者直接在文件管理器中把没用的文件删了</span><br><span class="line">//需要git进入文件夹下</span><br><span class="line">$ rm test.txt</span><br></pre></td></tr></table></figure><p> Git知道你删除了文件，这个时候只是本地删除了文件，而版本库里面还有文件，所以可以恢复文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure></li><li><p>远程库删除文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm test.txt</span><br></pre></td></tr></table></figure><p> 记得还需要commit</p><hr><p> 我的石墨文档：<a href="https://shimo.im/docs/2Eg0gszciPEQBPxG/" target="_blank" rel="noopener">https://shimo.im/docs/2Eg0gszciPEQBPxG/</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git的基本操作&quot;&gt;&lt;a href=&quot;#git的基本操作&quot; class=&quot;headerlink&quot; title=&quot;git的基本操作&quot;&gt;&lt;/a&gt;git的基本操作&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;初次配置&quot;&gt;&lt;a href=&quot;#初次配置&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>express学习笔记</title>
    <link href="http://yoursite.com/2018/10/12/express%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/12/express学习笔记/</id>
    <published>2018-10-12T06:09:06.000Z</published>
    <updated>2018-10-12T06:36:03.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="express-学习笔记"><a href="#express-学习笔记" class="headerlink" title="express 学习笔记"></a>express 学习笔记</h1><hr><h2 id="搭建简单服务器"><a href="#搭建简单服务器" class="headerlink" title="搭建简单服务器"></a>搭建简单服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//express() 是一个由 express 模块导出的入口（top-level）函数</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">//创建一个express应用实例名app</span></span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="comment">// 设置端口号：3000</span></span><br><span class="line"><span class="comment">//process.env.PORT：读取当前目录下环境变量port的值</span></span><br><span class="line"><span class="keyword">let</span> port = process.env.PORT || <span class="number">3000</span> ;</span><br><span class="line"><span class="comment">//在端口号上开启服务</span></span><br><span class="line">app.listen(port,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="app-listen-port-hostname-backlog-callback"><a href="#app-listen-port-hostname-backlog-callback" class="headerlink" title="app.listen(port, [hostname], [backlog], [callback])"></a>app.listen(port, [hostname], [backlog], [callback])</h3><p>类似于node中的http.Server.listen()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置端口号：3000</span></span><br><span class="line"><span class="comment">//process.env.PORT：读取当前目录下环境变量port的值</span></span><br><span class="line"><span class="keyword">let</span> port = process.env.PORT || <span class="number">3000</span> ;</span><br><span class="line"><span class="comment">//在端口号上开启服务</span></span><br><span class="line">app.listen(port,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>服务器启动时候，<br>默认端口3000：node app.js<br>设置端口8080：PORT=8080 node app.js</p><h3 id="app-set-name-value"><a href="#app-set-name-value" class="headerlink" title="app.set(name,value)"></a>app.set(name,value)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 views 文件夹为存放视图文件的目录, 即存放模板文件的地方,__dirname 为全局变量,存储当前正在执行的脚本所在的目录。</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">"views"</span>,<span class="string">"./views"</span>);</span><br><span class="line"><span class="comment">//设置使用的模板引擎</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs’)</span></span><br><span class="line"><span class="string">app.set("view engine","jade")</span></span><br><span class="line"><span class="string">npm install --save express-art-template</span></span><br><span class="line"><span class="string">//设置art模板引擎，后缀为art</span></span><br><span class="line"><span class="string">app.engine('</span>art<span class="string">', require('</span>express-art-template<span class="string">'));</span></span><br></pre></td></tr></table></figure><h3 id="app-get-name"><a href="#app-get-name" class="headerlink" title="app.get(name)"></a>app.get(name)</h3><p>返回name的value值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例一</span></span><br><span class="line">app.get(<span class="string">'title'</span>);</span><br><span class="line"><span class="comment">// =&gt; undefined</span></span><br><span class="line">app.set(<span class="string">'title'</span>, <span class="string">'My Site'</span>);</span><br><span class="line">app.get(<span class="string">'title'</span>);</span><br><span class="line"><span class="comment">// =&gt; "My Site"</span></span><br><span class="line"><span class="comment">//实例二</span></span><br><span class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="app-get-path-callback-callback-…"><a href="#app-get-path-callback-callback-…" class="headerlink" title="app.get(path, callback [, callback …])"></a>app.get(path, callback [, callback …])</h3><h3 id="app-all-path-callback-callback-…"><a href="#app-all-path-callback-callback-…" class="headerlink" title="app.all(path, callback [, callback …])"></a>app.all(path, callback [, callback …])</h3><p>这种方法就像标准的app.METHOD()方法, 除了它匹配所有HTTP动词。<br>访问path路径的所有方法执行的回调函数.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//* 表示匹配所有的路径</span></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.end(req.method + <span class="string">'user'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一般放在最后面防止前面的被覆盖</span></span><br></pre></td></tr></table></figure></p><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'hello world'</span>);</span><br><span class="line">  res.status(<span class="number">404</span>).send(错误请求)<span class="comment">//访问这个路径是设定状态码为404</span></span><br><span class="line">  <span class="comment">//通过res.send（）接口向客户端发送hello world，send只能响应一次，意思是只能出现一个send</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>res.send（）只能出现一次<br>如果要响应多次，用node原生的write和end，但是如果只有write会处于一个挂起状态<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.write(<span class="string">'hello world'</span>);</span><br><span class="line">  res.write(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>res.send有结束响应的作用</li><li>res.write没有结束响应的作用，需要res.end结束中间件挂起<h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3>下表中响应对象（res）的方法向客户端返回响应，终结请求响应的循环。如果在路由句柄中一个方法也不调用，来自客户端的请求会一直挂起。<br><img src="/img/express/response.jpg" width="80%"><h4 id="res-render"><a href="#res-render" class="headerlink" title="res.render()"></a>res.render()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 views 文件夹为存放视图文件的目录, 即存放模板文件的地方,__dirname 为全局变量,存储当前正在执行的脚本所在的目录。</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">"views"</span>,<span class="string">"./views"</span>);</span><br><span class="line"><span class="comment">//第一个是渲染的views文件夹下面的index，第二个是传递的数据,注意需要设置模板引擎</span></span><br><span class="line">res.render(<span class="string">"index"</span>,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="res-setHeader"><a href="#res-setHeader" class="headerlink" title="res.setHeader()"></a>res.setHeader()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//Content-Type的作用 该实体头的作用是让服务器告诉浏览器它发送的数据属于什么文件类型。</span><br><span class="line">res.setHeader(&quot;Content-Type&quot;,&apos;text/html;charset=utf-8&apos;)</span><br></pre></td></tr></table></figure><h4 id="res-redirect"><a href="#res-redirect" class="headerlink" title="res.redirect()"></a>res.redirect()</h4><p>调用redirect()方法后，其后的代码都不会被执行。<br>而使用redirect()设置的状态码不是301或302也不会发生跳转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.redirect([status,] path)</span><br><span class="line">//重定义到path所指定的URL，重定向时可以同时指定HTTP状态码，不指定状态码默认为302</span><br></pre></td></tr></table></figure></p><h4 id="res-location"><a href="#res-location" class="headerlink" title="res.location()"></a>res.location()</h4><p>location()方法本质上是调用了ServerResponse对象的setHeader()方法，但并没有设置状态码。<br>使用location()设置头信息，而不设置状态码或状态码不是301或302，并不会发生重定向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.location(path)</span><br></pre></td></tr></table></figure></p><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p><img src="/img/express/request.jpg" alt="response"></p><h4 id="req-query"><a href="#req-query" class="headerlink" title="req.query"></a>req.query</h4><p>处理 get 请求，获取 get 请求参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /search?q=tobi+ferret</span></span><br><span class="line">req.query.q</span><br><span class="line"><span class="comment">// =&gt; "tobi ferret"</span></span><br><span class="line"><span class="comment">// GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse</span></span><br><span class="line">req.query.order</span><br><span class="line"><span class="comment">// =&gt; "desc"</span></span><br><span class="line">req.query.shoe.color</span><br><span class="line"><span class="comment">// =&gt; "blue"</span></span><br><span class="line">req.query.shoe.type</span><br><span class="line"><span class="comment">// =&gt; "converse"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-body"><a href="#req-body" class="headerlink" title="req.body"></a>req.body</h4><p>处理 post 请求，获取 post 请求体<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// POST user[name]=tobi&amp;user[email]=tobi@learnboost.com</span></span><br><span class="line">req.body.user.name</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line">req.body.user.email</span><br><span class="line"><span class="comment">// =&gt; "tobi@learnboost.com"</span></span><br><span class="line"><span class="comment">// POST &#123; "name": "tobi" &#125;</span></span><br><span class="line">req.body.name</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-params"><a href="#req-params" class="headerlink" title="req.params"></a>req.params</h4><p>处理 /:xxx 形式的 get 或 post 请求，获取请求参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /user/tj</span></span><br><span class="line">req.params.name</span><br><span class="line"><span class="comment">// =&gt; "tj"</span></span><br><span class="line"><span class="comment">// GET /file/javascripts/jquery.js</span></span><br><span class="line">req.params[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// =&gt; "javascripts/jquery.js"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-param-name"><a href="#req-param-name" class="headerlink" title="req.param(name)"></a>req.param(name)</h4><p>处理 get 和 post 请求，但查找优先级由高到低为 req.params→req.body→req.query<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ?name=tobi</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line"><span class="comment">// POST name=tobi</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line"><span class="comment">// /user/tobi for /user/:name</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br></pre></td></tr></table></figure></p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>用于客户端与服务器路由匹配之前的中间操作，正常中间件放在路由上面，中间件通过next()往下走。</p><h4 id="app-use（-path-function）"><a href="#app-use（-path-function）" class="headerlink" title="app.use（[path],function）"></a>app.use（[path],function）</h4><p>利用express托管静态文件<br>node.js不能通过目录来引入文件，而express可以，public为静态目录<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置public文件夹为存放静态文件的目录。</span></span><br><span class="line"><span class="keyword">let</span> path=<span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="comment">//ex4里面唯一的内置中间件</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br></pre></td></tr></table></figure></p><p>一个中间件处理器，请求来了，让那些中间件先处理一遍</p><ul><li>没有挂载路径的中间件，应用的每个请求都会执行该中间件</li><li>挂载至 /path 的中间件，任何指向 /path 的请求都会执行它<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(&quot;/name&quot;,function(req,res,next)&#123;</span><br><span class="line">res.setHeader(&quot;Content-Type&quot;,&apos;text/html;charset=utf-8&apos;)</span><br><span class="line">next();</span><br><span class="line">&#125;)</span><br><span class="line">app.get(&quot;/name/n&quot;,function(req,res)&#123;</span><br><span class="line">&#125;)</span><br><span class="line">//也可以匹配到，在执行get请求/name/n时先执行上面的中间件</span><br></pre></td></tr></table></figure></li></ul><h4 id="错误中间件"><a href="#错误中间件" class="headerlink" title="错误中间件"></a>错误中间件</h4><p>错误处理中间件和其他中间件定义类似，只是必须要使用 4 个参数(err, req, res, next)。即使不需要 next 对象，也必须在签名中声明它，否则中间件会被识别为一个常规中间件，不能处理错误。遇见错误之后直接执行错误中间件。<br>错误处理中间件应当在在其他 app.use() 和路由调用之后才能加载，一般放在路由的最底部，比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> methodOverride = <span class="built_in">require</span>(<span class="string">'method-override'</span>);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line">app.use(methodOverride());</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">'Something broke!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="应用生成器"><a href="#应用生成器" class="headerlink" title="应用生成器"></a>应用生成器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">$ npm install express-generator -g</span><br><span class="line"><span class="comment">//view=XXX 使用引擎名字  myapp项目名称</span></span><br><span class="line">$ express --view=pug myapp</span><br><span class="line"><span class="comment">//安装所有依赖</span></span><br><span class="line">$ cd myapp</span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动myapp项目</span></span><br><span class="line">$ set DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure><hr><p>我的石墨文档链接：<a href="https://shimo.im/docs/TXeewzaE8Jsdgn0I/" target="_blank" rel="noopener">https://shimo.im/docs/TXeewzaE8Jsdgn0I/</a><br>练习的简易聊天室连接：<a href="https://github.com/biubiuins/demo_chat" target="_blank" rel="noopener">https://github.com/biubiuins/demo_chat</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;express-学习笔记&quot;&gt;&lt;a href=&quot;#express-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;express 学习笔记&quot;&gt;&lt;/a&gt;express 学习笔记&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;搭建简单服务器&quot;&gt;&lt;a href=&quot;#搭
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>project_email</title>
    <link href="http://yoursite.com/2018/10/11/project-email/"/>
    <id>http://yoursite.com/2018/10/11/project-email/</id>
    <published>2018-10-11T07:16:32.000Z</published>
    <updated>2018-10-12T06:37:09.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="邮件收发项目"><a href="#邮件收发项目" class="headerlink" title="邮件收发项目"></a>邮件收发项目</h2><p>大二上开始学html，css，js之后做的暑假做的前端页面，很感谢老师可以给一个练手的机会，在做的过程中发现了很多问题，以及项目完成之后的收获。<br>&nbsp;&nbsp;&nbsp;&nbsp;虽然是一个很简单的界面，但是之前学习的时候不太仔细，也没有demo练习，还是做的磕磕绊绊，还好最后做的差不多了。TAT<br>&nbsp;&nbsp;针对过程中的问题，阅读了很多关于语法规范的文章，js，jq又重新学习了一遍（练习了很多），大二下期基本在学习之中度过的。希望在以后的项目中可以有所进步，彻底的实现前后端分离！！！</p><h2 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h2><ul><li>完成时间：大二上期寒假  2018-3月左右</li><li>bootsrap框架，layui框架，jquery</li></ul><h2 id="项目不足"><a href="#项目不足" class="headerlink" title="项目不足"></a>项目不足</h2><ul><li>语法不规范，复用性不强，后面修改过一次感觉修改起来很复杂</li><li>js不熟练，项目之后大二下期又重新开始学习了一遍js，并写了总结 (<a href="https://biubiuins.github.io/2018/10/11/summary-2018-9/" target="_blank" rel="noopener">https://biubiuins.github.io/2018/10/11/summary-2018-9/</a>)</li><li><p>技术不足，没有实现前后端分离</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2></li><li><p>首页 <a href="http://mailroom.sicau.edu.cn/email/public/" target="_blank" rel="noopener">http://mailroom.sicau.edu.cn/email/public/</a></p><ul><li>bootsrap做了响应式，用了ajax请求数据</li></ul></li><li>管理页面（需要登陆仅提供图片）<br><img src="/img/project_email/admin.png" width="85%"><ul><li>实现全选与批量删除</li><li>点击已取之后，重新获取数据（保证筛选邮件之后点击已取仍显示的是筛选之后的邮件)</li><li>邮件类型默认显示上一次选择的类型，可输入筛选的下拉框<br><img src="/img/project_email/admin1.png" width="85%"></li><li>超级管理员界面实现了原生js模态框，并做了根据屏幕居中</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;邮件收发项目&quot;&gt;&lt;a href=&quot;#邮件收发项目&quot; class=&quot;headerlink&quot; title=&quot;邮件收发项目&quot;&gt;&lt;/a&gt;邮件收发项目&lt;/h2&gt;&lt;p&gt;大二上开始学html，css，js之后做的暑假做的前端页面，很感谢老师可以给一个练手的机会，在做的过程中发现
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>summary-2018.9</title>
    <link href="http://yoursite.com/2018/10/11/summary-2018-9/"/>
    <id>http://yoursite.com/2018/10/11/summary-2018-9/</id>
    <published>2018-10-11T04:32:50.000Z</published>
    <updated>2018-10-11T06:11:08.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="summary-2018-9"><a href="#summary-2018-9" class="headerlink" title="summary-2018-9"></a>summary-2018-9</h1><hr><p>这是在学会搭建博客之后的第一篇博客，以前学习的时候也有记笔记，所以把之前学习笔记上面整理的常见的功能、封装以及遇到的问题写出来，这篇仅限于js，jq。现在正在学习vue，希望在过段时间，自己也能写出关于vue学习的总结。<br>在此之前还需要了解markdown的语法TAT</p><blockquote><p>原来的笔记记录在石墨文档，<a href="https://shimo.im/docs/c8YrJy4obNICaWiS/" target="_blank" rel="noopener">https://shimo.im/docs/c8YrJy4obNICaWiS/</a></p></blockquote><h2 id="ID处理"><a href="#ID处理" class="headerlink" title="ID处理"></a>ID处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 获取id */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> id === <span class="string">"string"</span> ? <span class="built_in">document</span>.getElementById(id) : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="匀速动画"><a href="#匀速动画" class="headerlink" title="匀速动画"></a>匀速动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素，目标，步数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constant</span>(<span class="params">obj, target, speed</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 清除定时器</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="comment">//2.判断方向</span></span><br><span class="line">    <span class="comment">//如果现在的距离小于目标值,则往右，否则向左</span></span><br><span class="line">    <span class="keyword">let</span> dir =obj.offsetLeft&lt;target?speed:-speed;</span><br><span class="line">    <span class="comment">//3. 设置定时器</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        obj.style.left = obj.offsetLeft + dir + <span class="string">"px"</span>;</span><br><span class="line">        <span class="comment">//若超出目标值或者不到目标值</span></span><br><span class="line">        <span class="comment">//最后相减的值取绝对值后，总是小于步数的</span></span><br><span class="line">        <span class="comment">//Math.abs(dir)||speed</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(target-obj.offsetLeft)&lt;<span class="built_in">Math</span>.abs(dir))&#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">//根据目标值板正</span></span><br><span class="line">            obj.style.left =target+<span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buffer</span>(<span class="params">obj, json, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 清除定时器</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="keyword">var</span> begin = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 设置定时器</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.0 旗帜, 决定动画是否结束</span></span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 2.1 遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> json)&#123;</span><br><span class="line">            <span class="comment">// 2.2.-1 求出起始值 和 结束值</span></span><br><span class="line">            <span class="keyword">if</span>(k === <span class="string">'opacity'</span>)&#123; <span class="comment">// 透明度</span></span><br><span class="line">                begin = <span class="built_in">parseInt</span>( <span class="built_in">parseFloat</span>(getCssAttr(obj, k)) * <span class="number">100</span>);</span><br><span class="line">                end = <span class="built_in">parseInt</span>(<span class="built_in">parseFloat</span>(json[k]) * <span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'scrollTop'</span>)&#123; <span class="comment">// 滚动到头部</span></span><br><span class="line">                begin = obj.scrollTop;</span><br><span class="line">                end = <span class="built_in">parseInt</span>(json[k]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">// 正常情况</span></span><br><span class="line">                begin = <span class="built_in">parseInt</span>(getCssAttr(obj, k));</span><br><span class="line">                end = <span class="built_in">parseInt</span>(json[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2.0 求出步长</span></span><br><span class="line">            <span class="comment">//步长公式</span></span><br><span class="line">            <span class="keyword">let</span> step = (end - begin) * <span class="number">0.2</span>;</span><br><span class="line">            step = step &gt;=<span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">            <span class="comment">// 2.2.1 计算起始位置</span></span><br><span class="line">            <span class="keyword">if</span>(k === <span class="string">'opacity'</span>)&#123;</span><br><span class="line">                obj.style.opacity = (begin + step) / <span class="number">100</span>;</span><br><span class="line">                obj.style.filter = <span class="string">'alpha(opacity='</span> + (begin + end)+<span class="string">')'</span>; <span class="comment">// 针对IE</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'scrollTop'</span>)&#123;</span><br><span class="line">                obj.scrollTop = begin + step;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'zIndex'</span>)&#123;</span><br><span class="line">                obj.style[k] = json[k];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                obj.style[k] = begin + step + <span class="string">'px'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2.2 判断</span></span><br><span class="line">            <span class="keyword">if</span>(begin !== end)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.0 结束动画</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">// 开启动画组中的下一组动画</span></span><br><span class="line">            <span class="keyword">if</span>(fn)&#123; <span class="comment">// 判断有没有这个函数</span></span><br><span class="line">                fn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="js获取CSS"><a href="#js获取CSS" class="headerlink" title="js获取CSS"></a>js获取CSS</h4><p>利用 [] 访问属性 元素.style[“属性”];<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种语法的好处就是可以动态的传递参数作为属性</span></span><br><span class="line"><span class="comment">//只能获取行类标签</span></span><br><span class="line">     <span class="keyword">var</span> h = <span class="string">'height'</span>;</span><br><span class="line">     box.style[h] = <span class="number">300</span> + <span class="string">'px'</span>;</span><br><span class="line"><span class="comment">//获取外部css或页内的css</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyleAttr</span>(<span class="params">obj, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.currentStyle)&#123; <span class="comment">// IE 和 opera</span></span><br><span class="line">         <span class="keyword">return</span> obj.currentStyle[attr];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//window.getComputedStyle("元素", "伪类") （ 注意：两个选项是必须的，没有伪类 用 null 替代 ）</span></span><br><span class="line">    <span class="comment">//也可以点选，但是为了传递参数作为属性</span></span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(obj, <span class="literal">null</span>)[attr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><ul><li>在定时器事件前，先设置接收定时器的变量指向null</li><li>在定时器事件里，先要清除定时器再设置定时器，先清除是防止定时器累加<h2 id="轮播"><a href="#轮播" class="headerlink" title="轮播"></a>轮播</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3>这种不适合多图<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slider</span> (<span class="params">sliderid,olStyleClassName,imgWidth,speed,second</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//高级排他</span></span><br><span class="line">    <span class="comment">//lastIndex 选中的小圆点样式 currentIndex 小圆点索引  picIndex 图片索引</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex=<span class="number">0</span>,currentIndex=<span class="number">0</span>,picIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1. 获取需要的标签</span></span><br><span class="line">    <span class="keyword">let</span> ul=$(sliderid).children[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span>  ol=$(sliderid).children[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> list=ul.children;</span><br><span class="line">    <span class="keyword">let</span> olList= ol.children;</span><br><span class="line">    <span class="comment">// 2.克隆最后一个li标签</span></span><br><span class="line">    ul.appendChild(list[<span class="number">0</span>].cloneNode(<span class="literal">true</span>));</span><br><span class="line">    <span class="comment">// 3.动态创建小圆点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;list.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> li =<span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">        ol.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.第一个小圆点选中</span></span><br><span class="line">    olList[<span class="number">0</span>].className=olStyleClassName;</span><br><span class="line">    <span class="comment">//5.监听每个li的进入事件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;olList.length;i++)&#123;</span><br><span class="line">        <span class="comment">//5.1 每一个li绑定自己的事件</span></span><br><span class="line">        olList[i].onmouseover=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//先清除之前的选中状态，在把当前选中的索引给lastIndex</span></span><br><span class="line">            lastIndex=currentIndex;</span><br><span class="line">            olList[lastIndex].className=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">this</span>.className=olStyleClassName;</span><br><span class="line">            lastIndex=i;</span><br><span class="line">            <span class="comment">//5.2图片动起来</span></span><br><span class="line">            constant(ul,-(i * imgWidth),speed);</span><br><span class="line">            currentIndex=picIndex=i;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.定时器</span></span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    timer = setInterval(autoPlay, second);</span><br><span class="line">    <span class="comment">// 7. 清除和设置定时器</span></span><br><span class="line">    $(sliderid).onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;;</span><br><span class="line">    $(sliderid).onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        timer = setInterval(autoPlay, second);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        picIndex++;</span><br><span class="line">        currentIndex++;</span><br><span class="line">        <span class="comment">//如果图片到了最后一张</span></span><br><span class="line">        <span class="keyword">if</span> (picIndex &gt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">            ul.style.left = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//从第二张图片开始</span></span><br><span class="line">            picIndex = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        constant(ul, -(picIndex * imgWidth), speed);</span><br><span class="line">        <span class="comment">//小原点的选中</span></span><br><span class="line">        <span class="keyword">if</span> (currentIndex &gt; olList.length - <span class="number">1</span>) &#123;</span><br><span class="line">            currentIndex = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;olList.length;i++)&#123;</span><br><span class="line">            olList[i].className=<span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        olList[currentIndex].className=olStyleClassName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>两个图片宽度的位置，第一个位置显示（当前），第二位置隐藏<br><img src="/img/summary-2018.9/summary01.png" alt="轮播图"></p><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>改变透明度，循环一遍让所有的opacity动画为0，然后当前为opacity动画为1，索引++、<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opacityAutoPlay</span>(<span class="params">ulid,speed</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取所有的li标签</span></span><br><span class="line">    <span class="keyword">var</span> lis = $(ulid).getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 开始定时器</span></span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.1 改变透明度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;lis.length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> singerLi = lis[i];</span><br><span class="line">            buffer(singerLi, &#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer(lis[index], &#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 2.2 索引++</span></span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(index === lis.length)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, speed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h2><ul><li>父盒子居中<ol><li>Math.floor(屏幕宽度/子盒子宽度)=cols</li><li>子盒子的宽度*cols=父盒子的宽度</li><li>margin:0 auto;</li></ol></li><li><p>子盒子定位<br>第一行不变，其他子盒子接在第一行最矮的盒子的后面（反复）</p><ol><li>拿到所有盒子的高度。把第一行的盒子的高度放在一个数组里面（i&lt;cols,heightArr[])</li><li>在剩下的盒子里面(i&gt;=cols),找出第一行最矮的盒子的高度（Math.min(…heightArr)||Math.min.apply(this.height)）<br>2.1 找出最矮盒子的索引(遍历heightArr[],找出和第二步盒子高度一样的i返回)<br>2.2 剩下盒子定位（left=第2.1步的索引*子盒子宽度，top=最矮的盒子高度）<br>2.3 更新最矮盒子的高度 （heightArr[最矮盒子的高度]+=当前盒子的高度）</li></ol><ul><li>滚动加载图片</li></ul><ol><li>监听窗口的滚动，滚动到你需要的位置加载</li></ol><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 实现瀑布流布局</span></span><br><span class="line">    waterFull(<span class="string">"main"</span>, <span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 动态加载图片</span></span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(checkWillLoadImage())&#123;</span><br><span class="line">            <span class="comment">// 2.1 造数据</span></span><br><span class="line">            <span class="keyword">var</span> dataArr = [</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img04.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img06.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img08.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img09.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img10.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img12.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img14.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img16.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img18.jpg"</span>&#125;</span><br><span class="line">            ];</span><br><span class="line">            <span class="comment">// 2.2 创建元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;dataArr.length; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> newBox = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">                newBox.className = <span class="string">"box"</span>;</span><br><span class="line">                $(<span class="string">"main"</span>).appendChild(newBox);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> newPic = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">                newPic.className = <span class="string">"pic"</span>;</span><br><span class="line">                newBox.appendChild(newPic);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> newImg = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">                newImg.src = <span class="string">"images/"</span> + dataArr[i].src;</span><br><span class="line">                newPic.appendChild(newImg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.3 重新布局</span></span><br><span class="line">            waterFull(<span class="string">"main"</span>, <span class="string">"box"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现瀑布流布局</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterFull</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 父盒子居中</span></span><br><span class="line">    <span class="comment">// 1.1 获取所有的盒子</span></span><br><span class="line">    <span class="keyword">var</span> allBox = $(parent).getElementsByClassName(child);</span><br><span class="line">    <span class="comment">// 1.2 获取子盒子的宽度</span></span><br><span class="line">    <span class="keyword">var</span> boxWidth = allBox[<span class="number">0</span>].offsetWidth;</span><br><span class="line">    <span class="comment">// 1.3 获取屏幕的宽度</span></span><br><span class="line">    <span class="keyword">var</span> screenW = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">    <span class="comment">// 1.4 求出列数</span></span><br><span class="line">    <span class="keyword">var</span> cols = <span class="built_in">parseInt</span>(screenW / boxWidth);</span><br><span class="line">    <span class="comment">// 1.5 父盒子居中</span></span><br><span class="line">    $(parent).style.width = cols * boxWidth + <span class="string">'px'</span>;</span><br><span class="line">    $(parent).style.margin = <span class="string">"0</span></span><br><span class="line"><span class="string">    // 2. 子盒子的定位</span></span><br><span class="line"><span class="string">    // 2.1 定义高度数组</span></span><br><span class="line"><span class="string">    var heightArr = [], boxHeight = 0, minBoxHeight = 0, minBoxIndex = 0;</span></span><br><span class="line"><span class="string">    // 2.2 遍历子盒子</span></span><br><span class="line"><span class="string">    for (var i = 0; i &lt; allBox.length; i++) &#123;</span></span><br><span class="line"><span class="string">        // 2.2.1 求出每一个子盒子的高度</span></span><br><span class="line"><span class="string">        boxHeight = allBox[i].offsetHeight;</span></span><br><span class="line"><span class="string">        // 2.2.2 取出第一行盒子的高度放入高度数组</span></span><br><span class="line"><span class="string">        if (i &lt; cols) &#123; // 第一行</span></span><br><span class="line"><span class="string">            heightArr.push(boxHeight);</span></span><br><span class="line"><span class="string">        &#125; else &#123; // 剩余行</span></span><br><span class="line"><span class="string">            // 1. 取出最矮的盒子高度</span></span><br><span class="line"><span class="string">            // minBoxHeight = _.min(heightArr);</span></span><br><span class="line"><span class="string">            minBoxHeight=Math.min(...heightArr);</span></span><br><span class="line"><span class="string">            // 2. 求出最矮盒子对应的索引</span></span><br><span class="line"><span class="string">            minBoxIndex = getMinBoxIndex(heightArr, minBoxHeight);</span></span><br><span class="line"><span class="string">            // 3. 子盒子定位</span></span><br><span class="line"><span class="string">            allBox[i].style.position = "</span>absolute<span class="string">";</span></span><br><span class="line"><span class="string">            allBox[i].style.left = minBoxIndex * boxWidth + 'px';</span></span><br><span class="line"><span class="string">            allBox[i].style.top = minBoxHeight + 'px';</span></span><br><span class="line"><span class="string">            // 4. 更新数组中的高度</span></span><br><span class="line"><span class="string">            heightArr[minBoxIndex] += boxHeight;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    console.log(heightArr, minBoxHeight, minBoxIndex);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 获取数组中最矮盒子高度的索引</span></span><br><span class="line"><span class="string"> * @param arr</span></span><br><span class="line"><span class="string"> * @param val</span></span><br><span class="line"><span class="string"> * @returns &#123;number&#125;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function getMinBoxIndex(arr, val) &#123;</span></span><br><span class="line"><span class="string">    for(var i=0; i&lt;arr.length; i++)&#123;</span></span><br><span class="line"><span class="string">        if(arr[i] === val)&#123;</span></span><br><span class="line"><span class="string">            return i;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 判断是否具备加载图片的条件</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function checkWillLoadImage() &#123;</span></span><br><span class="line"><span class="string">    // 1. 获取最后一个盒子</span></span><br><span class="line"><span class="string">    var allBox = document.getElementsByClassName("</span>box<span class="string">");</span></span><br><span class="line"><span class="string">    var lastBox = allBox[allBox.length - 1];</span></span><br><span class="line"><span class="string">    // 2. 求出最后一个盒子自身高度的一半 + offsetTop</span></span><br><span class="line"><span class="string">    var lastBoxDis = lastBox.offsetHeight * 0.5 + lastBox.offsetTop;</span></span><br><span class="line"><span class="string">    // 3. 求出屏幕的高度</span></span><br><span class="line"><span class="string">    var screenW = document.body.clientHeight || document.documentElement.clientHeight;</span></span><br><span class="line"><span class="string">    // 4. 求出页面偏离浏览器的高度</span></span><br><span class="line"><span class="string">    var scrollTop = scroll().top;</span></span><br><span class="line"><span class="string">    return lastBoxDis &lt;= screenW + scrollTop;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>jq<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当页面加载完毕</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'load'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//1.实现瀑布流布局</span></span><br><span class="line">waterFall();</span><br><span class="line"><span class="comment">//2.滚动加载</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//判断是否加载</span></span><br><span class="line"><span class="keyword">if</span> (checkWillLoad())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">////创造假数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="string">'dataImg'</span>:[&#123;<span class="string">'img'</span>:<span class="string">'23.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'24.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'25.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'26.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'27.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'28.jpg'</span>&#125;]&#125;;</span><br><span class="line"><span class="comment">//遍历创建盒子</span></span><br><span class="line">$.each(data.dataImg,<span class="function"><span class="keyword">function</span> (<span class="params">index,value</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个div标签 设置它的类为'box' 添加到'main'里面去</span></span><br><span class="line"><span class="keyword">var</span> newBox = $(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'box'</span>).appendTo($(<span class="string">'#main'</span>));</span><br><span class="line">    <span class="keyword">var</span> newPic = $(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'pic'</span>).appendTo($(newBox));</span><br><span class="line">        <span class="comment">//创建img  取出遍历的对象value的img属性对应的值</span></span><br><span class="line">     $(<span class="string">'&lt;img&gt;'</span>).attr(<span class="string">'src'</span>,<span class="string">'images/'</span>+$(value).attr(<span class="string">'img'</span>)).appendTo($(newPic));</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//1.实现瀑布流布局</span></span><br><span class="line">        waterFall();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//实现瀑布流布局</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">waterFall</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//拿到所有的盒子</span></span><br><span class="line">        <span class="keyword">var</span> allBox = $(<span class="string">'#main &gt; .box'</span>);</span><br><span class="line">        <span class="comment">//取出其中一个盒子的宽度</span></span><br><span class="line">        <span class="keyword">var</span> boxWidth = $(allBox).eq(<span class="number">0</span>).outerWidth();</span><br><span class="line">        <span class="comment">//取出屏幕的高度</span></span><br><span class="line">        <span class="keyword">var</span> screenWidth = $(<span class="built_in">window</span>).width();</span><br><span class="line">        <span class="comment">//求出列数 //取整函数取整</span></span><br><span class="line">        <span class="keyword">var</span> cols = <span class="built_in">Math</span>.floor( screenWidth/boxWidth);</span><br><span class="line">        <span class="comment">//父标签居中</span></span><br><span class="line">        $(<span class="string">'#main'</span>).css(&#123;</span><br><span class="line">        <span class="string">'width'</span>:cols * boxWidth + <span class="string">'px'</span>,</span><br><span class="line">        <span class="string">'margin'</span>:<span class="string">'0 auto'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//对子盒子定位</span></span><br><span class="line">        <span class="keyword">var</span> heightArr = [];</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        $.each(allBox,<span class="function"><span class="keyword">function</span> (<span class="params">index,value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//取出单独盒子的高度</span></span><br><span class="line">        <span class="keyword">var</span> boxHeight = $(value).outerHeight();</span><br><span class="line">        <span class="comment">//判断是否第一行</span></span><br><span class="line">        <span class="keyword">if</span>(index &lt; cols)</span><br><span class="line">        &#123;</span><br><span class="line">        heightArr[index] = boxHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">//剩余的盒子要瀑布流布局</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//求出最矮的盒子高度</span></span><br><span class="line">        <span class="keyword">var</span> minBoxHeight = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,heightArr);</span><br><span class="line">        <span class="comment">//取出最矮高度对应的索引  封装了js的这个方法</span></span><br><span class="line">        <span class="keyword">var</span> minBoxIndex = $.inArray(minBoxHeight,heightArr);</span><br><span class="line">        <span class="comment">//定位</span></span><br><span class="line">        $(value).css(&#123;</span><br><span class="line">        <span class="string">'position'</span>:<span class="string">'absolute'</span>,</span><br><span class="line">        <span class="string">'top'</span>:minBoxHeight + <span class="string">'px'</span>,</span><br><span class="line">        <span class="string">'left'</span>:minBoxIndex * boxWidth + <span class="string">'px'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//更新数组中最矮的高度</span></span><br><span class="line">        heightArr[minBoxIndex] += boxHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否符合加载条件</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkWillLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//直接取出最后一个盒子</span></span><br><span class="line">        <span class="keyword">var</span> lastBox = $(<span class="string">'#main &gt; div'</span>).last();</span><br><span class="line">        <span class="comment">//取出最后一个盒子高度的一半 + 头部偏离的位置</span></span><br><span class="line">        <span class="keyword">var</span> lastBoxDis = $(lastBox).outerHeight() + $(lastBox).offset().top;</span><br><span class="line">        <span class="comment">//求出浏览器的高度</span></span><br><span class="line">        <span class="keyword">var</span> clientHeight = $(<span class="built_in">window</span>).height();</span><br><span class="line">        <span class="comment">//求出页面偏离浏览器高度</span></span><br><span class="line">        <span class="keyword">var</span> scrollTopHeight = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">        <span class="comment">//比较返回</span></span><br><span class="line">        <span class="keyword">return</span> lastBoxDis &lt;= clientHeight + scrollTopHeight;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h4 id="margin-0-auto"><a href="#margin-0-auto" class="headerlink" title="margin:0 auto"></a>margin:0 auto</h4><ol><li>块级元素</li><li>给定要居中的块级元素的宽度。</li><li>所有元素也可以通过对父元素设置<code>text-align：center；</code>的方式来实现居中。而对于块元素来说，对要居中的元素自身进行设置<code>text-align:center</code>也能实现居中</li><li><code>margin:0 auto;</code>可以使盒子居中，<code>text-align:center;</code>可以使文本居中，<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4>onresize举列子<br>窗口大小一变化就执行，太过灵敏，所以需要阻止<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用定时器</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    <span class="comment">// 节流</span></span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        waterFull(<span class="string">'main'</span>, <span class="string">'box'</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装之后的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(fn, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="apply-call"><a href="#apply-call" class="headerlink" title="apply/call"></a>apply/call</h4><p>这个面试中常考到，现在只做初步了解<br>(<a href="https://www.cnblogs.com/gaowx/p/4837687.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaowx/p/4837687.html</a> )</p><ul><li>改变函数的this指向</li><li>apply可以改变传递给函数参数的形式<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newDate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//声明日期对象，里面可以设置参数表示其他时间</span></span><br><span class="line">  <span class="keyword">let</span> date =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="comment">//获取时间里面的年</span></span><br><span class="line">  date.getFullYear()</span><br><span class="line">  <span class="comment">//月0-11</span></span><br><span class="line">  date.getMonth()+<span class="number">1</span></span><br><span class="line">  <span class="comment">//日1-31</span></span><br><span class="line">  date.getDate()</span><br><span class="line">  <span class="comment">//获取星期0-6</span></span><br><span class="line">  data.Day</span><br><span class="line">  <span class="comment">//设置某一天</span></span><br><span class="line">  date.setDate（day）</span><br><span class="line">  <span class="comment">//时0-23</span></span><br><span class="line">  date.getHours()</span><br><span class="line">  <span class="comment">//分0-59</span></span><br><span class="line">  date.getMinutes()</span><br><span class="line">  <span class="comment">//秒0-59</span></span><br><span class="line">  date.getSeconds()</span><br><span class="line">  <span class="comment">//获取毫秒</span></span><br><span class="line">  date.getMilliSeconds()</span><br><span class="line">  <span class="comment">//时间戳</span></span><br><span class="line">  date.getTime()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ms转化时间"><a href="#ms转化时间" class="headerlink" title="ms转化时间"></a>ms转化时间</h3><p><img src="/img/summary-2018.9/data.jpg" alt="data"></p><h2 id="cookie封装"><a href="#cookie封装" class="headerlink" title="cookie封装"></a>cookie封装</h2><p>封装成插件，引入该文件后，$.addCookie(key,value,day,path,domain)来引用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$,window</span>) </span>&#123;</span><br><span class="line">    $.extend(&#123;</span><br><span class="line">        addCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">addCookie</span>(<span class="params">key,value,day,path,domain</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//1.处理默认保存的路径</span></span><br><span class="line">        <span class="keyword">var</span> index=<span class="built_in">window</span>.location.pathname.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line">        <span class="keyword">var</span> currentPath=<span class="built_in">window</span>.location.pathname.slice(<span class="number">0</span>,index)</span><br><span class="line">        path=path||currentPath</span><br><span class="line">        <span class="comment">//2.处理默认domain</span></span><br><span class="line">        domain=domain||<span class="built_in">document</span>.domain</span><br><span class="line">        <span class="comment">//3.处理默认的过期时间</span></span><br><span class="line">        <span class="keyword">if</span>(!day)&#123;</span><br><span class="line">          <span class="built_in">document</span>.cookie=key+<span class="string">"="</span>+value+<span class="string">";path="</span>+path+<span class="string">";domain="</span>+domain+<span class="string">';'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> date =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            date.setDate(date.getDate()+day)</span><br><span class="line">            <span class="built_in">document</span>.cookie=key+<span class="string">"="</span>+value+<span class="string">";expires="</span>+date.toGMTString()+<span class="string">";path="</span>+path+<span class="string">";domain="</span>+domain+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        getCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> res=<span class="built_in">document</span>.cookie.split(<span class="string">';'</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++)&#123;</span><br><span class="line">        <span class="comment">//把key和value切割</span></span><br><span class="line">            <span class="keyword">var</span> temp=res[i].split(<span class="string">'='</span>)</span><br><span class="line">            <span class="comment">//前后可能有空格，把空格删除</span></span><br><span class="line">            <span class="keyword">if</span>(temp[<span class="number">0</span>].trim()===key)&#123;</span><br><span class="line">                <span class="keyword">return</span> temp[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        delCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">delCookie</span>(<span class="params">key, path</span>) </span>&#123;</span><br><span class="line">         <span class="comment">//默认情况下只能删除默认路径中保存的cookie，如果要删除指定路径保存的cookie，要把路径值传出去</span></span><br><span class="line">         <span class="comment">//设置过期时间为-1</span></span><br><span class="line">                addCookie(key, getCookie(key), <span class="number">-1</span>, path)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery,<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><h2 id="动态添加的元素绑定事件"><a href="#动态添加的元素绑定事件" class="headerlink" title="动态添加的元素绑定事件"></a>动态添加的元素绑定事件</h2><ul><li><p>delegate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;ul&apos;).delegate(&apos;li&apos;,&apos;click&apos;,function()&#123;</span><br><span class="line">//操作的还是li</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>onclick事件<br>在动态添加数据的时候，就给元素绑定onclick事件</p></li><li>on（）<br>常用  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//把动态添加的元素写在on里面，如果调用的函数是外部定义好的，则在调用的时候不加（）</span><br><span class="line">//不然会跳过点击事件直接执行函数</span><br><span class="line">$(&quot;父元素或祖辈元素&quot;).on(&quot;click&quot;,&quot;动态添加的元素&quot;,function()&#123;</span><br><span class="line">$(this).css(&quot;border&quot;,&quot;5px solid #000&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h3><p><a href="http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css" target="_blank" rel="noopener">http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css</a></p><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拿到select对象：</span></span><br><span class="line"><span class="keyword">var</span> myselect=<span class="built_in">document</span>.getElementById(<span class="string">"select"</span>);</span><br><span class="line"><span class="comment">//拿到选中项的索引</span></span><br><span class="line"><span class="keyword">var</span> index=myselect.selectedIndex ; <span class="comment">// selectedIndex代表的是你所选中项的index</span></span><br><span class="line"><span class="comment">//拿到选中项options的value：</span></span><br><span class="line">myselect.options[index].value;</span><br><span class="line"><span class="comment">//拿到选中项options的text：</span></span><br><span class="line">myselect.options[index].text;</span><br><span class="line"><span class="comment">//拿到选中项的其他值，比如这里的url：</span></span><br><span class="line"> myselect.options[index].getAttribute(<span class="string">'url'</span>);</span><br><span class="line"><span class="comment">//jquery</span></span><br><span class="line">var options=$(“#select option:selected”); //获取选中的项</span><br><span class="line">alert(options.val()); <span class="comment">//拿到选中项的值</span></span><br><span class="line">alert(options.text()); <span class="comment">//拿到选中项的文本</span></span><br><span class="line">alert(options.attr(<span class="string">'url'</span>)); <span class="comment">//拿到选中项的url值</span></span><br><span class="line"><span class="comment">//设置</span></span><br><span class="line"><span class="comment">//设置value为pxx的项选中</span></span><br><span class="line">$(<span class="string">".selector"</span>).val(<span class="string">"pxx"</span>)</span><br><span class="line"><span class="comment">//设置text为pxx的项选中</span></span><br><span class="line">$(<span class="string">".selector"</span>).find(<span class="string">"option[text='pxx']"</span>).attr(<span class="string">"selected"</span>,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="H5-datalist"><a href="#H5-datalist" class="headerlink" title="H5 datalist"></a>H5 datalist</h3><p>datalist 只是列表<br>赋值取值还是通过input.样式等都在input上操作<br><a href="https://www.zhangxinxu.com/wordpress/2013/03/html5-datalist-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8-%E5%8F%AF%E8%A1%8C%E6%80%A7/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2013/03/html5-datalist-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8-%E5%8F%AF%E8%A1%8C%E6%80%A7/</a></p><h4 id="邮箱的自动补全"><a href="#邮箱的自动补全" class="headerlink" title="邮箱的自动补全"></a>邮箱的自动补全</h4><p>HTML代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">邮箱：&lt;input type=&quot;email&quot; id=&quot;email&quot; list=&quot;emailList&quot; name=&quot;off_autocomplete&quot; /&gt;</span><br><span class="line">&lt;datalist id=&quot;emailList&quot;&gt;</span><br><span class="line">//其中*为占位符，当文本框输入内容的时候，*替换成邮箱地址的前半部分，于是，动态邮件地址提示的效果就实现了</span><br><span class="line">    &lt;option value=&quot;*@qq.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@163.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@gmail.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@yahoo.com.cn&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@126.com&quot;&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br></pre></td></tr></table></figure></p><p>JS代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eleList = <span class="built_in">document</span>.getElementById(<span class="string">"emailList"</span>)</span><br><span class="line">    , eleMail = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>)</span><br><span class="line">    , htmlListInit = <span class="string">''</span>, arrEmailList = [];</span><br><span class="line"><span class="keyword">if</span> (eleMail &amp;&amp; eleList &amp;&amp; (htmlListInit = eleList.innerHTML) !== <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// 得到类似["qq.com", "163.com", "gmail.com", ...]的数据</span></span><br><span class="line">    arrEmailList = [].slice.call(eleList.getElementsByTagName(<span class="string">"option"</span>)).map(<span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> option.value.replace(<span class="string">"*@"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    eleMail.fnListReplace = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arrValue = <span class="keyword">this</span>.value.trim().split(<span class="string">"@"</span>);</span><br><span class="line">        <span class="comment">// 修复FireFox浏览器下无限input问题</span></span><br><span class="line">        <span class="comment">// 如果值不完全匹配某option值，执行动态替换</span></span><br><span class="line">        <span class="keyword">if</span> (arrValue.length !== <span class="number">2</span> || arrEmailList.indexOf(arrValue[<span class="number">1</span>]) === <span class="number">-1</span>) &#123;</span><br><span class="line">            eleList.innerHTML = htmlListInit.replace(<span class="regexp">/\*/g</span>, arrValue[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 绑定输入事件侦听</span></span><br><span class="line">    eleMail.addEventListener(<span class="string">"input"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fnListReplace.call(<span class="keyword">this</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//  载入即匹配</span></span><br><span class="line">    eleMail.fnListReplace.call(eleMail).focus();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    eleList = <span class="built_in">document</span>.createElement(<span class="string">"datalist"</span>);</span><br><span class="line">    eleList.innerHTML = <span class="string">'&lt;p class=sorry&gt;抱歉，当前浏览器不支持HTML5 datalist.&lt;/p&gt;'</span>;</span><br><span class="line">    eleMail.parentNode.appendChild(eleList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="jquery-editable-select控件"><a href="#jquery-editable-select控件" class="headerlink" title="jquery.editable-select控件"></a>jquery.editable-select控件</h4><p>引入<br>jquery.editable-select.css<br>jquery.editable-select.js<br>调用方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#editable-select'</span>).editableSelect(&#123;</span><br><span class="line">    bg_iframe: <span class="literal">true</span>, <span class="comment">//是否加iframe</span></span><br><span class="line">    case_sensitive: <span class="literal">false</span>,</span><br><span class="line">    items_then_scroll: <span class="number">10</span> ,<span class="comment">//设置下拉选项的数目</span></span><br><span class="line">    isFilter:<span class="literal">false</span>/<span class="literal">true</span>,    <span class="comment">//是否根据条件过滤下拉选项</span></span><br><span class="line">    onCreate:,            <span class="comment">//当输入时触发</span></span><br><span class="line">    onShow：,             <span class="comment">//当下拉时触发</span></span><br><span class="line">    onHide：,              <span class="comment">//当下拉框隐藏时触发</span></span><br><span class="line">    onSelect：,            <span class="comment">//当下拉框中的选项被选中时触发</span></span><br><span class="line">    effects:<span class="keyword">default</span>/slide/fade， <span class="comment">//动画效果</span></span><br><span class="line">    duration：                   <span class="comment">//动画效果的时间</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;summary-2018-9&quot;&gt;&lt;a href=&quot;#summary-2018-9&quot; class=&quot;headerlink&quot; title=&quot;summary-2018-9&quot;&gt;&lt;/a&gt;summary-2018-9&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;这是在学会搭建博客之后的第一篇博客
      
    
    </summary>
    
    
      <category term="summary" scheme="http://yoursite.com/tags/summary/"/>
    
  </entry>
  
</feed>
