<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>biubiu的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-16T09:26:17.745Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>biubiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>clean</title>
    <link href="http://yoursite.com/2020/02/16/clean/"/>
    <id>http://yoursite.com/2020/02/16/clean/</id>
    <published>2020-02-16T09:26:17.000Z</published>
    <updated>2020-02-16T09:26:17.745Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js异步:宏队列与微队列</title>
    <link href="http://yoursite.com/2020/02/16/%E5%AE%8F%E9%98%9F%E5%88%97%E4%B8%8E%E5%BE%AE%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2020/02/16/宏队列与微队列/</id>
    <published>2020-02-16T05:50:43.000Z</published>
    <updated>2020-02-16T06:21:28.443Z</updated>
    
    <content type="html"><![CDATA[<p>异步执行的函数放入队列中执行。队列分为宏队列与微队列。</p><p>宏队列：用来保存执行的宏任务（回调），比如：dom事件回调，ajax回调，定时器回调<br>微队列：用来保存执行的微任务（回调），比如：promise回调，mutation回调</p><p>1.JS为单线程引擎，必须先执行所有的初始化同步任务代码。<br>2.每次取出第一个宏任务执行前，都要将所有的微任务执行完毕。</p><p>注:取到栈里执行，若有嵌套的情况如下列代码，执行第一个setTimeout回调时，把里面的微任务放入微队列，执行第二宏任务前，先将所有的微任务执行完毕。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> setTimeout(()=&gt;&#123; //会立即放入宏队列</span><br><span class="line">        console.log(<span class="string">"timeout callback1()"</span>);</span><br><span class="line">        Promise.resolve(3).<span class="keyword">then</span>(</span><br><span class="line">            value =&gt;&#123; //会立即放入微队列</span><br><span class="line">                console.log(<span class="string">"Promise onResolved3()"</span>,value);</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;,0)</span><br><span class="line">    setTimeout(()=&gt;&#123; //会立即放入宏队列</span><br><span class="line">        console.log(<span class="string">"timeout callback2()"</span>);</span><br><span class="line">    &#125;,0)</span><br><span class="line">    Promise.resolve(1).<span class="keyword">then</span>(</span><br><span class="line">        value =&gt;&#123; //会立即放入微队列</span><br><span class="line">            console.log(<span class="string">"Promise onResolved1()"</span>,value);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    Promise.resolve(2).<span class="keyword">then</span>(</span><br><span class="line">        value =&gt;&#123; //会立即放入微队列</span><br><span class="line">            console.log(<span class="string">"Promise onResolved2()"</span>,value);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    /*</span><br><span class="line">    输出:Promise onResplved(),1</span><br><span class="line">          Promise onResplved(),2</span><br><span class="line">          timeout callback1()</span><br><span class="line">          Promise onResolved3()</span><br><span class="line">          timeout callback2()</span><br><span class="line">)</span><br><span class="line">     */</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;异步执行的函数放入队列中执行。队列分为宏队列与微队列。&lt;/p&gt;
&lt;p&gt;宏队列：用来保存执行的宏任务（回调），比如：dom事件回调，ajax回调，定时器回调&lt;br&gt;微队列：用来保存执行的微任务（回调），比如：promise回调，mutation回调&lt;/p&gt;
&lt;p&gt;1.JS为单
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>promise面试题（深入理解调用顺序）</title>
    <link href="http://yoursite.com/2020/02/16/promise%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2020/02/16/promise面试题/</id>
    <published>2020-02-16T04:22:56.000Z</published>
    <updated>2020-02-16T09:26:04.662Z</updated>
    
    <content type="html"><![CDATA[<p><strong>第一题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">    console.log(1);</span><br><span class="line">&#125;,0)</span><br><span class="line">Promise.resolve().<span class="keyword">then</span>(()=&gt;&#123;</span><br><span class="line">    console.log(2);</span><br><span class="line">&#125;)</span><br><span class="line">Promise.resolve().<span class="keyword">then</span>(()=&gt;&#123;</span><br><span class="line">    console.log(3);</span><br><span class="line">&#125;)</span><br><span class="line">console.log(4);</span><br><span class="line">/*</span><br><span class="line">输出：4 2 3 1</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p><strong>第二题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(1);</span><br><span class="line">&#125;, 0)</span><br><span class="line">//Promise为构造函数</span><br><span class="line">new Promise(resolve =&gt; &#123;</span><br><span class="line">    console.log(2); //同步执行</span><br><span class="line">    resolve()//成功</span><br><span class="line">&#125;).then(() =&gt; &#123; //成功的回调</span><br><span class="line">    console.log(3);</span><br><span class="line">&#125;).then(() =&gt; &#123;//此处的then等上一个执行完之后再放入微队列执行</span><br><span class="line">    console.log(4);</span><br><span class="line">&#125;)</span><br><span class="line">console.log(5);//同步执行</span><br><span class="line">/*</span><br><span class="line">输出:2 5 3 4 1</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 链式的then要等前一个then执行完毕才知道状态，才可以执行。</p><p><strong>第三题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//定义了一个返回promise的函数</span><br><span class="line">   const first = () =&gt; (new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        console.log(1);  //同步执行1</span><br><span class="line">        //返回promise的函数</span><br><span class="line">        <span class="built_in">let</span> p = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">            console.log(2); //同步执行2</span><br><span class="line">            //放入宏队列1</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                console.log(3);</span><br><span class="line">                resolve(4) //最后执行宏队列时状态已经修改，不再是等待，所以该行代码不执行</span><br><span class="line">            &#125;, 0)</span><br><span class="line">            resolve(5) //立刻执行，p的状态立刻成功</span><br><span class="line">        &#125;)</span><br><span class="line">        resolve(6) //first的状态变成成功</span><br><span class="line">        //成功的回调放入微队列1</span><br><span class="line">        p.then((arg) =&gt; &#123;</span><br><span class="line">            console.log(arg);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;))</span><br><span class="line">    //成功的回调放入为微队列2</span><br><span class="line">    first().<span class="keyword">then</span>((arg)=&gt;&#123;</span><br><span class="line">        console.log(arg);</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(7);//同步执行3</span><br><span class="line">    /*输出</span><br><span class="line">    1 2 7 5 6 3</span><br><span class="line">    开始：输出 1 2 7</span><br><span class="line">    宏[3]</span><br><span class="line">    微[5 6]</span><br><span class="line">    输出微队列：5 6</span><br><span class="line">    输出宏队列：3</span><br><span class="line">     */</span><br></pre></td></tr></table></figure><p><strong>第四题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//加入宏队列1</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">    console.log(0);</span><br><span class="line">&#125;,0)</span><br><span class="line">new Promise((resolve,reject) =&gt;&#123;</span><br><span class="line">    console.log(1); //同步执行1</span><br><span class="line">    resolve()</span><br><span class="line">    //成功的回调加入微队列1</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(2);</span><br><span class="line">    new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        console.log(3);</span><br><span class="line">        resolve()</span><br><span class="line">        //成功的回调加入微队列3</span><br><span class="line">    &#125;).then(()=&gt;&#123;</span><br><span class="line">        console.log(4);</span><br><span class="line">        //成功的回调加入微队列5</span><br><span class="line">    &#125;).then(()=&gt;&#123;</span><br><span class="line">        console.log(5);</span><br><span class="line">    &#125;)</span><br><span class="line">    //成功的回调加入微队列4</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(6);</span><br><span class="line">&#125;)</span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    console.log(7); // 同步执行2</span><br><span class="line">    resolve()</span><br><span class="line">    //成功的回调加入微队列2</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(8);</span><br><span class="line">&#125;)</span><br><span class="line">/*</span><br><span class="line">输出：1 7 2 3 8 4 6 5 0</span><br><span class="line">状态1：同步执行输出1 7 宏[0]  微[2 8]</span><br><span class="line">状态2,执行微任务1（整个then）：输出2 3 宏[0]  微[8 4 6]</span><br><span class="line">状态3,执行微任务2：输出 8 宏[0]  微[4 6]</span><br><span class="line">状态4,执行微任务3：输出4 宏[0]  微[6 5]</span><br><span class="line">....</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>这道题我错在6和5的顺序上面，不太懂为什么6在5前面。阅读了<a href="https://www.jianshu.com/p/aa3d8b3adde3" target="_blank" rel="noopener">一篇文章</a>之后才明白，下面是对知识点进行摘录+总结。</p><p><strong>知识点1</strong></p><p>当执行 then 方法时，如果前面的 promise 已经是 resolved 状态，则直接将回调放入微队列中。</p><p>注意：then方法是同步执行的，但是then中的回调是异步执行的。</p><p>在同步执行then方法时，会进行判断：</p><ul><li>如果前面的 promise 已经是 resolved 状态，则会立即将回调推入微队列</li><li>如果前面的 promise 是 pending 状态则会将回调存储在 promise 的内部(不会被执行，也不会被放入微队列中)，一直等到 promise 被 resolve 才将回调推入微队列</li></ul><p><strong>知识点2</strong></p><p>resolve的作用除了将当前的 promise 由 pending 变为 resolved，还会遍历之前通过 then 给这个 promise 注册的所有回调，将它们依次放入微队列中，很多人以为是由 then 方法来触发它保存回调，而事实上是由 promise 的 resolve 来触发的，then 方法只负责注册回调。</p><p>对于 then 方法返回的 promise 它是没有 resolve 函数的，取而代之只要 then 中回调的代码执行完毕并获得同步返回值，这个 then 返回的 promise 就算被 resolve</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> new Promise((resolve,reject) =&gt;&#123;</span><br><span class="line">   console.log(1);</span><br><span class="line">   resolve()</span><br><span class="line">//第一个then</span><br><span class="line"> &#125;.then(()=&gt;&#123;</span><br><span class="line">   ...</span><br><span class="line"> //第二个then</span><br><span class="line"> &#125;).then(()=&gt;&#123;</span><br><span class="line"> ...</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>首先Promise是实例化，同步执行函数，打印1，执行resolve函数，将 promise 变为 resolved，但由于此时 then 方法还未执行。由知识点2：resolve会触发保存它的回调。then是同步的，所以会依次保存第一个then和第二个then</p><p>[主]外部第一个 then，外部第二个 then [微] 空</p><p>然后执行第一then,由于前面的promise已经被resolve了，所以将第一then的回调放入微队列。</p><p>[主]外部第二个 then  [微]外部第一个 then的回调</p><p>但是这个回调还没有执行，所以第一then返回的promise 仍为 pending 状态，所以同步执行第二个then。由于前面的 promise 是 pending 状态，所以外2then 的回调也不会被推入微任务队列也不会执行</p><p>[主]空  [微]外一 then的回调</p><p>现在主线程空了，执行微任务，也就外一 then的回调，首先打印出2，随后实例化内部promise，打印3，执行resolve函数<br>,遍历then保存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">new Promise((resolve,reject) =&gt;&#123;</span><br><span class="line">....</span><br><span class="line">//外1</span><br><span class="line"> &#125;.then(()=&gt;&#123;</span><br><span class="line">  console.log(2);</span><br><span class="line">  new Promise((resolve, reject) =&gt;&#123;</span><br><span class="line">  console.log(3);</span><br><span class="line">   resolve()</span><br><span class="line">  &#125;.then(()=&gt;&#123;</span><br><span class="line">  //内部第一个then</span><br><span class="line">    console.log(4);</span><br><span class="line">  &#125;).then(()=&gt;&#123;</span><br><span class="line">  //内部第二个then</span><br><span class="line">   console.log(5);</span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"> //外2</span><br><span class="line"> .then(()=&gt;&#123;</span><br><span class="line"> .....</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>[主]内1 then 内2的then  [微]空</p><p>然后执行内1的then，由于前面的 promise 已被 resolve，所以将回调放入微任务队列中。</p><p>[主]内2的then  [微]内1then的回调</p><p>然后执行内2的then，因为内部第一个then的回调还未执行所以状态为pending，所以内2then 的回调和外2then 的回调一样，不注册不执行。</p><p>[主]空  [微]内1then的回调</p><p><strong>外1的回调全部执行完毕</strong>，这里尤其注意:内2then的回调没执行，但是内2then是执行了的。<br>外1then 返回的 promise 的状态由 pending 变为 resolved，同时遍历之前通过 then 给这个 promise 注册的所有回调，将它们的回调放入微任务队列中。</p><p>[主]空  [微]内1then的回调 外2then 的回调</p><p>主线程执行完毕，取出内1then的回调执行</p><p>[主]内1then的回调  [微]外2then 的回调</p><p>打印4，内1then返回的promise状态由 pending 变为 resolved，同时遍历之前通过 then 给这个 promise 注册的所有回调，将它们的回调放入微任务队列中。</p><p>[主] 空 [微]外2then 的回调 内2的回调</p><p>最后一点就不分析了，这就是为什么6要比5先输出的原因了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;第一题&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>git&amp;GitHub</title>
    <link href="http://yoursite.com/2020/02/14/git-1/"/>
    <id>http://yoursite.com/2020/02/14/git-1/</id>
    <published>2020-02-14T07:26:23.000Z</published>
    <updated>2020-02-16T04:19:26.599Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/git/Git&GitHub.bmp"></p><h2 id="git介绍"><a href="#git介绍" class="headerlink" title="git介绍"></a>git介绍</h2><p><strong>结构</strong></p><p>工作区（本身文件）：写代码   = git add =&gt;  暂存区：临时存储   = git commit =&gt;  本地库（.git）：存储历史版本</p><p><strong>Git和代码托管中心</strong></p><p>代码托管中心(如GitHub):帮忙维护远程库</p><p><strong>本地库和远程库</strong></p><p><strong>团队内部协作</strong></p><p><img src="/img/git/团队内协作.png"></p><p><strong>跨团队协作</strong></p><p>外团队人员<code>fork</code>该团队远程库A（复制新的远程库B），<code>clone</code>到本地修改后<code>push</code>到B，之后外团队人员<code>pull request</code> =&gt;  该团队人 审核 =&gt; <code>merge</code> 远程库A的内容更新成远程库B的内容。</p><h2 id="git命令行操作"><a href="#git命令行操作" class="headerlink" title="git命令行操作"></a>git命令行操作</h2><h3 id="本地库初始化"><a href="#本地库初始化" class="headerlink" title="本地库初始化"></a>本地库初始化</h3><p>命令：git init<br>效果：出现隐藏文件.git<br>注意：.git目录中存放的是本地库相关的子目录和文件，不要删除，也不要乱修改</p><h3 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h3><p>形式:<br>    用户名：XXX<br>    Email地址：XXXXX</p><p>作用：区分不同开发人员的身份<br>辨析：这里设置的签名和代码托管中心的账号、密码没有任何关系<br>命令:<br>    项目级别/仓库级别：仅在当前本地库起作用<br>        <code>git config user.name XX</code><br>        <code>git config user.email XX</code><br>    系统用户级别：登陆当前操作系统的用户范围， <code>git config --global</code><br>        <code>git config --global user.name XX</code><br>        <code>git config --global user.email XX</code><br>    级别优先级：项目级别优于系统用户级别</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="状态检查"><a href="#状态检查" class="headerlink" title="状态检查"></a>状态检查</h4><p>命令: git status<br>作用：查看工作区、暂存区状态</p><h4 id="移除暂存区"><a href="#移除暂存区" class="headerlink" title="移除暂存区"></a>移除暂存区</h4><p>命令: git rm –cached [filename]</p><h4 id="添加到暂存器"><a href="#添加到暂存器" class="headerlink" title="添加到暂存器"></a>添加到暂存器</h4><p>命令：git add[filename]   添加所有git add .   添加所有修改的git add -A</p><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><p>命令：git commit-m”commit message”[filename]     提交所有git commit -m”版本留言描述”<br>作用：将暂存区的内容提交到本地库</p><h4 id="查看历史任务"><a href="#查看历史任务" class="headerlink" title="查看历史任务"></a>查看历史任务</h4><p>命令：<br>    完整形式 git log<br>        若多屏显示控制方式：空格向下翻页 b向上翻页 q退出<br>    以一个漂亮的格式显示 git log –pretty=oneline/git log–oneline(后面的更简洁)<br>    git reflog :索引值更简洁，其中HEAD@{移动到当前版本需要多少步}<br>        <img src="/img/git/历史任务.png"></p><h4 id="前进后退"><a href="#前进后退" class="headerlink" title="前进后退"></a>前进后退</h4><p>可以配合git reflog使用<br>本质:操作HEAD的指针，默认是指向最近的版本。<br>基于索引值操作（推荐）:<br>     git reset –hard [局部索引值]  例（上图）：git reset–hard a6ace91<br>使用^(异或)符号（只能后退）：<br>     git reset –hard HEAD^  注:一个^表示后退一步，n 个表示后退 n 步<br>使用~符号（只能后退）:<br>     git reset –hard HEAD~n  注:表示后退 n 步</p><h5 id="reset-命令的三个参数对比"><a href="#reset-命令的三个参数对比" class="headerlink" title="reset 命令的三个参数对比"></a>reset 命令的三个参数对比</h5><p>–soft参数：</p><ul><li>仅仅在本地库移动 HEAD 指针</li><li>只回退了commit的信息，如果还要提交，直接commit</li></ul><p>–mixed参数：① 在本地库移动 HEAD 指针 ② 重置暂存区</p><ul><li>默认方式</li><li>git reset –mixed <commit> + git add . = git reset –soft <commit></commit></commit></li></ul><p>–hard参数：①在本地库移动 HEAD 指针 ② 重置暂存区 ③ 重置工作区</p><ul><li>彻底回退到某个版本，本地的源码也会变成上一个版本的内容</li></ul><h5 id="删除文件与恢复"><a href="#删除文件与恢复" class="headerlink" title="删除文件与恢复"></a>删除文件与恢复</h5><p>前提：删除前，文件存在时的状态提交到了本地库。<br>操作：rm [filename]<br>注：rm之后通过 git add [filename] 可把文件再次添加到缓存区<br>    可利用 git reset –hard[指针位置] 回退到之前版本找回文件。</p><p>前提：删除的文件在暂存区，但还没有提交到本地库<br>命令: git reset –hard HEAD（刚刚创建时）</p><h5 id="比较文件差别"><a href="#比较文件差别" class="headerlink" title="比较文件差别"></a>比较文件差别</h5><p>命令：git diff[文件名]<br>作用：将工作区中的文件和暂存区进行比较</p><p>命令：git diff[本地库中历史版本][文件名]<br>作用：将工作区中的文件和本地库历史记录比较</p><p>注意:不带文件名比较多个文件</p><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>优势：</p><ul><li>同时并行推进多个功能开发，提高开发效率</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可</li></ul><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><h5 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h5><p>命令：git branch[分支名]</p><h5 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h5><p>命令：git branch -v</p><h5 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h5><p>命令：git checkout[分支名]</p><h5 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h5><p>如把hot_fix上的修改合并到master上</p><p>第一步：切换到合并的分支上 git checkout[master]<br>第二步：执行 merge 命令 git merge[hot_fix]</p><p><strong>解决冲突</strong><br>合并时同时修改同一个文件的同一个地方</p><p><img src="/img/git/冲突.png"></p><p>第一步:自行修改冲突文件<br>第二步:git add[文件名]<br>第三步:git commit-m”日志信息”     注意：此时 commit 一定不能带具体文件名</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><h4 id="连接远程库"><a href="#连接远程库" class="headerlink" title="连接远程库"></a>连接远程库</h4><p>命令：<br>    git remote-v 查看当前所有远程地址别名<br>    git remote add [别名] [远程地址]   (常用别名：origin)<br>作用：下次上传可以直接用别名上传</p><h4 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h4><p>命令：git push [别名][分支名]</p><h4 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h4><p>命令：git clone 仓库地址<br>作用；完整的把远程库下载到本地；创建origin远程地址别名；初始化本地库。</p><h4 id="团队成员邀请"><a href="#团队成员邀请" class="headerlink" title="团队成员邀请"></a>团队成员邀请</h4><p><img src="/img/git/邀请加入团队.png"></p><p>变成团队成员就可以把自己的修改推送进入远程仓库了。</p><h4 id="拉取pull"><a href="#拉取pull" class="headerlink" title="拉取pull"></a>拉取pull</h4><p>命令: git fetch[远程库地址别名][远程分支名]<br>      git merge[远程库地址别名/远程分支名]<br>      git pull[远程库地址别名][远程分支名]<br>作用: pull=fetch+merge。<br>      fetch 把远程库抓取下来，并没有修改本地文件。<br>      merge 把远程的master合并到本地的master，本地文件修改。</p><p><strong>解决冲突</strong><br>要点：<table><tr><td bgcolor="pink">果不是基于GitHub远程库的最新版本所作的修改，不能推送，必须先拉取下来</td></tr></table>如<br>若pull下来之后进入冲突状态，其余同分支冲突处理办法一样。</p><h4 id="跨团队操作"><a href="#跨团队操作" class="headerlink" title="跨团队操作"></a>跨团队操作</h4><p>外团队人员<code>fork</code>该团队远程库A（复制新的远程库B、外团队人员的仓库），<code>clone</code>到本地修改后<code>push</code>到B，之后外团队人员<code>pull request</code> （GitHub远程库B操作）=&gt;  该团队人（GitHub远程库A） 审核 =&gt; <code>merge</code> 远程库A的内容更新成远程库B的内容。</p><h4 id="SSH登陆"><a href="#SSH登陆" class="headerlink" title="SSH登陆"></a>SSH登陆</h4><p>第一步：生成ssh（在家目录）<br>ssh-keygen ct rsa -C 邮箱账号         //注意C大写<br>注：在主目录下生成的密钥在 /c/Users/用户名/.ssh/id_rsa 里<br>第二步：查看并复制ssh（需在.ssh目录下执行 cd .ssh进入）<br>cat id_rsa.pub<br>第三步：复制密钥内容添加到 github 上</p><p>使用ssh协议上传文件到仓库</p><p>git init<br>git add .<br>git commit -m “ “<br>git remote add 别名 <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:…<br>git push -u 别名 master</p><h3 id="Git工作流"><a href="#Git工作流" class="headerlink" title="Git工作流"></a>Git工作流</h3><p>在项目开发过程中使用的Git的方式</p><h4 id="GitFlow工作流-常用"><a href="#GitFlow工作流-常用" class="headerlink" title="GitFlow工作流(常用)"></a>GitFlow工作流(常用)</h4><pre><code>Gitflow 工作流通过为功能开发、发布准备和维护设立了独立的分支，让发布 迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/git/Git&amp;GitHub.bmp&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;git介绍&quot;&gt;&lt;a href=&quot;#git介绍&quot; class=&quot;headerlink&quot; title=&quot;git介绍&quot;&gt;&lt;/a&gt;git介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;结构&lt;/str
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>富文本tinymce</title>
    <link href="http://yoursite.com/2020/02/09/%E5%AF%8C%E6%96%87%E6%9C%ACtinymce/"/>
    <id>http://yoursite.com/2020/02/09/富文本tinymce/</id>
    <published>2020-02-09T03:58:33.000Z</published>
    <updated>2020-02-11T13:35:02.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//安装tinymce-vue</span><br><span class="line">npm install @tinymce/tinymce-vue -S</span><br><span class="line">//安装tinymce,版本为5.X</span><br><span class="line">npm install tinymce -S</span><br><span class="line">//引入中文语言包</span><br></pre></td></tr></table></figure><p><a href="https://www.tiny.cloud/get-tiny/language-packages/" target="_blank" rel="noopener">中文下载包</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在 node_modules中找到 tinymce/skins目录，然后将skins目录拷贝到static目录下的tinymce</p><p> <img src="/img/富文本/富文本1.png" width="30%"></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>引入基本文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//初始化tinymce</span><br><span class="line">import tinymce from &apos;tinymce/tinymce&apos;</span><br><span class="line">import Editor from &apos;@tinymce/tinymce-vue&apos;</span><br><span class="line">import &apos;tinymce/themes/silver&apos;</span><br></pre></td></tr></table></figure><p>注册组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Editor&gt;&lt;/Editor&gt;</span><br><span class="line"></span><br><span class="line">//js</span><br><span class="line">components: &#123;Editor&#125;</span><br></pre></td></tr></table></figure><p>初始化配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Editor :init=<span class="string">"init"</span>&gt;&lt;/Editor&gt;</span><br><span class="line"> <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line"> <span class="built_in">return</span> &#123;</span><br><span class="line">  init:&#123;</span><br><span class="line">//语言</span><br><span class="line">language_url: <span class="string">'/static/tinymce/zh_CN.js'</span>,</span><br><span class="line">language: <span class="string">'zh_CN'</span>,</span><br><span class="line"> //skin路径</span><br><span class="line">skin_url: <span class="string">'/static/tinymce/skins/ui/oxide'</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"> <span class="function"><span class="title">mounted</span></span> () &#123;</span><br><span class="line"> tinymce.init(&#123;&#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>初始化配置之后最基本的符文就有了，接下来丰富它的功能</p><p><img src="/img/富文本/富文本2.png"></p><p>数据同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line">  &lt;Editor  v-model=<span class="string">"myValue"</span>&gt;&lt;/Editor&gt;</span><br><span class="line">   <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">              <span class="built_in">return</span> &#123;</span><br><span class="line">                myValue: this.value</span><br><span class="line">                &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">     props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line">               default: <span class="string">''</span>,</span><br><span class="line">               <span class="built_in">type</span>: String</span><br><span class="line">             &#125;,</span><br><span class="line">     &#125;</span><br><span class="line">      watch: &#123;</span><br><span class="line">           value(newValue) &#123;</span><br><span class="line">             this.myValue = newValue</span><br><span class="line">           &#125;,</span><br><span class="line">           myValue(newValue) &#123;</span><br><span class="line">             this.<span class="variable">$emit</span>(<span class="string">'input'</span>, newValue)</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">//父组件  onEditorUploadSuccess为图片上传成功的回调</span><br><span class="line">    &lt;editor v-model=<span class="string">"value"</span> @on-upload-success=<span class="string">"onEditorUploadSuccess"</span></span><br><span class="line">        &gt;&lt;/editor&gt;</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Editor :init=<span class="string">"init"</span> v-model=<span class="string">"myValue"</span>&gt;&lt;/Editor&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //这个是接口文件</span><br><span class="line">  import &#123;ImgUpload&#125; from <span class="string">'@/api/notice'</span></span><br><span class="line"></span><br><span class="line">  //初始化tinymce</span><br><span class="line">  import tinymce from <span class="string">'tinymce/tinymce'</span></span><br><span class="line">  import Editor from <span class="string">'@tinymce/tinymce-vue'</span></span><br><span class="line">  //引入主题</span><br><span class="line">  import <span class="string">'tinymce/themes/silver'</span></span><br><span class="line"></span><br><span class="line">  /*</span><br><span class="line">  引入插件</span><br><span class="line">   */</span><br><span class="line">  import <span class="string">'tinymce/plugins/image'</span></span><br><span class="line">  import <span class="string">'tinymce/plugins/table'</span></span><br><span class="line">  import <span class="string">'tinymce/plugins/preview'</span></span><br><span class="line">  import <span class="string">'tinymce/plugins/fullscreen'</span></span><br><span class="line">  import <span class="string">'tinymce/plugins/link'</span></span><br><span class="line">  import <span class="string">'tinymce/plugins/code'</span></span><br><span class="line">  import <span class="string">'tinymce/plugins/lists'</span></span><br><span class="line">  import <span class="string">'tinymce/plugins/hr'</span></span><br><span class="line">  import <span class="string">'tinymce/plugins/advlist'</span></span><br><span class="line">  import <span class="string">'tinymce/plugins/paste'</span></span><br><span class="line">  import <span class="string">'tinymce/plugins/importcss'</span></span><br><span class="line">  import <span class="string">'tinymce/plugins/media'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> default &#123;</span><br><span class="line">        <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">            <span class="built_in">return</span> &#123;</span><br><span class="line">              myValue: this.value,</span><br><span class="line">              init:&#123;</span><br><span class="line">                //语言</span><br><span class="line">                language_url: <span class="string">'/static/tinymce/zh_CN.js'</span>,</span><br><span class="line">                language: <span class="string">'zh_CN'</span>,</span><br><span class="line">                //设置皮肤</span><br><span class="line">                skin_url: <span class="string">'/static/tinymce/skins/ui/oxide'</span>,</span><br><span class="line">                //高度</span><br><span class="line">                height: 400,</span><br><span class="line">                //菜单栏</span><br><span class="line">                menubar: <span class="literal">false</span>,</span><br><span class="line">                //隐藏商标</span><br><span class="line">                // branding: <span class="literal">false</span>,</span><br><span class="line">                //工具栏|分类 配置插件</span><br><span class="line">                toolbar: `styleselect | fontselect | formatselect | fontsizeselect | forecolor backcolor | bold italic underline strikethrough | image   | table | alignleft aligncenter alignright alignjustify | outdent indent | numlist bullist | preview removeformat  hr |  code  link | undo redo | fullscreen `,</span><br><span class="line"></span><br><span class="line">                //自动聚焦</span><br><span class="line">                auto_focus: <span class="literal">true</span>,</span><br><span class="line">                //引入插件</span><br><span class="line">                plugins: ` paste importcss image code table advlist fullscreen link media lists   hr preview`,</span><br><span class="line">                //图片标题</span><br><span class="line">                image_caption: <span class="literal">true</span>,</span><br><span class="line">                //上传本地图片</span><br><span class="line">                image_uploadtab:<span class="literal">true</span>,</span><br><span class="line">                // Image</span><br><span class="line">                imagetools_toolbar: <span class="string">'rotateleft rotateright | flipv fliph | editimage imageoptions'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">              // 设置Tab</span><br><span class="line">             // tabfocus_elements: <span class="string">':prev,:next'</span>,</span><br><span class="line">             //  object_resizing: <span class="literal">true</span>,</span><br><span class="line">             //设置可选段落样式</span><br><span class="line">             style_formats: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    title: <span class="string">'首行缩进'</span>,</span><br><span class="line">                    block: <span class="string">'p'</span>,</span><br><span class="line">                    styles: &#123; <span class="string">'text-indent'</span>: <span class="string">'2em'</span> &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    title: <span class="string">'行高'</span>,</span><br><span class="line">                    items: [</span><br><span class="line">                      &#123; title: <span class="string">'1'</span>, styles: &#123; <span class="string">'line-height'</span>: <span class="string">'1'</span> &#125;, inline: <span class="string">'span'</span> &#125;,</span><br><span class="line">                      &#123; title: <span class="string">'1.5'</span>, styles: &#123; <span class="string">'line-height'</span>: <span class="string">'1.5'</span> &#125;, inline: <span class="string">'span'</span> &#125;,</span><br><span class="line">                      &#123; title: <span class="string">'2'</span>, styles: &#123; <span class="string">'line-height'</span>: <span class="string">'2'</span> &#125;, inline: <span class="string">'span'</span> &#125;,</span><br><span class="line">                      &#123; title: <span class="string">'2.5'</span>, styles: &#123; <span class="string">'line-height'</span>: <span class="string">'2.5'</span> &#125;, inline: <span class="string">'span'</span> &#125;,</span><br><span class="line">                      &#123; title: <span class="string">'3'</span>, styles: &#123; <span class="string">'line-height'</span>: <span class="string">'3'</span> &#125;, inline: <span class="string">'span'</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">                  &#125;</span><br><span class="line">                ],</span><br><span class="line">             //字体列表</span><br><span class="line">              font_formats: `</span><br><span class="line">            微软雅黑=微软雅黑;</span><br><span class="line">            宋体=宋体;</span><br><span class="line">            黑体=黑体;</span><br><span class="line">            仿宋=仿宋;</span><br><span class="line">            楷体=楷体;</span><br><span class="line">            隶书=隶书;</span><br><span class="line">            幼圆=幼圆;</span><br><span class="line">            Andale Mono=andale mono,<span class="built_in">times</span>;</span><br><span class="line">            Arial=arial, helvetica,</span><br><span class="line">            sans-serif;</span><br><span class="line">            Arial Black=arial black, avant garde;</span><br><span class="line">            Book Antiqua=book antiqua,palatino;</span><br><span class="line">            Comic Sans MS=comic sans ms,sans-serif;</span><br><span class="line">            Courier New=courier new,courier;</span><br><span class="line">            Georgia=georgia,palatino;</span><br><span class="line">            Helvetica=helvetica;</span><br><span class="line">            Impact=impact,chicago;</span><br><span class="line">            Symbol=symbol;</span><br><span class="line">            Tahoma=tahoma,arial,helvetica,sans-serif;</span><br><span class="line">            Terminal=terminal,monaco;</span><br><span class="line">            Times New Roman=<span class="built_in">times</span> new roman,<span class="built_in">times</span>;</span><br><span class="line">            Trebuchet MS=trebuchet ms,geneva;</span><br><span class="line">            Verdana=verdana,geneva;</span><br><span class="line">            Webdings=webdings;</span><br><span class="line">            Wingdings=wingdings,zapf dingbats`,</span><br><span class="line">              //内容样式, 在最后呈现的页面也要写入这个基本样式保证前后一致</span><br><span class="line">                content_style: `</span><br><span class="line">            *                         &#123; padding:0; margin:0; &#125;</span><br><span class="line">            html, body                &#123; height:100%; &#125;</span><br><span class="line">            img                       &#123; max-width:100%; display:block;height:auto; &#125;</span><br><span class="line">            a                         &#123; text-decoration: none; &#125;</span><br><span class="line">            iframe                    &#123; width: 100%; &#125;</span><br><span class="line">            p                         &#123; line-height:1.6; margin: 0px; font-family:<span class="string">"宋体"</span>; &#125;</span><br><span class="line">            table                     &#123; word-wrap:<span class="built_in">break</span>-word; word-break:<span class="built_in">break</span>-all; max-width:100%; border:none; border-color:<span class="comment">#999; &#125;</span></span><br><span class="line">            .mce-object-iframe        &#123; width:100%; box-sizing:border-box; margin:0; padding:0; &#125;</span><br><span class="line">            ul,ol                     &#123; list-style-position:inside; &#125;</span><br><span class="line">          `,</span><br><span class="line"></span><br><span class="line">                insert_button_items: <span class="string">'image link | inserttable'</span>,</span><br><span class="line">                //回车添加的标签</span><br><span class="line">                forced_root_block:<span class="string">"p"</span>,</span><br><span class="line">                //强制每行添加&lt;p&gt;标签</span><br><span class="line">                force_p_newlines: <span class="literal">true</span>,</span><br><span class="line">                importcss_append: <span class="literal">true</span>,</span><br><span class="line">                //字体大小栏选项</span><br><span class="line">                fontsize_formats: <span class="string">'10px 11px 12px 14px 16px 18px 20px 24px'</span>,</span><br><span class="line">                // paste设置</span><br><span class="line">                paste_data_images: <span class="literal">true</span>,//可以粘贴图片</span><br><span class="line">                paste_word_valid_elements: <span class="string">'*[*]'</span>,//word过滤</span><br><span class="line">                paste_retain_style_properties:<span class="string">'all'</span>, //允许保留word粘贴过来的格式</span><br><span class="line">                paste_convert_word_fake_lists: <span class="literal">false</span>,//禁止word的列表内容转换html的ul和ol格式</span><br><span class="line">                paste_merge_formats: <span class="literal">true</span>,//合并相似格式</span><br><span class="line">                nonbreaking_force_tab: <span class="literal">false</span>,</span><br><span class="line">                paste_auto_cleanup_on_paste: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                statusbar: <span class="literal">false</span>, // 隐藏编辑器底部的状态栏</span><br><span class="line">                images_upload_handler: this.uploadImg//图片上传</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">              &#125;,</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      props: &#123;</span><br><span class="line">          //图片最大大小</span><br><span class="line">        maxSize: &#123;</span><br><span class="line">          default: 2097152,</span><br><span class="line">          <span class="built_in">type</span>: Number</span><br><span class="line">        &#125;,</span><br><span class="line">        //图片可接收类型</span><br><span class="line">        accept: &#123;</span><br><span class="line">          default: <span class="string">'image/jpeg, image/png, image/jpg, image/svg, image/gif'</span>,</span><br><span class="line">          <span class="built_in">type</span>: String</span><br><span class="line">        &#125;,</span><br><span class="line">        //上传地址</span><br><span class="line">        url: &#123;</span><br><span class="line">          default: <span class="string">''</span>,</span><br><span class="line">          <span class="built_in">type</span>: String</span><br><span class="line">        &#125;,</span><br><span class="line">        //数据</span><br><span class="line">        value: &#123;</span><br><span class="line">          default: <span class="string">''</span>,</span><br><span class="line">          <span class="built_in">type</span>: String</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        //上传图片</span><br><span class="line">          uploadImg(blobInfo, success, failure)  &#123;</span><br><span class="line">            const that = this</span><br><span class="line">            //符合大小</span><br><span class="line">            <span class="keyword">if</span> (blobInfo.blob().size &gt; this.maxSize) &#123;</span><br><span class="line">      failure(<span class="string">'文件体积过大'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">            //符合类型</span><br><span class="line">            <span class="keyword">if</span> (this.accept.indexOf(blobInfo.blob().<span class="built_in">type</span>) &gt; -1) &#123;</span><br><span class="line">              <span class="built_in">let</span> form = new FormData();</span><br><span class="line">    form.append(<span class="string">'file'</span>, blobInfo.blob(), blobInfo.filename());</span><br><span class="line"></span><br><span class="line">              ImgUpload(form).<span class="keyword">then</span>(res=&gt;&#123;</span><br><span class="line">                //给父组件传值</span><br><span class="line">                that.<span class="variable">$emit</span>(<span class="string">'on-upload-success'</span>, &#123;</span><br><span class="line">                  res, success, failure</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;).catch(err =&gt; &#123;</span><br><span class="line">                failure(<span class="string">'上传失败: '</span> + err);</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> failure(<span class="string">'图片格式错误'</span>);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">     watch: &#123;</span><br><span class="line"></span><br><span class="line">      value(newValue) &#123;</span><br><span class="line">        this.myValue = newValue</span><br><span class="line">      &#125;,</span><br><span class="line">      myValue(newValue) &#123;</span><br><span class="line">        this.<span class="variable">$emit</span>(<span class="string">'input'</span>, newValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        components: &#123;Editor&#125;,</span><br><span class="line">      <span class="function"><span class="title">mounted</span></span> () &#123;</span><br><span class="line">        tinymce.init(&#123;&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!--scoped 样式仅仅在当前组件使用--&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>软件超市项目后台管理界面开发流程3</title>
    <link href="http://yoursite.com/2020/02/06/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82%E6%96%B0%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B3/"/>
    <id>http://yoursite.com/2020/02/06/软件超市新项目后台管理界面开发流程3/</id>
    <published>2020-02-06T06:42:08.000Z</published>
    <updated>2020-02-15T06:56:53.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue全局配置"><a href="#vue全局配置" class="headerlink" title="vue全局配置"></a>vue全局配置</h2><p>项目有很多重复用到的变量和方法，新建一个global/index.js来存放。具体的实现是通过在Vue的原型上添加方法和属性，也就是使用<code>Vue.prototype</code>，最后要在main.js引入文件`import “./global”;</p><h2 id="Messsage-vue"><a href="#Messsage-vue" class="headerlink" title="Messsage.vue"></a>Messsage.vue</h2><p>一级导航用于显示消息通知,里面包含了两个组件，一个用于分页的ProjectPagination，一个是用于消息提醒的MessageRemind。<br>这里实现了流程1提到的:如果有未读消息，进入管理页面后直接显示消息通知，如果没有未读消息，则显示第一个路由。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  //登陆之后是先跳转到message，此时的pageEnterStatetrue=<span class="literal">true</span>。</span><br><span class="line">  <span class="keyword">if</span> (this.pageEnterState) &#123;</span><br><span class="line">    //如果没有消息就跳到第一个路由</span><br><span class="line">    <span class="keyword">if</span> (this.msgLen === 0) &#123;</span><br><span class="line">      const route = this.<span class="variable">$store</span>.getters.addRouter;</span><br><span class="line">      this.<span class="variable">$router</span>.push(route[0].path);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      //如果有消息就显示，tableData就是登陆时传给state的消息</span><br><span class="line">      this.data = this.tableData;</span><br><span class="line">      this.isLoading = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    this.<span class="variable">$store</span>.commit(<span class="string">"SET_PAGE_ENTER_STATE"</span>, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    this.loadData();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分页ProjectPagination"><a href="#分页ProjectPagination" class="headerlink" title="分页ProjectPagination"></a>分页ProjectPagination</h3><p>结合element-ui的pagination加上一些修改。前一篇博客中提到了父组件向子组件传值的方法，这里同时也用到了子组件向父组件传值的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 分页器 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-pagination class=&quot;x-page&quot; layout=&quot;total,sizes, prev, pager, next, jumper&quot; @current-change=&quot;handleCurrentChange&quot; @size-change=&quot;handleSizeChange&quot; :current-page.sync=&quot;currentPage&quot; :page-sizes=&quot;pageSizes&quot; :page-size=&quot;pageSize&quot; :total=&quot;total&quot;&gt;&lt;/el-pagination&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;ProjectPagination&quot;,</span><br><span class="line">  //接收父组件传来的值</span><br><span class="line">  props: &#123;</span><br><span class="line">    //data为所有数据</span><br><span class="line">    data: Array,</span><br><span class="line">    //filterData做为一个筛选容器</span><br><span class="line">    filterData: Array</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      //当前页数</span><br><span class="line">      currentPage: 1,</span><br><span class="line">      //默认的一页显示条数</span><br><span class="line">      pageBase: 10</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 数据总数目</span><br><span class="line">    total() &#123;</span><br><span class="line">      return this.data.length;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 一页有多少条数据</span><br><span class="line">    pageSize() &#123;</span><br><span class="line">      //如果基础数据大于总数，则显示总数</span><br><span class="line">      let size = this.total &gt;= this.pageBase ? this.pageBase : this.total;</span><br><span class="line">      return size;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 提供每页条数的选择，返回值为一个数组</span><br><span class="line">    pageSizes() &#123;</span><br><span class="line">      let count = Math.ceil(this.total / this.pageSize);</span><br><span class="line">      let sizes = [];</span><br><span class="line">      for (let i = 1; i &lt;= count; i++) &#123;</span><br><span class="line">        sizes.push(this.pageSize * i);</span><br><span class="line">      &#125;</span><br><span class="line">      return sizes;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">  //pageSize改变执行，回调参数:每页条数</span><br><span class="line">    handleSizeChange(val) &#123;</span><br><span class="line">      // 获取项目条数</span><br><span class="line">      //子组件像父组件传值，更新filterData。</span><br><span class="line">      this.$emit(&quot;update:filterData&quot;, this.data.slice(0, val));</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    // 页面页数改变</span><br><span class="line">    handleCurrentChange(val) &#123;</span><br><span class="line">      // 获取下一页数据</span><br><span class="line">      this.$emit(</span><br><span class="line">        &quot;update:filterData&quot;,</span><br><span class="line">        this.data.slice((val - 1) * this.pageSize, val * this.pageSize)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    //发送一个update:filterData，显示pageSize个数据</span><br><span class="line">    this.$emit(&quot;update:filterData&quot;, this.data.slice(0, this.pageSize));</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    // 监控数据变化时获取数据</span><br><span class="line">    data() &#123;</span><br><span class="line">      this.$emit(&quot;update:filterData&quot;, this.data.slice(0, this.pageSize));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //路由要求刷新</span><br><span class="line">  activated() &#123;</span><br><span class="line">    if (this.$route.meta.isRefresh) &#123;</span><br><span class="line">      this.currentPage = 1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.x-page &#123;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">  float: right;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h4 id="emit-update-prop-“newPropVulue”"><a href="#emit-update-prop-“newPropVulue”" class="headerlink" title="$emit(update: prop, “newPropVulue”)"></a>$emit(update: prop, “newPropVulue”)</h4><p>$emit(update: prop, “newPropVulue”)  这个模式，使子组件向父组件传达：更新属性，并抛出新的属性值。</p><p>从上述代码中可以看出首先更新的值要是从父组件中接收的，也就是props里面的值。其次父组件该值需要写成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProjectPagination :data=&quot;data&quot; :filter-data=&quot;filterData&quot; @update:filter-data=&quot;filterData=$event&quot;&gt;&lt;/ProjectPagination&gt;</span><br></pre></td></tr></table></figure><p>更简单的写法是<code>.sync</code>修饰符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProjectPagination :data=&quot;data&quot; :filter-data.sync=&quot;filterData&quot;&gt;&lt;/ProjectPagination&gt;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong>这里有一个Vue.sync修饰符与$emit(update:xxx)写法的坑<br>使用.sync修饰符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//有效</span><br><span class="line">this.$emit(&quot;update:filterData&quot;, this.data.slice(0, val));</span><br><span class="line">//无效</span><br><span class="line">this.$emit(&quot;update:filter-Data&quot;, this.data.slice(0, val));</span><br></pre></td></tr></table></figure></p><p>不使用.sync修饰符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//无效</span><br><span class="line">this.$emit(&quot;update:filterData&quot;, this.data.slice(0, val));</span><br><span class="line">//有效</span><br><span class="line">this.$emit(&quot;update:filter-Data&quot;, this.data.slice(0, val));</span><br></pre></td></tr></table></figure></p><h3 id="MessageRemind"><a href="#MessageRemind" class="headerlink" title="MessageRemind"></a>MessageRemind</h3><p>消息提醒的MessageRemind使用了element-ui的消息提醒，这里最后的实现比较容易，但是在实现的过程中遇到了一个关于路由监控的坑。</p><p>路由监听失效：需要在父路由的组件内才可以监听到子路由的信息。</p><h2 id="Notice-vue"><a href="#Notice-vue" class="headerlink" title="Notice.vue"></a>Notice.vue</h2><p>仅管理员拥有的组件。主要有左边的导航和中间显示部分组成。显示公告列表，增删改查等实现比较容易就没有记录下来。</p><p>这里记录一个文章显示的css，超出部分滚动，但不显示滚轮</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.article&#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  overflow-x:hidden;</span><br><span class="line">  overflow-y: scroll;</span><br><span class="line">&#125;</span><br><span class="line">//  -webkit-scrollbar css3新特性</span><br><span class="line">.article::-webkit-scrollbar &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>框架</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line">     &lt;div  class=<span class="string">"notice"</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">"nav"</span>&gt;</span><br><span class="line">       &lt;el-menu</span><br><span class="line">         default-active=<span class="string">"publish"</span></span><br><span class="line">         class=<span class="string">"el-menu-vertical-demo"</span></span><br><span class="line">         @select=<span class="string">"handleSelect"</span></span><br><span class="line">       &gt;</span><br><span class="line">         &lt;el-menu-item index=<span class="string">"publish"</span> &gt;</span><br><span class="line">           &lt;i class=<span class="string">"el-icon-edit-outline"</span>&gt;&lt;/i&gt;</span><br><span class="line">           &lt;span slot=<span class="string">"title"</span>&gt;发布公告&lt;/span&gt;</span><br><span class="line">         &lt;/el-menu-item&gt;</span><br><span class="line">         &lt;el-menu-item index=<span class="string">"allNotice"</span>&gt;</span><br><span class="line">           &lt;i class=<span class="string">"el-icon-document"</span>&gt;&lt;/i&gt;</span><br><span class="line">           &lt;span slot=<span class="string">"title"</span>&gt;所有公告&lt;/span&gt;</span><br><span class="line">         &lt;/el-menu-item&gt;</span><br><span class="line">         &lt;el-menu-item index=<span class="string">"dustbin"</span>&gt;</span><br><span class="line">           &lt;i class=<span class="string">"el-icon-delete"</span>&gt;&lt;/i&gt;</span><br><span class="line">           &lt;span slot=<span class="string">"title"</span>&gt;回收站&lt;/span&gt;</span><br><span class="line">         &lt;/el-menu-item&gt;</span><br><span class="line">       &lt;/el-menu&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">       &lt;router-view class=<span class="string">"view"</span>&gt;&lt;/router-view&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line"> &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">handleSelect(key) &#123;</span><br><span class="line"><span class="built_in">let</span> path=<span class="string">'/notice/'</span>+key;</span><br><span class="line">this.<span class="variable">$router</span>.push(&#123;path:path&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="富文本tinymce"><a href="#富文本tinymce" class="headerlink" title="富文本tinymce"></a>富文本tinymce</h3><p>默认显示的是发布公告,选用的是tinymce这款富文本。</p><blockquote><p><a href="https://biubiuins.github.io/2020/02/09/%E5%AF%8C%E6%96%87%E6%9C%ACtinymce/" target="_blank" rel="noopener">学习笔记</a></p></blockquote><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p><strong>问题1</strong>表单规则验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item label=<span class="string">"学/工号"</span> prop=<span class="string">"captainInformation.studentId"</span> &gt;</span><br><span class="line">   &lt;el-input v-model.number=<span class="string">"form.captainInformation.studentId"</span> &gt;&lt;/el-input&gt;</span><br><span class="line"> &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> &#123;</span><br><span class="line">   form:&#123;</span><br><span class="line">         teamName:<span class="string">""</span>,</span><br><span class="line">         captainInformation:&#123;</span><br><span class="line">           name:<span class="string">""</span>,</span><br><span class="line">           studentId:<span class="string">""</span>,</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line"></span><br><span class="line">       rules: &#123;</span><br><span class="line">         teamName: [</span><br><span class="line">           &#123; required: <span class="literal">true</span>, message: <span class="string">'请输入团队名称'</span>, trigger: <span class="string">'blur'</span> &#125;,</span><br><span class="line">           &#123; min: 3, max: 10, message: <span class="string">'长度在 3 到 10 个字符'</span>, trigger: <span class="string">'blur'</span> &#125;</span><br><span class="line">         ],</span><br><span class="line">         //这个位置注意一定要加引号</span><br><span class="line">          <span class="string">"captainInformation.studentId"</span>: [</span><br><span class="line">                     &#123; required: <span class="literal">true</span>, message: <span class="string">'请输入学号'</span>, trigger: <span class="string">'blur'</span> &#125;,</span><br><span class="line">                      &#123;<span class="built_in">type</span>: <span class="string">'integer'</span>, message: <span class="string">'格式错误'</span>, trigger: <span class="string">'blur'</span>&#125;</span><br><span class="line">                   ],</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>问题二</strong>过滤器</p><p>后台传来的数据只有分数，未评分的分数为-1，这里需要将其显示成状态已完成或未评分，并且可以根据状态筛选数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> &lt;el-table-column prop=<span class="string">"score"</span> sortable label=<span class="string">"状态"</span> :filters=<span class="string">"tags"</span> :filter-method=<span class="string">"filterTag"</span>&gt;</span><br><span class="line">          &lt;template slot-scope=<span class="string">"scope"</span>&gt;</span><br><span class="line">            &lt;el-tag <span class="built_in">disable</span>-transitions style=<span class="string">"font-size:12px"</span> :<span class="built_in">type</span>=<span class="string">"stateColor(scope.row.score)"</span>&gt;&#123;&#123;scope.row.score| filterState&#125;&#125;&lt;/el-tag&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line"></span><br><span class="line">//js</span><br><span class="line"> //筛选标签</span><br><span class="line">          filterTag(value, row) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value === -1) &#123;</span><br><span class="line">              <span class="built_in">return</span> row.score === -1;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">return</span> row.score &gt;= value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">   //过滤器</span><br><span class="line">      filters: &#123;</span><br><span class="line">        filterState(val) &#123;</span><br><span class="line">          <span class="built_in">return</span> val === -1 ? <span class="string">"未评分"</span> : <span class="string">"已完成"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p><strong>问题三</strong>返回刷新问题<br>从详情返回列表，列表不需要刷新，而从其他页面进入列表，列表需要刷新。<br>首先需要了解两个生命周期：<br><img src="/img/软件超市/created与activated.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 数据缓存</span><br><span class="line">beforeRouteEnter(to, from, next) &#123;</span><br><span class="line">  //如果不是从teamDetail来的界面需要刷新</span><br><span class="line">  if (![&quot;teamDetail&quot;].includes(from.name)) &#123;</span><br><span class="line">    to.meta.isRefresh = true;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;,</span><br><span class="line">activated() &#123;</span><br><span class="line">    //需要刷新的界面</span><br><span class="line">  if (this.$route.meta.isRefresh) &#123;</span><br><span class="line">    // 先重置</span><br><span class="line">    this.$route.meta.isRefresh = false;</span><br><span class="line">    //重新获取数据</span><br><span class="line">    this.isLoading = true;</span><br><span class="line">    this.getLoadData();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>后面重复的操作比较多，多为增删查改，重复的东西将不在记录了。有关于vue我不熟悉的知识点，会重新学习了解之后更新博客。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue全局配置&quot;&gt;&lt;a href=&quot;#vue全局配置&quot; class=&quot;headerlink&quot; title=&quot;vue全局配置&quot;&gt;&lt;/a&gt;vue全局配置&lt;/h2&gt;&lt;p&gt;项目有很多重复用到的变量和方法，新建一个global/index.js来存放。具体的实现是通过在Vu
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
      <category term="软件超市" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82/"/>
    
  </entry>
  
  <entry>
    <title>软件超市项目后台管理界面开发流程2</title>
    <link href="http://yoursite.com/2020/01/31/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B2/"/>
    <id>http://yoursite.com/2020/01/31/软件超市项目后台管理界面开发流程2/</id>
    <published>2020-01-31T13:53:41.000Z</published>
    <updated>2020-02-15T08:21:00.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置权限时动态加载路由"><a href="#设置权限时动态加载路由" class="headerlink" title="设置权限时动态加载路由"></a>设置权限时动态加载路由</h2><ol><li>路由分为两类，一类是静态路由（不需要登陆验证），一类是动态路由（需要登陆验证）</li><li>当用户登陆后，获取用role（权限），将role和路由表每个页面的需要的权限作比较，生成用户可访问的路由表</li><li>调用router.addRoutes(store.getters.addRouters)添加用户可访问的路由。</li><li>使用vuex管理路由表，根据vuex中可访问的路由渲染侧边栏组件。</li></ol><h3 id="permission-js"><a href="#permission-js" class="headerlink" title="permission.js"></a>permission.js</h3><p>首先新建store/permission.js，用来控制生成的路由表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//是否有权限访问，role为当前权限</span><br><span class="line">function hasPermission(role, route) &#123;</span><br><span class="line">  if (route.meta &amp;&amp; route.meta.roles) &#123;</span><br><span class="line">    //如果该路由的meta存在，并且有要求权限</span><br><span class="line">    const roles = route.meta.roles;</span><br><span class="line">    //如果路由要求的权限有当前权限，返回成功</span><br><span class="line">    return roles.includes(role);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    //如果不存在说明不需要权限</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const permission =&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    //默认路由</span><br><span class="line">    routers: constantRouterMap,</span><br><span class="line">    //添加的路由</span><br><span class="line">    addRouters: []</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_ROUTERS: (state, routers) =&gt; &#123;</span><br><span class="line">      //往数组中添加符合条件的路由</span><br><span class="line">      state.addRouters = routers;</span><br><span class="line">      //符合权限的路由变成默认路由可访问。</span><br><span class="line">      state.routers = constantRouterMap.concat(routers);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    //定义产生路由的方法</span><br><span class="line">    async GenerateRoutes(&#123; commit &#125;, &#123; role &#125;) &#123;</span><br><span class="line">      //返回符合权限的异步路由</span><br><span class="line">      const accessedRouters = await asyncRouterMap.filter(route =&gt;</span><br><span class="line">        hasPermission(role, route)</span><br><span class="line">      );</span><br><span class="line">      commit(&quot;SET_ROUTERS&quot;, accessedRouters);</span><br><span class="line">      return accessedRouters;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default permission;</span><br></pre></td></tr></table></figure><p>这里可以把permission.js看成一个模块，因为它拥有自己的state,mutation,action。所以还需要把permission挂载在vuex里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  modules:&#123;</span><br><span class="line">    permission</span><br><span class="line">  &#125;,</span><br><span class="line">  state,</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  getters</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>问题一</strong>addRoutes在哪里调用<br>登录后，获取用户的权限信息，然后筛选有权限访问的路由，再调用addRoutes添加路由。这个方法是可行的。但是不可能每次进入应用都需要登录，用户刷新浏览器又要登陆一次。所以addRoutes还是要在全局路由守卫里进行调用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(token)&#123;</span><br><span class="line">//已经登陆了</span><br><span class="line"><span class="keyword">if</span> (to.path ===<span class="string">"/login"</span>) next(&#123;path:<span class="string">"/"</span>&#125;)</span><br><span class="line">//</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!store.getters.role)&#123;</span><br><span class="line"> //如果没有当前权限信息,role仅getUserInfor后可以获得</span><br><span class="line">//用户登陆之后，根据缓存获取登陆信息</span><br><span class="line">  store.dispatch(<span class="string">"getUserInfor"</span>).<span class="keyword">then</span>(role=&gt;&#123;</span><br><span class="line"> //产生符合权限路由的方法</span><br><span class="line">   store.dispatch(<span class="string">"GenerateRoutes"</span>, &#123; role &#125;)</span><br><span class="line">     .<span class="keyword">then</span>(</span><br><span class="line">                   data =&gt; &#123;</span><br><span class="line">                     // 生成可访问的路由表</span><br><span class="line">                     router.addRoutes(data);</span><br><span class="line">                    next(&#123; ...to, replace: <span class="literal">true</span> &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题一</strong> next()的使用</p><ol><li><p>首先调用next()时会直接进入to路由，不会再调用beforeEach(),所以刷新页面可能会进入无限循环，调用next(‘xxx’)后会拦截路由使得路由重定向xxx，并再次调用beforeEach()。</p></li><li><p>如果把replace设置为true，那么导航不会留下history记录，点击浏览器回退按钮不会再回到这个路由。router.addRoutes之后的next()可能会失效，因为可能next()的时候路由并没有完全add完成，next({…to}) 的时候重新指定以下刷新前的路径。</p></li></ol><p><strong>问题二</strong> 404页面<br>404路由写在动态路由中，否则可能会有闪屏和路由为空时加载的404页面。<br>原因是：当页面刷新，会导致vue重新实例化，路由也恢复了初始路,addRoutes 还没有添加上路由就开始跳转， 所以找不到路由就跳转到404页面了。</p><h2 id="Layout页面"><a href="#Layout页面" class="headerlink" title="Layout页面"></a>Layout页面</h2><p>Layout作为整个后台管理页面的框架，主要有Header、根据权限生成的Sidebar和中间的显示界面组成。</p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//Layout组件</span><br><span class="line">   &lt;div id=<span class="string">"manage"</span>&gt;</span><br><span class="line">      &lt;Header&gt;&lt;/Header&gt;</span><br><span class="line">      &lt;div class=<span class="string">"container"</span>&gt;</span><br><span class="line">      &lt;Sidebar&gt;&lt;/Sidebar&gt;</span><br><span class="line">        &lt;router-view class=<span class="string">"content"</span> &gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>通过把一级路由与二级路由的path设置成同一个，来同时加载Header组件、Sidebar组件和中间对应的显示界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//仅用其中一个举列子</span><br><span class="line">const project =&#123;</span><br><span class="line">  path: &#123;</span><br><span class="line">    path: <span class="string">"/projectManage"</span>,</span><br><span class="line">    name: <span class="string">"projectManage"</span>,</span><br><span class="line">    component: Layout</span><br><span class="line">  &#125;,</span><br><span class="line">  check: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"check"</span>,</span><br><span class="line">      name: <span class="string">"projectCheck"</span>,</span><br><span class="line">      component: () =&gt;</span><br><span class="line">        import(</span><br><span class="line">          /* webpackChunkName: <span class="string">"ProjectCheck"</span> */ <span class="string">"../views/projectManage/components/ProjectCheck"</span></span><br><span class="line">          )</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> const asyncRouterMap = [</span><br><span class="line">&#123;</span><br><span class="line">    ...project.path,</span><br><span class="line">  children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: project.path.path,</span><br><span class="line">        redirect: <span class="string">"/projectManage/check"</span>,</span><br><span class="line">        component: () =&gt; import(/* webpackChunkName: <span class="string">"ProjectDeveloper"</span> */ <span class="string">"../views/projectManage/ProjectDeveloper"</span>),</span><br><span class="line">        children: [...project.check]</span><br><span class="line">      &#125;,]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>注意:</strong>这里有个简单的重定向问题我晕了好久QAQ</p><p>首先是path加/和不加/有什么区别。/xx就是根路径。下面代码去到children是/#/child而不是/#/fa/child。而不以斜杠开头的，都会被当成普通的字符串拼到当前路径的后面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path: /fa</span><br><span class="line">children: &#123;</span><br><span class="line">    path: /child</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这里重新定向之后<code>projectManage/check</code>路由到底算几级路由？通过把redirect注释之后终于弄懂了。这里是因为<strong>children控制的是第几个router-view</strong>,第一个children控制的是第二个router-view，即使它重定向<code>/projectManage/check</code>,第二个router-view显示的还是ProjectDeveloper组件。</p><h3 id="Siderbar"><a href="#Siderbar" class="headerlink" title="Siderbar"></a>Siderbar</h3><h4 id="导航图标上显示未读消息数量"><a href="#导航图标上显示未读消息数量" class="headerlink" title="导航图标上显示未读消息数量"></a>导航图标上显示未读消息数量</h4><p>   <img src="/img/软件超市/消息提醒.png" width="30%"></p><p>主要实现是使用element-ui里面的badge组件+父子间传值实现的。这里以导航图标上显示未读消息数量为例子，后续类似操作将不做记录。</p><p>新建一个MessageNue.vue记录未处理的消息数量，作为子组件，接收父组件传来的值。这里接收两个值：customClass样式，因为这个组件会重复使用，并且不同消息显示的位置可能不同，所以关于定位的信息要单独接收。menu接收的是显示的哪一个消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;span class=<span class="string">"badgebox"</span>&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;el-badge :value=<span class="string">"getMsgN(menu)"</span> :style=<span class="string">"customClass"</span> class=<span class="string">"item"</span> :max=<span class="string">"99"</span> :hidden=<span class="string">"!getMsgN(menu)"</span>&gt;&lt;/el-badge&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">"MessageNum"</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    menu: Object,</span><br><span class="line">    customClass: String</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getMsgN(menu) &#123;</span><br><span class="line">      <span class="built_in">return</span> this.count[menu.path];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">count</span></span>() &#123;</span><br><span class="line">      <span class="built_in">return</span> this.<span class="variable">$store</span>.state.msgNum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">//state.js</span><br><span class="line">  //需要显示的消息数量</span><br><span class="line">  msgNum: &#123;</span><br><span class="line">    publishExamine: 0,</span><br><span class="line">    delayExamine: 0,</span><br><span class="line">    alterExamine: 0,</span><br><span class="line">    undertakeExamine: 0,</span><br><span class="line">    projectExamine: 0,</span><br><span class="line">    porjectRun: 0,</span><br><span class="line">    projectCheck: 0,</span><br><span class="line">    projectFinish: 0,</span><br><span class="line">    projectManage: 0</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>Sidebar.vue 作为父组件，把组件挂载好之后。menu值是传的动态值所以用<code>v-bind:</code>绑定，而customClass是一个静态值所以直接传值就行。</p><p><strong>这里有一个命名的坑:</strong><br>props属性支持驼峰命名,不支持连接线命名。HTML特性是不区分大小写的，所以在HTML之中的驼峰写法要变成连接线写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;message-num :menu=&quot;&#123;path:router.name&#125;&quot; custom-class=&quot;top:-12px;right:-12px&quot;&gt;</span><br><span class="line">  &lt;i class=&quot;iconfont&quot; :class=&quot;&apos;icon-&apos;+router.meta.icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;/message-num&gt;</span><br></pre></td></tr></table></figure><h4 id="Header-vue"><a href="#Header-vue" class="headerlink" title="Header.vue"></a>Header.vue</h4><p>主要功能有：</p><p>1.显示用户名，可退出<br>2.如果身份是开发团队的队长，且同时有几个团队，显示当前团队，并可切换其他团队。<br>3.点击logo的时候，可以操作侧边栏展开</p><p>①下拉框用的是Element-ui的el-dropdown组件,下拉的时候出现退出键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// @<span class="built_in">command</span>=<span class="string">"handleCommand"</span>为绑定下拉框点击事件，<span class="built_in">command</span>为值</span><br><span class="line">    &lt;el-dropdown class=<span class="string">"exit"</span>  @<span class="built_in">command</span>=<span class="string">"handleCommand"</span>  trigger=<span class="string">"click"</span>&gt;</span><br><span class="line">      &lt;span class=<span class="string">"el-dropdown-link"</span>&gt;</span><br><span class="line">        &#123;&#123; username &#125;&#125;</span><br><span class="line">        &lt;i class=<span class="string">"el-icon-arrow-down el-icon--right"</span>&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;el-dropdown-menu slot=<span class="string">"dropdown"</span>&gt;</span><br><span class="line">        &lt;el-dropdown-item <span class="built_in">command</span>=<span class="string">"exit"</span>&gt;退出&lt;/el-dropdown-item&gt;</span><br><span class="line">      &lt;/el-dropdown-menu&gt;</span><br><span class="line">    &lt;/el-dropdown&gt;</span><br><span class="line"></span><br><span class="line">   // 退出登录或者切换用户管理界面</span><br><span class="line">      handleCommand(<span class="built_in">command</span>) &#123;</span><br><span class="line">        console.log(<span class="built_in">command</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">command</span> === <span class="string">"exit"</span>) &#123;</span><br><span class="line">        //退出之后清除</span><br><span class="line">          this.exit();</span><br><span class="line">        &#125;，</span><br><span class="line">      <span class="function"><span class="title">exit</span></span>() &#123;</span><br><span class="line">      // 退出清除缓存和登录</span><br><span class="line">      //登录成功之后重定向到登录页</span><br><span class="line">      this.<span class="variable">$store</span>.dispatch(<span class="string">"Logout"</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>②做第二个功能的时候，首先团队名称是通过axios获取的，并且刷新的时候还要在。所以应该把数据存在session中，同时要解决数据渲染的问题,采用了在state里面设置get和set的方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//state.js</span><br><span class="line">  get <span class="function"><span class="title">teams</span></span>() &#123;</span><br><span class="line">    <span class="built_in">let</span> vlaue = sessionStorage.getItem(<span class="string">"teams"</span>);</span><br><span class="line">    <span class="built_in">return</span> typeof vlaue === <span class="string">"string"</span> ? JSON.parse(vlaue) : [];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">set</span> teams(vlaue) &#123;</span><br><span class="line">    sessionStorage.setItem(<span class="string">"teams"</span>, JSON.stringify(vlaue));</span><br><span class="line">  &#125;,</span><br><span class="line">  get <span class="function"><span class="title">teamId</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> sessionStorage.getItem(<span class="string">"teamId"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">set</span> teamId(vlaue) &#123;</span><br><span class="line">    sessionStorage.setItem(<span class="string">"teamId"</span>, vlaue);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>这里切换团队之后页面刷新用了上一篇博客提到的provide/inject组合刷新的办法。</p><p>③第三个功能是兄弟Header和Sidebar组件的通讯，因为做这个项目主要是学习为主，所以选择了借助中央事件总线：在外部新建一个utils/eventBus.js文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//eventBus.js</span><br><span class="line">import Vue from <span class="string">'vue'</span></span><br><span class="line"><span class="built_in">export</span> default new Vue();</span><br><span class="line"></span><br><span class="line">//Header.vue</span><br><span class="line">import eventBus from <span class="string">"../../utils/eventBus.js"</span>;</span><br><span class="line"><span class="function"><span class="title">extendNav</span></span>() &#123;</span><br><span class="line">//通过eventBus中央事件总线用<span class="variable">$emit</span>发送一个showNav事件</span><br><span class="line">eventBus.<span class="variable">$emit</span>(<span class="string">"showNav"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //Sidebar.vue</span><br><span class="line"><span class="function"><span class="title">mounted</span></span>() &#123;</span><br><span class="line">//通过eventBus中央事件总线用<span class="variable">$on</span>监听组件1中发送的showNav事件，第二个参数为回调函数。</span><br><span class="line"> eventBus.<span class="variable">$on</span>(<span class="string">"showNav"</span>, this.change);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>上述是最开始的做法，后面发现更简便的方法。<br>主要是省略了外部的js文件，把总线放在main.js里的vue实例中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">eventBus:new Vue()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>兄弟组件调用的时候,用<code>this.$root.eventBus.$on</code>代替<code>eventBus.$on</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设置权限时动态加载路由&quot;&gt;&lt;a href=&quot;#设置权限时动态加载路由&quot; class=&quot;headerlink&quot; title=&quot;设置权限时动态加载路由&quot;&gt;&lt;/a&gt;设置权限时动态加载路由&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;路由分为两类，一类是静态路由（不需要登陆验证），一类是动
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
      <category term="软件超市" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82/"/>
    
  </entry>
  
  <entry>
    <title>软件超市项目后台管理界面开发流程1</title>
    <link href="http://yoursite.com/2020/01/29/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/01/29/软件超市项目后台管理界面开发流程/</id>
    <published>2020-01-29T13:53:41.000Z</published>
    <updated>2020-02-15T08:15:09.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-3-组件编写"><a href="#3-3-组件编写" class="headerlink" title="3.3 组件编写"></a>3.3 组件编写</h1><h2 id="3-3-1-Manage-vue"><a href="#3-3-1-Manage-vue" class="headerlink" title="3.3.1 Manage.vue"></a>3.3.1 Manage.vue</h2><ul><li>存放目录：src/views/Manage.vue</li><li>作用：作为Layout容器</li><li>详情：包含了Header组件与Sidebar组件</li></ul><h2 id="3-3-2-Login-vue"><a href="#3-3-2-Login-vue" class="headerlink" title="3.3.2 Login.vue"></a>3.3.2 Login.vue</h2><ul><li>存放目录：src/views/login/Login</li><li>作用：登陆界面</li><li>详情：通过前台展示界面进入，进入时选择身份，ID的不同身份权限不一样。</li></ul><p><img src="\img\软件超市\后台管理界面login.png" alt="后台管理界面"></p><p><strong>具体实现</strong></p><p>需要根据前台显示的页面获取信息：</p><ol><li>getStudentIdByRequest get请求获取登陆的学号ID</li><li>getUserId?studentId= 通过登陆的studentId获取userId</li><li>getRole?userId= 通过userId获取角色权限，通过不用的权限生成不同的导航栏。</li><li><p>getMessageByUserGet?userGet=userId 通过userId获取消息，如果有未读消息，进入管理页面后直接显示消息通知，如果没有未读消息，则显示第一个路由。<br><img src="/img/软件超市/软件超市项目后台管理界面开发流程2.png" width="50%"></p></li><li><p>权限、登陆时效等相关（重要）</p></li></ol><h3 id="问题一：跨域问题"><a href="#问题一：跨域问题" class="headerlink" title="问题一：跨域问题"></a>问题一：跨域问题</h3><p>由于vue-cli脚手架工具开发时，由于项目本身启动本地服务是需要占用一个端口的，所以必然会有跨域问题。<br>解决办法：config/index（webpack构建下），更改开发环境下(在dev里配置)的proxyTable。将请求代理到目标域名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  &quot;/v1&quot;:&#123;</span><br><span class="line">    target:&quot;http://software.sicau.edu.cn:8080&quot;,</span><br><span class="line">    changeOrigin: true//是否开启代理</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="问题二：axios的cookie问题"><a href="#问题二：axios的cookie问题" class="headerlink" title="问题二：axios的cookie问题"></a>问题二：axios的cookie问题</h3><p>由于用的是学校的统一认证平台，采用的是cookie，在使用axios的时候，发现http响应头中少了Set-Cookie属性（axios隐藏了这部分）。<br>解决办法：axios.defaults.withCredentials = true。withCredentials属性主要功能是指定跨域的请求是否应该使用证书（如cookie或授权头header）</p><h3 id="问题三：vue组件刷新问题。（这个方法在添加删除之中比较好用，最后虽然没有采用但还是把记录下来）"><a href="#问题三：vue组件刷新问题。（这个方法在添加删除之中比较好用，最后虽然没有采用但还是把记录下来）" class="headerlink" title="问题三：vue组件刷新问题。（这个方法在添加删除之中比较好用，最后虽然没有采用但还是把记录下来）"></a>问题三：vue组件刷新问题。（这个方法在添加删除之中比较好用，最后虽然没有采用但还是把记录下来）</h3><p>用vue-router重新路由到当前页面，页面是不进行刷新的。采用window.reload,或者router.go(0)刷新时，整个浏览器进行了重新加载，闪烁，体验感不好。<br>解决办法：provide/inject组合<br>provide：选项应该是一个对象或返回一个对象的函数。该对象包含可传递其子孙的属性。<br>inject：一个字符串数组，或一个对象，对象的 key 是本地的绑定名</p><ol><li><p>app.vue 中通过provide将父组件中的数据传给子组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view v-if=<span class="string">"isRouterAlive"</span>&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">"App"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">provide</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      reload: this.reload</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      isRouterAlive: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">      this.isRouterAlive = <span class="literal">false</span></span><br><span class="line">      this.<span class="variable">$nextTick</span>( ()=&gt;</span><br><span class="line">        this.isRouterAlive = <span class="literal">true</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>在要使用的组件中inject:[‘reload’],调用this.reload()既可实现刷新。</p></li></ol><h3 id="问题4：错误捕获问题"><a href="#问题4：错误捕获问题" class="headerlink" title="问题4：错误捕获问题"></a>问题4：错误捕获问题</h3><p>由于前端要根据返回的不同错误类型，进行不同的处理，在抛出问题时，不知道用async/await的错误如何捕获。<br>解决办法：try catch只能捕获同步代码，不能捕获异步代码，在async函数内，使用await可以捕获异步代码，这里实际上是异步代码变成了同步代码。</p><ul><li>在 async 函数内部使用 try catch 捕获异步错误</li><li>promise 内部使用 .catch 方法来捕获 promise 内部代码错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">async getRequest(&#123;commit,dispatch&#125;)&#123;</span><br><span class="line">  try&#123;</span><br><span class="line">    let  resGetStudentIdByRequest = await getStudentIdByRequest();</span><br><span class="line">    if (resGetStudentIdByRequest.status==0)&#123;</span><br><span class="line">     ...</span><br><span class="line">    &#125;</span><br><span class="line">    else throw resGetStudentIdByRequest.msg;</span><br><span class="line">  &#125;catch(err)&#123;</span><br><span class="line">    throw &#123;err, msg: &quot;无效登录&quot;, code: 1 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="问题5：token验证-——————————————————待补充"><a href="#问题5：token验证-——————————————————待补充" class="headerlink" title="问题5：token验证 ——————————————————待补充"></a>问题5：token验证 ——————————————————待补充</h3><blockquote><p>之前的项目用的是session，偶然见看见一篇关于token的文章。<a href="https://blog.csdn.net/mydistance/article/details/84545768" target="_blank" rel="noopener">https://blog.csdn.net/mydistance/article/details/84545768</a></p></blockquote><p>点击进入管理界面时，先根据选择的不同身份，设置不同的不同的角色信息，在进加密。</p><p>进行路由拦截</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//main.js</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line"><span class="built_in">let</span> token = sessionStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line"><span class="keyword">if</span>(token)&#123;...&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  //如果没有token ,如果to.path在白名单中,则免登陆。如果不在白名单中，定向去登陆页面</span><br><span class="line">    (whiteList.includes(to.path)) == <span class="literal">true</span> ? next(): next(<span class="string">"/login"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登陆时设置token</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//action.js</span><br><span class="line">//设置角色</span><br><span class="line">async setRole(&#123;commit,dispatch&#125;,roleId)&#123;</span><br><span class="line">  //给身份加密</span><br><span class="line">  setRole(roleId);</span><br><span class="line">  //设置token</span><br><span class="line">  setToken();</span><br><span class="line">&#125;,</span><br><span class="line">//auth.js</span><br><span class="line">const verify = 45416289438485;</span><br><span class="line">//给角色权限加密</span><br><span class="line"><span class="built_in">export</span> const setRole = roleId =&gt; &#123;</span><br><span class="line">  <span class="built_in">let</span> token = verify * roleId;</span><br><span class="line">  sessionStorage.setItem(<span class="string">"xxx"</span>, token);</span><br><span class="line">&#125;;</span><br><span class="line">//设置登陆token</span><br><span class="line"><span class="built_in">export</span> const setToken = () =&gt; &#123;</span><br><span class="line">  <span class="built_in">let</span> token = randomString(32);</span><br><span class="line">  sessionStorage.setItem(<span class="string">"token"</span>, token);</span><br><span class="line">&#125;;</span><br><span class="line">//产生随机数</span><br><span class="line"><span class="keyword">function</span> randomString(len) &#123;</span><br><span class="line">  len = len || 32;</span><br><span class="line">  /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/</span><br><span class="line">  const <span class="variable">$chars</span> =</span><br><span class="line">    <span class="string">"ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678"</span>;</span><br><span class="line">  const maxPos= <span class="variable">$chars</span>.length;</span><br><span class="line">  <span class="built_in">let</span> <span class="built_in">pwd</span> = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="built_in">pwd</span> += <span class="variable">$chars</span>.charAt(Math.floor(Math.random() * maxPos));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> <span class="built_in">pwd</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后为了防止用户直接手动按f5刷新页面，这个时候会重新构建vue实例，而又没有重新登录，所以vuex里面的东西会清空，所以将登录后的数据存放在sessionStroage中，在刷新页面，重新构建vue实例的时候，会有判断。</p><h3 id="问题6：button按钮添加回车事件"><a href="#问题6：button按钮添加回车事件" class="headerlink" title="问题6：button按钮添加回车事件"></a>问题6：button按钮添加回车事件</h3><p>最开始的写法，发现login方法根本没有执行，开始以为是@keyup.enter.native的问题，但是写在封装好的组件中的时候加.native才能监听原生的事件。后面发现是输入框事件，在button上面不起效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button @click=<span class="string">"login"</span>  @keyup.enter.native=<span class="string">"login"</span> class=<span class="string">"btn"</span> :loading=<span class="string">"btnLoading"</span>&gt;进入管理页面&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><p>修改后，用了自定义指令的办法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button @click=&quot;login&quot;   v-enter=&quot;this&quot; class=&quot;btn&quot; :loading=&quot;btnLoading&quot;&gt;进入管理页面&lt;/el-button&gt;</span><br><span class="line"> directives: &#123;</span><br><span class="line">   // 按enter键登录</span><br><span class="line">   enter(el, &#123; value &#125;) &#123;</span><br><span class="line">     document.onkeydown = e =&gt; &#123;</span><br><span class="line">       e = e || window.event;</span><br><span class="line">       if (e.keyCode === 13) &#123;</span><br><span class="line">         value.login();</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h3 id="问题7：封装好外部链接"><a href="#问题7：封装好外部链接" class="headerlink" title="问题7：封装好外部链接"></a>问题7：封装好外部链接</h3><p>通过新建一个元素a，调用函数时点击a来实现外部跳转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const HOME_URL = <span class="string">"主页"</span>;</span><br><span class="line">const LOGIN_URL = <span class="string">"统一认证界面"</span>;</span><br><span class="line">//新建a</span><br><span class="line"><span class="built_in">export</span> const goto = url =&gt; &#123;</span><br><span class="line">  const link = document.createElement(<span class="string">"a"</span>);</span><br><span class="line">  link.href = url;</span><br><span class="line">  link.click();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">goto.home = () =&gt; goto(HOME_URL);</span><br><span class="line">goto.login = () =&gt; goto(LOGIN_URL);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;3-3-组件编写&quot;&gt;&lt;a href=&quot;#3-3-组件编写&quot; class=&quot;headerlink&quot; title=&quot;3.3 组件编写&quot;&gt;&lt;/a&gt;3.3 组件编写&lt;/h1&gt;&lt;h2 id=&quot;3-3-1-Manage-vue&quot;&gt;&lt;a href=&quot;#3-3-1-Manage-
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
      <category term="软件超市" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、LocalStorage、sessionStorage</title>
    <link href="http://yoursite.com/2020/01/29/Cookie%E3%80%81LocalStorage%E3%80%81sessionStorage/"/>
    <id>http://yoursite.com/2020/01/29/Cookie、LocalStorage、sessionStorage/</id>
    <published>2020-01-29T08:36:10.000Z</published>
    <updated>2020-01-29T08:29:17.669Z</updated>
    
    <content type="html"><![CDATA[<p><strong>主要区别</strong></p><p><img src="/img/js/Cookie.png" width="70%"></p><p><strong>方法</strong></p><p>localStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等</p><p>setItem存储value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br><span class="line">localStorage.setItem(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br></pre></td></tr></table></figure><p>getItem获取value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> value = sessionStorage.getItem(<span class="string">"key"</span>);</span><br><span class="line"><span class="built_in">let</span> key = localStorage.getItem(<span class="string">"key"</span>);</span><br></pre></td></tr></table></figure><p>removeItem删除key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.removeItem(<span class="string">"key"</span>);</span><br><span class="line">localStorage.removeItem(<span class="string">"key"</span>);</span><br></pre></td></tr></table></figure><p>clear清除所有的key/value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.clear();</span><br><span class="line">localStorage.clear();</span><br></pre></td></tr></table></figure><p>localStorage和sessionStorage的key和length属性实现遍历</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> storage = window.localStorage;</span><br><span class="line"><span class="keyword">for</span>(var i=0, len=storage.length; i&lt;len;i++)&#123;</span><br><span class="line">    var key = storage.key(i);</span><br><span class="line">    var value = storage.getItem(key);</span><br><span class="line">    console.log(key + <span class="string">"="</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;主要区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/js/Cookie.png&quot; width=&quot;70%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;localStorage和sessionStorage都具有相
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="http://yoursite.com/2020/01/08/promise/"/>
    <id>http://yoursite.com/2020/01/08/promise/</id>
    <published>2020-01-08T09:36:10.000Z</published>
    <updated>2020-01-29T07:03:56.336Z</updated>
    
    <content type="html"><![CDATA[<p> 这里记录了学习promise的笔记，如果有更深刻的理解会不断更新。</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><h4 id="1-函数对象与实例对象"><a href="#1-函数对象与实例对象" class="headerlink" title="1.函数对象与实例对象"></a>1.函数对象与实例对象</h4><p>函数对象：将函数作为对象使用<br>实例对象：new函数产生的对象</p><blockquote><p>括号左边是函数，点左边是对象</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Fn</span></span>()&#123; //Fn函数</span><br><span class="line">&#125;</span><br><span class="line">const fn = new Fn() //这里的Fn是构造函数，fn是实例对象（new返回的，简称对象）</span><br><span class="line">Fn.prototype  //Fn本身是个函数，但是使用了XX.XXX(使用了.)，把该函数作为对象来使用，所以这里的Fn是函数对象</span><br></pre></td></tr></table></figure><h4 id="2-两种类型的回调函数"><a href="#2-两种类型的回调函数" class="headerlink" title="2.两种类型的回调函数"></a>2.两种类型的回调函数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*-----------同步回调函数--------------*/</span><br><span class="line">const arr = [1,3,5]</span><br><span class="line">arr.forEach(item =&gt;&#123;  //遍历回调，同步回调函数，一上来就执行，不会放入队列</span><br><span class="line"> console.log(item)</span><br><span class="line">&#125;)</span><br><span class="line">//forEach是一个函数，回调函数也是一个函数。说明该回调函数是同步回调函数，等完全执行完毕之后才执行最后一个打印语句</span><br><span class="line">console.log(<span class="string">"forEach()执行完毕之后"</span>)</span><br><span class="line">//输出</span><br><span class="line">//1，3，5 forEach()执行完毕之后</span><br><span class="line"></span><br><span class="line">/*-----------异步回调函数--------------*/</span><br><span class="line">setTimeout(()=&gt;&#123;//异步回调函数，会放入队列中将来执行</span><br><span class="line"> console.log(<span class="string">"timeout callback()"</span>)</span><br><span class="line">&#125;,0)</span><br><span class="line">console.log(<span class="string">"setTimeout()之后"</span>)</span><br><span class="line">//输出</span><br><span class="line">//setTimeout()之后 timeout callback()</span><br></pre></td></tr></table></figure><p><strong>同步回调</strong></p><p>理解：立即执行，完全执行完了才结束，不会放入回调队列中<br>例子：数组遍历相关的回调函数 /promise的excutor函数</p><p><strong>异步回调</strong></p><p>理解：不会立即执行，会放入回调队列中来执行<br>例子：定时器回调 /ajax回调 /promise的成功与失败的回调</p><h4 id="3-error处理"><a href="#3-error处理" class="headerlink" title="3.error处理"></a>3.error处理</h4><p><strong>错误类型</strong></p><p>Error:所有错误的父类型<br>子类型(常见的)：<br>ReferenceError: 引入错误，引用的变量不存在<br>TypeError: 数据类型不正确的错误<br>RangeError：数据值不在其所允许的范围内。<br>SyntaxError：语法错误</p><p><strong>错误处理</strong></p><p>若没有捕获error，后续的代码是不会执行的<br>捕获错误:try{}catch(error){}<br>抛出错误:throw error()</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//抛出错误，自己定义错误</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">something</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span>(Date.now()%2 ===1)&#123;</span><br><span class="line">  console.log(<span class="string">"当前时间为奇数,可以执行任务"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">//自己定义时间为偶数时为错误, 抛出的错误由调用来处理比如：打印，显示消息框等</span><br><span class="line">//  throw new Error(里面为传出的message) 固定格式</span><br><span class="line">  throw new Error(<span class="string">'当前时间为偶数，无法执行任务'</span>)</span><br><span class="line">&#125;</span><br><span class="line">try&#123;</span><br><span class="line">  something&#123;&#125;</span><br><span class="line">&#125; catch(error)&#123;</span><br><span class="line">//error下面两个属性message与stack</span><br><span class="line">console.log(error.message)//错误相关信息</span><br><span class="line">console.log(error.stack)//函数调用栈记录信息</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise的理解和使用"><a href="#Promise的理解和使用" class="headerlink" title="Promise的理解和使用"></a>Promise的理解和使用</h3><p>Promise是JS中进行异步编程的新的解决方案（旧的是纯回调的方式）<br>从语法来说：Promise是一个构造函数<br>从功能上说：Promise对象用来封装一个异步操作并可以获取其结果</p><p><strong>Promise的状态</strong></p><ol><li>pending变为resolved（成功）</li><li>pending变为rejected (失败)</li></ol><p>说明：只有这两种变化，且一个Promise对象只能改变一次。无论是成功还是失败，都会有一个结果数据。成功的结果数据一般称为value，失败的结果数据一般称为reason</p><p>   <img src="/img/软件超市/软件超市项目后台管理界面开发流程4.png" width="50%"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//1.创建一个新的promise对象,里面传一个回调函数</span><br><span class="line">const p = new Promise((resolve,reject)=&gt;&#123; //执行器函数 同步回调</span><br><span class="line">//2.执行异步操作</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">const time = Date.now() //如果当前时间是偶数代表成功，否则代表失败</span><br><span class="line"><span class="keyword">if</span>(time%2 ==0)&#123;</span><br><span class="line">//3.1 如果成功了，调用resolve(value)</span><br><span class="line">  resolve(<span class="string">"成功的数据,time="</span>+time)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">//3.2 如果失败了，调用reject（reason）</span><br><span class="line"> reject(<span class="string">"成功的数据,time="</span>+time)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,1000);</span><br><span class="line">&#125;)</span><br><span class="line">p.then(</span><br><span class="line"> value =&gt;&#123;</span><br><span class="line"> //接收得到成功的value数据  onResolved</span><br><span class="line">   console.log(<span class="string">"成功的回调"</span>,value)</span><br><span class="line"> &#125;,</span><br><span class="line"> reason =&gt; &#123;</span><br><span class="line"> //接收得到失败的reason数据 onRejected</span><br><span class="line">    console.log(<span class="string">"失败的回调"</span>,reason)</span><br><span class="line"> &#125;</span><br><span class="line">)</span><br><span class="line">//输出 成功的回调 成功的数据,time=XXXX</span><br></pre></td></tr></table></figure><p><strong>优势</strong></p><ol><li><p>指令回调函数的方式更加灵活：旧的，必须在启动异步任务前指定;promise：启动异步任务 =&gt; 返回peomise对象 =&gt; 给promise对象绑定回调函数(甚至可以在异步执行之后才指定他的回调函数)</p></li><li><p>支持链式调用，可以解决回调地狱问题（回调函数嵌套调用，不便于阅读/不便于异常）。</p></li></ol><p>简便写法，Promise还有一些对象方法，这里就不进行记录了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const p1 = new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">  resolve(1)</span><br><span class="line">&#125;)</span><br><span class="line">const p2 = Promise.reject(2)</span><br><span class="line">p2.catch(reason=&gt;&#123;console.log(reason)&#125;)</span><br></pre></td></tr></table></figure><p><strong>几个关键问题</strong></p><p>1.如何改变promise的状态？<br>（1）resolve(value):如果当前是pending就会变为resolved<br>（2）reject（reason）：如果当前是pending就会变为rejected<br>（3）抛出异常：如果当前是pending就会被成rejected <code>throw new Error(&quot;出错了&quot;)</code> reason值是你抛出的东西</p><p>2.一个promise指定多个成功/失败的回调函数，都会调用吗？<br>当promise改变为对应状态时会调用</p><p>3.改变promise状态和指定回调函数谁先执行。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line"> setTimeout(()&gt;&#123;</span><br><span class="line">  resolve(1)//后改变的状态，同时指定数据，异步执行回调函数</span><br><span class="line"> &#125;,1000);</span><br><span class="line">&#125;).then(//先指定回调函数，保存当前指定的回调函数</span><br><span class="line">value=&gt;&#123;&#125;,reason=&gt;&#123;&#125;</span><br><span class="line">)</span><br><span class="line">/*---------先改状态后指定回调函数------------*/</span><br><span class="line">new Promise((resolve,reject)=&gt;&#123; //同步回调</span><br><span class="line">  resolve(1)//先改变的状态，同时指定数据</span><br><span class="line">);</span><br><span class="line">&#125;).then(//异步回调</span><br><span class="line">value=&gt;&#123;&#125;,reason=&gt;&#123;&#125;//后指定回调函数，异步执行回调函数</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>4.promise.then()返回的新的promise的结果状态由什么决定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">  //1.resolve(1)</span><br><span class="line">  //2.reject(1)</span><br><span class="line">);</span><br><span class="line">&#125;).<span class="keyword">then</span>(</span><br><span class="line">value=&gt;&#123;</span><br><span class="line"> console.log(<span class="string">'onResolved1()'</span>,value)</span><br><span class="line"> //3.return 2</span><br><span class="line"> //4.return Promise.resolve(3)</span><br><span class="line"> //5.return Promise.reject(4)</span><br><span class="line"> //6 throw 5</span><br><span class="line">&#125;,reason=&gt;&#123;</span><br><span class="line"> console.log(<span class="string">'onRejected1()'</span>,reason)</span><br><span class="line">&#125;</span><br><span class="line">).<span class="keyword">then</span>(</span><br><span class="line">value=&gt;&#123;</span><br><span class="line"> console.log(<span class="string">'onResolved2()'</span>,value)</span><br><span class="line">&#125;,reason=&gt;&#123;</span><br><span class="line"> console.log(<span class="string">'onRejected2()'</span>,reason)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">//1.输出onResolved1() 1 onResolved2() undefined</span><br><span class="line">//2.输出onRejected1() 1  onResolved2() undefined （ 其余情况结合1.3 1.4 1.5 1.6 ）</span><br><span class="line">//1.3 输出onResolved1() 1 onResolved2() 2</span><br><span class="line">//1.4 输出onResolved1() 1 onResolved2() 3</span><br><span class="line">//1.5 输出onResolved1() 1 onRejected2() 4</span><br><span class="line">//1.6 输出onResolved1() 1 onRejected2() 5</span><br></pre></td></tr></table></figure><ol start="5"><li>promise异常传透和中止</li></ol><p>当使用promise的then链式调用时，可以在最后指定失败的回调，因为没有处理异常相当于 <code>reason =&gt; {throw reason}</code>。会一层一层往下寻找异常处理（知道找到）。</p><p>当使用promise的then链式调用时，若想中断promise链，可一返回<code>new Promise(()=&gt;{})</code>返回一个处于pending的promise。</p><blockquote><p>自定义promise链接：<a href="https://github.com/biubiuins/promise-/tree/master" target="_blank" rel="noopener">https://github.com/biubiuins/promise-/tree/master</a></p></blockquote><h2 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h2><h3 id="1-async-函数"><a href="#1-async-函数" class="headerlink" title="1.async 函数"></a>1.async 函数</h3><p>async是’异步’的简写，用于申明这个函数是异步的。<br>函数的返回值为Promise对象，promise对象的结果由async函数执行的返回值决定。</p><h3 id="2-await-表达式"><a href="#2-await-表达式" class="headerlink" title="2.await 表达式"></a>2.await 表达式</h3><p>await相当于then的语法糖。<br>当await后面的表达式为promise，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，得到的结果就是promise成功的value。如果右侧表达不是promise，得到的结果就是它本身。</p><p><strong>注意：</strong></p><ul><li>await必须放在async函数里面</li><li>await只能得到成功的结果，失败的结果需用try-catch</li><li>try catch只能捕获同步代码，不能捕获异步代码，在async函数内，使用await可以捕获异步代码，这里实际上是异步代码变成了同步代码。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 这里记录了学习promise的笔记，如果有更深刻的理解会不断更新。&lt;/p&gt;
&lt;h2 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h2&gt;&lt;h3 id=&quot;预备知
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="http://yoursite.com/2019/08/01/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/08/01/MongoDB学习笔记/</id>
    <published>2019-08-01T14:15:07.000Z</published>
    <updated>2019-08-15T15:28:05.368Z</updated>
    
    <content type="html"><![CDATA[<p>MongoDB是非关系型数据库文档数据库，存的<strong>类似JSON</strong>的结构。</p><p>启动服务器，db存放数据库，我创建在D盘的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath D:\mongoDB\data\db</span><br><span class="line">/*-----默认端口号27017-----*/</span><br><span class="line">mongod --dbpath D:\mongoDB\data\db --port XXX</span><br></pre></td></tr></table></figure><p>注意两个概念：</p><ol><li>数据库的服务器。服务器用来保存数据，mongod启动服务器</li><li>数据库的客户端。客户端用来操作服务器，对数据惊醒增删改查的操作，mongo启动</li></ol><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>数据库：存放集合。<br>集合：类似数组，在集合中存放文档。<br>文档：文档是数据库中的最小单位，存储和操作内容都是文档。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>use 数据库名 //进入数据库</p><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p>插入一个放对象db.<collection>.insert({数据})//db.<collection>.insertOne()<br>插入多个放数组db.<collection>.insert([{},{}]) //db .<collection>.insertMang()</collection></collection></collection></collection></p><p>//插入多条可以配合使用for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr =[];</span><br><span class="line">for (var i=1;i&lt;=20000;i++)&#123;</span><br><span class="line">arr.push(&#123;num:i&#125;);</span><br><span class="line">&#125;</span><br><span class="line">db.numbers.insert(arr)</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>db.<collection>.find({条件})，为空查询所有。</collection></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*----名字为张三并且年龄为28的文档,返回的是一个数组--*/</span><br><span class="line">db.stus.find(&#123;name:&quot;张三&quot;,age:28&#125;)</span><br><span class="line">/*----查询符合条件的第一个集合，返回的是一个对象--*/</span><br><span class="line">db.stus.findOne(&#123;age:28&#125;)</span><br><span class="line">/*-----返回符合条件的文档数量----*/</span><br><span class="line">db.&lt;collection&gt;.find().count()</span><br></pre></td></tr></table></figure><p>MongoDB支持通过内嵌文档的属性进行查询，通过点（.）连接。但是此属性名必须是用引号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hobby:&#123;movies:[111,222],XXX&#125;</span><br><span class="line"></span><br><span class="line">//查找的是hobby里面的moovies里面的值有111</span><br><span class="line">db.users.find(‘hobby.movies’:&apos;111&apos;)</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>db.<collection>.update(查询条件，新对象,{修改的配置选项，可选})。update默认会使用新对象来替换旧对象。所以不常用。<strong>默认情况下只会修改一个</strong> ，实际上既可修改单个，也可修改多个。<br>db.<collection>.updateMany()。 修改多条<br>db.<collection>.updateOne()。 修改单条<br>db.collection.replaceOne()。替换单条</collection></collection></collection></p><p>常与<code>$set</code>结合使用来修改文档中的指定属性，没有的属性名会自动创建。<code>unset</code>可以删除响应属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.stus.update(&#123;name:&quot;李四&quot;&#125;,&#123;$set:&#123;gender:&quot;女&quot;&#125;，&#123;add:&quot;哈哈哈&quot;&#125;&#125;)</span><br><span class="line">//若值为一个数组,$push往数组中添加。不考虑是否重复</span><br><span class="line">//$addToSet 向数组中添加一个新元素。 重复的就不会添加。</span><br><span class="line">db.stus.update(&#123;name:&quot;李四&quot;&#125;,&#123;$push:&#123;hobby.movies’:&apos;333&apos;&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>db.collection.remove()  删除符合条件的所有文档，第二个参数可选：删除配置（比如只删除一个）。<strong>必须传参，但如果传递空对象，则所有文档都删除（清空集合，性能太差）</strong><br>db.collection.deleteMany()<br>db.collection.deleteOne()<br>db.collection.drop() 删除集合<br>db.dropDatabase()删除数据库</p><p><strong>一般数据是不会删除的，而是在数据中添加一个字段，表示是否删除</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MongoDB是非关系型数据库文档数据库，存的&lt;strong&gt;类似JSON&lt;/strong&gt;的结构。&lt;/p&gt;
&lt;p&gt;启动服务器，db存放数据库，我创建在D盘的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>js常用字符串操作方法总结</title>
    <link href="http://yoursite.com/2019/07/16/js%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2019/07/16/js的字符串/</id>
    <published>2019-07-16T13:36:40.000Z</published>
    <updated>2019-07-22T15:11:08.175Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>终于忙完期末了，考研复习也慢慢走上正轨，要抽出更多的时间把以前学的东西总结下来，再在项目中实践，重新学习更深的内容。24小时完全不够用QAQ。</p></blockquote><h2 id="substring-star-stop-slice（star-stop）"><a href="#substring-star-stop-slice（star-stop）" class="headerlink" title="substring(star,stop)/slice（star,stop）"></a>substring(star,stop)/slice（star,stop）</h2><p>最常用的就是对后台传过来的字符串进行<strong>截取处理</strong></p><p>语法：stringObject.substring(start,stop)</p><ul><li>start 必须，并且非负整数</li><li>stop 可选，并且非负整数。如果省略，一直截取到字符串的结尾</li><li>返回一个新的字符串，包含了start处的字符，但不包括stop处的字符</li></ul><p>语法：stringObject.slice(start,end)</p><ul><li>start 截取的片段的起始下标，如果为负数，从后往前截取（-1 指字符串的最后一个字符）</li><li>end  截取的结尾的下标</li><li>返回一个新的字符串，包含了start处的字符，但不包括end处的字符</li></ul><blockquote><p>arrayObject.slice(start,end)与stringObject.slice(start,end)相似用法。注意array.splice与slice的区别在于splice方法会改变原数组并且可以向原数组中添加元素，如果有删除元素则返回是含有删除的元素的数组。</p></blockquote><h2 id="String-split-Array-join"><a href="#String-split-Array-join" class="headerlink" title="String.split()/Array.join()"></a>String.split()/Array.join()</h2><p>语法: stringObject.split(separator,howmany)</p><p>把一个字符串分割成字符串数组</p><ul><li>separator 必须。字符或正则表达式，从该从该参数指定的地方分割 stringObject。</li><li>howmany  可选。该参数可指定返回的数组的最大长度。</li><li>返回一个字符串数组，不包括separator自身</li></ul><p>语法： arrayObject.join(separator)</p><p>数组中的所有元素放入一个字符串。</p><ul><li>separator 数组中的元素形成字符串时连接的符号，默认逗号。</li><li>如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割</li><li>返回一个字符串数组</li></ul><h2 id="String-concat-Array-concat"><a href="#String-concat-Array-concat" class="headerlink" title="String.concat()/Array.concat()"></a>String.concat()/Array.concat()</h2><p>字符串的concat方法其实并不常用，连接两个字符串的时候我们常常用<code>+</code>来代替。这里主要是记录几个数组的连接方法。</p><p>语法:arrayObject.concat(arrayX,arrayX,……,arrayX)</p><ul><li>添加的是数组的元素不是添加一个数组</li><li>返回一个新数组，不改变原数组</li></ul><h2 id="string-replace-regexp-substr-replacement"><a href="#string-replace-regexp-substr-replacement" class="headerlink" title="string.replace(regexp/substr,replacement)"></a>string.replace(regexp/substr,replacement)</h2><ul><li>第一个参数可以使RegExp对象或者一个字符串，第二个参数可以是一个字符串或者一个函数。如果第一个参数是字符串，那么只会替换第一个字符串。如果想替换所有的字符串，则必须使用正则表达式。</li><li>默认只进行第一次匹配操作的替换，想要全局替换，需要置上正则全局标识g</li><li>‘\s”是转移符号用以匹配任何空白字符，包括空格、制表符、换页符等等，</li></ul><h2 id="string-search-regexp-string-indexOf-searchvalue-fromindex"><a href="#string-search-regexp-string-indexOf-searchvalue-fromindex" class="headerlink" title="string.search(regexp)/string.indexOf(searchvalue,fromindex)"></a>string.search(regexp)/string.indexOf(searchvalue,fromindex)</h2><p>语法 string.indexOf(searchvalue,fromindex)</p><ul><li>searchvalue，规定检索的字符串值</li><li>fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。</li><li>返回的检索的字符串第一次出现的位置，如果没有出现，返回-1</li></ul><p>语法 string.search(regexp)</p><ul><li>regexp 该参数可以是需要在 stringObject 中检索的子串，也可以是需要检索的 RegExp 对象。</li><li>要执行忽略大小写的检索，追加标志 i。</li><li>返回值：stringObject 中第一个与 regexp 相匹配的子串的起始位置。</li><li>search() 方法不执行全局匹配，它将忽略标志 g。它同时忽略 regexp 的 lastIndex 属性，</li></ul><p>语法 stringObject.match(searchvalue)<br>     stringObject.match(regexp)</p><ul><li>返回指定的值</li><li>非全局下返回的数组包含index，input，全局模式下只返回匹配结果，没有index，input等，只有结果。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;终于忙完期末了，考研复习也慢慢走上正轨，要抽出更多的时间把以前学的东西总结下来，再在项目中实践，重新学习更深的内容。24小时完全不够用QAQ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;substring-star-stop-slice（
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2019/07/15/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/07/15/正则表达式/</id>
    <published>2019-07-15T14:57:10.000Z</published>
    <updated>2019-07-22T15:29:26.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><strong>修饰符</strong></p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>执行对大小写不敏感的匹配。</td></tr><tr><td>g</td><td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td>m</td><td>执行多行匹配。</td></tr></tbody></table><p><strong>元字符</strong></p><p><img src="\img\js\元字符.png" alt="元字符"></p><p><strong>方括号</strong></p><p><img src="\img\js\方括号.png" alt="方括号"></p><p><strong>量词</strong></p><p><img src="\img\js\量词.png" alt="量词"></p><ul><li>js里面的正则只有前瞻，头部的（后），尾部的（前），所以前瞻就是后面紧跟着的</li><li>匹配有贪婪模式（尽可能多的匹配），非贪婪模式（尽可能少的匹配），默认为贪婪模式，非贪婪模式需要在量词后面加？</li></ul><p><a href="https://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html" target="_blank" rel="noopener">常用正则表达</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;修饰符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;修饰符&lt;/th&gt;
&lt;th
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js遍历方法总结</title>
    <link href="http://yoursite.com/2019/07/04/js%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2019/07/04/js的遍历/</id>
    <published>2019-07-04T00:45:05.000Z</published>
    <updated>2019-07-15T13:38:02.166Z</updated>
    
    <content type="html"><![CDATA[<p>复习之余，把常用的遍历方法总结，方便使用的时候查看。</p><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><p>语法中有thisValue参数的，可以接收第二个参数，用来绑定回调函数内部的this变量，将回调函数内部的this对象，指向第二个参数，间接操作这个参数（一般是数组）。以map为例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class="line"></span><br><span class="line">[1, 2].map(function (e) &#123;</span><br><span class="line">    return this[e];</span><br><span class="line">&#125;, arr)</span><br><span class="line"> // [&apos;b&apos;, &apos;c&apos;]</span><br></pre></td></tr></table></figure><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>语法: array.forEach(function(currentValue, index, arr), thisValue)</p><p> 调用数组的每个元素，并将元素传递给回调函数。<br> <strong>没有返回一个新数组。不能中断，对空数组是不会执行回调函数。</strong></p><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>语法: array.map(function(currentValue,index,arr), thisValue)</p><p>按照原始数组元素顺序依次处理元素，结果放在一个新数组里返回。<br><strong>返回一个新数组，不会改变原始数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*------从接口得到数据------*/</span><br><span class="line">const users=res.items.map(item =&gt; (&#123;</span><br><span class="line">    url: item.html_url,</span><br><span class="line">    img: item.avatar_url,</span><br><span class="line">    name: item.login,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>语法：array.filter(function(currentValue,index,arr), thisValue)</p><p>创建一个新的数组，指定数组中符合条件的放入新数组。<br><strong>返回一个新数组，按照约定条件筛选数组元素时比较常用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*-----去重问题----*/</span><br><span class="line">var arr = [1, 2, 2, 3, 4, 5, 5, 6, 7, 7,8,8,0,8,6,3,4,56,2];</span><br><span class="line">var arr2 = arr.filter((x, index,self)=&gt;self.indexOf(x)===index)</span><br><span class="line">console.log(arr2); //[1, 2, 3, 4, 5, 6, 7, 8, 0, 56]</span><br></pre></td></tr></table></figure><h4 id="every-some"><a href="#every-some" class="headerlink" title="every()/some()"></a>every()/some()</h4><p>语法: array.every(function(currentValue,index,arr), thisValue)</p><p>对整个数组进行检查，如有一个元素满足，整个表达式返回false，且其余元素不检查。否则返回true。</p><p><strong>不会改变原数组</strong></p><p>语法:array.some(function(currentValue,index,arr),thisValue)</p><p>对整个数组进行检查，如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。反之返回false。</p><p><strong>不会改变原数组</strong></p><p>   这两个方法在实际开发中，大有可用之处。比如在判定用户是否勾选了不可操作的数据，或者是否勾选了一条可以操作的数据可以使用这两个方法遍历循环数组。</p><h4 id="reduce-reduceRight"><a href="#reduce-reduceRight" class="headerlink" title="reduce()/reduceRight()"></a>reduce()/reduceRight()</h4><p>语法:arr.reduce(callback,[initialValue])</p><p>callback （执行数组中每个值的函数，包含四个参数）</p><ul><li>previousValue 必选。上一次调用回调返回的值，或者是提供的初始值（initialValue）</li><li>currentValue 必选。数组中当前被处理的元素</li><li>index 可选。当前元素在数组中的索引。</li><li>arr    可选。当前元素所属的数组对象。</li></ul><p>initialValue （作为第一次调用 callback 的第一个参数。）</p><p>将数组元素做“叠加”处理， <strong>返回一个值。</strong> reduce方向从左向右，reduceRight方向从右向左</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4];</span><br><span class="line">var sum = arr.reduce(function(prev, cur, index, arr) &#123;</span><br><span class="line">    console.log(prev, cur, index);</span><br><span class="line">    return prev + cur;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(arr, sum);</span><br><span class="line">/*-----打印结果---*/</span><br><span class="line">1 2 1</span><br><span class="line">3 3 2</span><br><span class="line">6 4 3</span><br><span class="line">[1, 2, 3, 4] 10</span><br></pre></td></tr></table></figure><p>index是从1开始的，第一次的prev的值是数组的第一个值。数组长度是4，<strong>但是reduce函数循环3次。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var  arr = [1, 2, 3, 4];</span><br><span class="line">var sum = arr.reduce(function(prev, cur, index, arr) &#123;</span><br><span class="line">    console.log(prev, cur, index);</span><br><span class="line">    return prev + cur;</span><br><span class="line">&#125;，0) //注意这里设置了初始值</span><br><span class="line">console.log(arr, sum);</span><br><span class="line">/*----打印结果----*/</span><br><span class="line">0 1 0</span><br><span class="line">1 2 1</span><br><span class="line">3 3 2</span><br><span class="line">6 4 3</span><br><span class="line">[1, 2, 3, 4] 10</span><br></pre></td></tr></table></figure><p>这个例子index是从0开始的，第一次的prev的值是我们设置的初始值0，数组长度是4，reduce函数循环4次。</p><p><strong>如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始</strong></p><p>对空数组来说，不设置初始值会报错，设置了初始值不会报错，所以一般来说我们提供初始值通常更安全。</p><p>使用场景也很多，具体可以看 <a href="https://www.jianshu.com/p/e375ba1cfc47" target="_blank" rel="noopener">参考文档</a></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>Object.keys() 返回一个由一个给定对象的自身可枚举<strong>属性组成的数组</strong></li><li>Object.getOwnPropertyNames() 返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属性).</li><li>for in 循环遍历对象自身的和继承的可枚举属性(不含Symbol属性).</li><li>for of 主要来遍历可迭代的对象（包括Array, Map, Set, arguments等），它主要用来获取对象的<strong>属性值</strong>，而for..in主要获取对象的属性名。</li></ul><p>总结:</p><p><img src="\img\js\图1.png" alt="总结"></p><ol><li>for in遍历数组的下标类型不一样 ：for in为String，for为Number</li><li>for in不适合遍历数组</li><li>对不存在项的处理：for in不存在的项不被枚举出来；for全部枚举出</li><li>遍历对象可通过hasOwnProperty()过滤掉原型里面的属性</li><li>for of输出数组中包括不存在的值在内的所有值</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;复习之余，把常用的遍历方法总结，方便使用的时候查看。&lt;/p&gt;
&lt;h3 id=&quot;数组的遍历&quot;&gt;&lt;a href=&quot;#数组的遍历&quot; class=&quot;headerlink&quot; title=&quot;数组的遍历&quot;&gt;&lt;/a&gt;数组的遍历&lt;/h3&gt;&lt;p&gt;语法中有thisValue参数的，可以接收第二个
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>keep-alive</title>
    <link href="http://yoursite.com/2019/06/29/keep-alive/"/>
    <id>http://yoursite.com/2019/06/29/keep-alive/</id>
    <published>2019-06-29T14:37:17.000Z</published>
    <updated>2019-06-29T05:28:55.993Z</updated>
    
    <content type="html"><![CDATA[<p><code>&lt;keep-alive&gt;</code>能在组件切换的过程中将状态保留在内存中，防止重复渲染DOM。</p><p>设置了keepAlive缓存的组件：</p><ol><li>第一次进入：beforeRouterEnter -&gt;created-&gt;…-&gt;activated-&gt;…-&gt;deactivated</li><li>后续进入时：beforeRouterEnter -&gt;activated-&gt;deactivated</li><li><code>activated</code>和<code>deactivated</code>仅在keepAlive缓存的组件里被激活<br>只有第一次进入该组件时，才会走created钩子，而需要缓存的组件中activated是每次都会走的钩子函数。</li></ol><p>prop:</p><ul><li>include: 字符串或正则表达式。只有匹配的组件会被缓存。</li><li>exclude: 字符串或正则表达式。任何匹配的组件都不会被缓存。</li></ul><p>在2.1.0版本Vue中</p><p>常见用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 组件</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;test-keep-alive&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        includedComponents: &quot;test-keep-alive&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;keep-alive include=&quot;test-keep-alive&quot;&gt;</span><br><span class="line">  &lt;!-- 将缓存name为test-keep-alive的组件 --&gt;</span><br><span class="line">  &lt;component&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;keep-alive include=&quot;a,b&quot;&gt;</span><br><span class="line">  &lt;!-- 将缓存name为a或者b的组件，结合动态组件使用 --&gt;</span><br><span class="line">  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用正则表达式，需使用v-bind --&gt;</span><br><span class="line">&lt;keep-alive :include=&quot;/a|b/&quot;&gt;</span><br><span class="line">  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态判断 --&gt;</span><br><span class="line">&lt;keep-alive :include=&quot;includedComponents&quot;&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;keep-alive exclude=&quot;test-keep-alive&quot;&gt;</span><br><span class="line">  &lt;!-- 将不缓存name为test-keep-alive的组件 --&gt;</span><br><span class="line">  &lt;component&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;能在组件切换的过程中将状态保留在内存中，防止重复渲染DOM。&lt;/p&gt;
&lt;p&gt;设置了keepAlive缓存的组件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一次进入：beforeRouterEnter -&amp;gt;created
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>软件超市-返回刷新问题</title>
    <link href="http://yoursite.com/2019/06/28/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82-%E8%BF%94%E5%9B%9E/"/>
    <id>http://yoursite.com/2019/06/28/软件超市-返回/</id>
    <published>2019-06-28T13:59:03.000Z</published>
    <updated>2019-06-29T05:23:23.894Z</updated>
    
    <content type="html"><![CDATA[<p>在对项目进行优化的时候，发现返回上一页的函数很多组件都会使用，于是打算把这个函数抽离出来。</p><p>在此之前需要先解决<strong>首页进入列表页面刷新，而详情页返回列表页面不刷新的问题</strong>的问题</p><h3 id="方法一：keep-alive与vue-router配合使用"><a href="#方法一：keep-alive与vue-router配合使用" class="headerlink" title="方法一：keep-alive与vue-router配合使用"></a>方法一：keep-alive与vue-router配合使用</h3><p>实现在定义了两个字段 <code>keepAlive:true</code> 标识是否使用keep-alive组件字段,<code>ifDoFresh:false</code>标识是否刷新数据字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*------router/index-----*/</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/project'</span>,</span><br><span class="line">      name:<span class="string">'项目列表'</span></span><br><span class="line">      component:resolve =&gt; require([<span class="string">"@/pages/Project/Project"</span>],resolve),</span><br><span class="line">      meta: &#123;</span><br><span class="line">        keepAlive:<span class="literal">true</span>,</span><br><span class="line">        ifDoFresh:<span class="literal">false</span>,</span><br><span class="line">        showNav: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>在根组件中根据<code>keepAlive</code> 字符判断是否使用keep-alive组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*------app.vue----*/</span><br><span class="line">&lt;div class=<span class="string">"main"</span>&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">       &lt;router-view v-if=<span class="string">"<span class="variable">$route</span>.meta.keepAlive"</span>/&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=<span class="string">"!<span class="variable">$route</span>.meta.keepAlive"</span>/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在目标列表页的beforeRouteEnter判断从哪个页面进入的，根据需求更改<code>ifDoFresh</code>变量。这里与<code>activated</code>联合用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter(to,from,next)&#123;</span><br><span class="line">        //需要刷新的页面</span><br><span class="line">        <span class="keyword">if</span> (from.name!=<span class="string">"团队详情"</span>) &#123;</span><br><span class="line">          to.meta.ifDoFresh = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        next()</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">activated</span></span>()&#123;</span><br><span class="line">       <span class="keyword">if</span> (this.<span class="variable">$route</span>.meta.ifDoFresh)&#123;</span><br><span class="line">          // 先重置</span><br><span class="line">          this.selected=0</span><br><span class="line">        this.<span class="variable">$route</span>.meta.ifDoFresh=<span class="literal">false</span></span><br><span class="line">         this.<span class="variable">$store</span>.dispatch(<span class="string">'getTeam'</span>,&#123;teamId:0&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>按逻辑来说这样就可以了，但是有个的问题出现了！！！！</p><p><img src="\img\软件超市\图3.png" alt="视图3"><br><img src="\img\软件超市\图4.png" alt="视图4"></p><p>返回只显示一个团队了！！好气啊，不断调试中发现我团队详情的团队信息居然和我列表的团队信息存储在同一个变量里！！！！所以点进详情页后，改变了team，而keep-alive缓存的是team里的数据。我是白痴吗？？？？</p><p>还有一个问题就是从列表到首页，在从首页到列表页，分页的缓存仍然存在。</p><p>解决办法：在分页器组件内提前判断（因为使用分页器组件时并没有传当前页码）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">activated</span></span>()&#123;</span><br><span class="line">  <span class="keyword">if</span> (this.<span class="variable">$route</span>.meta.ifDoFresh) &#123;</span><br><span class="line">    this.currentPage = 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="方法二：keep-alive标签内部添加"><a href="#方法二：keep-alive标签内部添加" class="headerlink" title="方法二：keep-alive标签内部添加"></a>方法二：keep-alive标签内部添加</h3><blockquote><p><a href="/2019/06/29/keep-alive">keep-alive的总结</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在对项目进行优化的时候，发现返回上一页的函数很多组件都会使用，于是打算把这个函数抽离出来。&lt;/p&gt;
&lt;p&gt;在此之前需要先解决&lt;strong&gt;首页进入列表页面刷新，而详情页返回列表页面不刷新的问题&lt;/strong&gt;的问题&lt;/p&gt;
&lt;h3 id=&quot;方法一：keep-alive与
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
      <category term="软件超市" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82/"/>
    
  </entry>
  
  <entry>
    <title>软件超市-改变v-html内容的图片样式</title>
    <link href="http://yoursite.com/2019/06/26/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82-%E9%97%AE%E9%A2%98v-if%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/06/26/软件超市-问题v-if样式/</id>
    <published>2019-06-26T11:13:48.000Z</published>
    <updated>2019-06-26T12:32:00.089Z</updated>
    
    <content type="html"><![CDATA[<p>在通过v-html把后台传过来的内容渲染到页面之后，发现后台传来的图片是限制了宽和高的。</p><p><img src="\img\软件超市\图1.png" alt="视图1"></p><p>通过查资料发现，这里解析是把v-html传来的数据作为了一个新的组件，所以在scoped下的style里面设置样式不起作用。那么根据原理，或许可以把scoped直接去掉，但是为了防止组件之间的样式污染，使用了其他办法。</p><p><strong>方法一</strong></p><p> <code>&gt;&gt;&gt;</code>(深度作用选择器) 或者 有些sass类的预处理器无法正确解析可以使用 /deep/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*----html----*/</span><br><span class="line">&lt;div class=<span class="string">"announcement_img"</span> v-html=<span class="string">"announcement.content"</span>&gt;&lt;/div&gt;</span><br><span class="line">/*----style----*/</span><br><span class="line">.announcement_img&gt;&gt;&gt;img&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">display: block;</span><br><span class="line">height: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><p>updated周期函数中，js动态配置样式。</p><p>首先需要清楚updated周期函数在什么时候起作用，①data里面需要有该数据变量如arr ②在页面重新渲染arr完成后才进入updated。更深入的会在以后学习。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">updated:function()&#123;</span><br><span class="line">console.log(&quot;1==我会先执行&quot;);</span><br><span class="line">this.$nextTick(function()&#123;</span><br><span class="line">//在下次 DOM 更新循环结束之后执行这个回调。在修改数据之后立即使用这个方法，获取更新后的DOM.</span><br><span class="line">console.log(&quot;3==我只能等页面渲染完了才会立即执行&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&quot;2==我虽然在最后但会比$nextTick先执行&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="\img\软件超市\图2.png" alt="视图2"></p><p>如果后期发现更好的或者更多的办法会重新更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在通过v-html把后台传过来的内容渲染到页面之后，发现后台传来的图片是限制了宽和高的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;\img\软件超市\图1.png&quot; alt=&quot;视图1&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过查资料发现，这里解析是把v-html传来的数据作为了一个新的组件，所以在s
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
      <category term="软件超市" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E8%B6%85%E5%B8%82/"/>
    
  </entry>
  
  <entry>
    <title>css总结</title>
    <link href="http://yoursite.com/2019/05/18/css%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/05/18/css总结/</id>
    <published>2019-05-18T14:01:07.000Z</published>
    <updated>2019-05-30T14:47:03.404Z</updated>
    
    <content type="html"><![CDATA[<p>在学习的过程中，对css有了更深一步的了解，把遇见过的问题、经常使用到的样式做一个总结。</p><h2 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h2><p><a href="http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css" target="_blank" rel="noopener">http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css</a></p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><ul><li>方法一<br>  给受影响的盒子添加clear属性，添加了clear的属性不可以添加margin-top</li><li><p>方法二</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">浮动元素::after&#123;</span><br><span class="line">  content:&quot;&quot;;</span><br><span class="line">  display:block;</span><br><span class="line">  height:0;</span><br><span class="line">  visibility:hidden;</span><br><span class="line">  clear:both</span><br><span class="line">&#125;</span><br><span class="line">浮动元素&#123;</span><br><span class="line">  *zoom:1;//兼容IE6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="盒子的问题"><a href="#盒子的问题" class="headerlink" title="盒子的问题"></a>盒子的问题</h2><ul><li>在默认布局的垂直方向上，外边距有合并现象(BFC块级，水平方向也可以，但是块级都是占一行的，而浮动成水平的 BFC的区域不会与float box重叠)</li><li>嵌套盒子时，里面的盒子设置margin-top时，父盒子一起被顶下来。<br>  解决办法：父盒子添加border，或者overflow：hidden</li></ul><h2 id="图片的问题"><a href="#图片的问题" class="headerlink" title="图片的问题"></a>图片的问题</h2><ul><li><p>自适应图片</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">max-width:100%;</span><br><span class="line">height:auto;</span><br><span class="line">display:block</span><br></pre></td></tr></table></figure></li><li><p>设置图片img的width和height的时候，指定其中一个另外一个自动算出来</p></li><li><p>当图片宽度大于父元素宽度时，居中：父元素text-align：center,子元素：margin：0，-100%</p></li></ul><h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><p><strong>浮动之后的高宽不设定则有内容撑开</strong></p><ol><li><p>居中元素有宽度</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   .center &#123;</span><br><span class="line">width: 960px;</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>margin:0 auto 使用场景<br>块级元素：给定要居中的块级元素的宽度<br>行内元素：<br> <br><br>①设置display:block。<br> <br><br>②给定要居中的行内元素的宽度。（行内元素设置成块级元素后可以对其宽高进行设置）<br> <br></p><p> <strong>所有元素也可以通过对父元素设置 text-align：center；的方式来实现居中。(而对于块元素来说，对要居中的元素自身进行设置text-align:center也能实现居中——而无需对其父元素进行设置) 。</strong></p><p>  <strong>浮动、绝对定位、固定定位的盒子失效。</strong></p></li></ol><ol start="3"><li>脱离文档流元素的水平垂直<br> margin:auto或者按圆点定位定在正中间，margin设置成负的宽高的一般</li></ol><p>   法二：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line">      position: relative;</span><br><span class="line">      border: 1px solid #465468;</span><br><span class="line"> &#125;</span><br><span class="line"> img&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      margin: auto;</span><br><span class="line">      top: 0;</span><br><span class="line">      left: 0;</span><br><span class="line">      right: 0;</span><br><span class="line">      bottom: 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>指定宽高元素水平居中</p><p>还可以定位到50% 50% 改变margin-left/margin-top为元素的一半定位（元素加padding，可以结合box-sizing）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#test&#123;</span><br><span class="line">position:absolute;</span><br><span class="line">left:0;</span><br><span class="line">right:0;</span><br><span class="line">bottom:0;</span><br><span class="line">top:0</span><br><span class="line">margin:auto;</span><br><span class="line">width:100px</span><br><span class="line">height:100px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图片的垂直居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//img的外部包含元素 如div</span><br><span class="line">div&#123;</span><br><span class="line">  text-align:center;</span><br><span class="line">&#125;</span><br><span class="line"> div:after&#123;</span><br><span class="line"> content:&quot;&quot;;</span><br><span class="line"> display:inline-block;</span><br><span class="line"> height:100%</span><br><span class="line"> vertical-align:middle;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line"> vertical-align:middle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h2><ol><li>超出省略号</li></ol><p>盒子不可以仅由内容撑开的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">white-space:nowrap //不换行</span><br><span class="line">overflow：hidden//超出部分截掉</span><br><span class="line">text-overflow:ellipsis //省略号</span><br></pre></td></tr></table></figure><ol start="2"><li>禁止滚动条</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">html,body&#123;</span><br><span class="line">height:100%</span><br><span class="line">overflow:hidden</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习的过程中，对css有了更深一步的了解，把遇见过的问题、经常使用到的样式做一个总结。&lt;/p&gt;
&lt;h2 id=&quot;清除默认样式&quot;&gt;&lt;a href=&quot;#清除默认样式&quot; class=&quot;headerlink&quot; title=&quot;清除默认样式&quot;&gt;&lt;/a&gt;清除默认样式&lt;/h2&gt;&lt;p&gt;&lt;a
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>markdown学习笔记</title>
    <link href="http://yoursite.com/2019/05/15/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/15/markdown学习笔记/</id>
    <published>2019-05-15T14:19:13.000Z</published>
    <updated>2019-06-11T14:26:17.179Z</updated>
    
    <content type="html"><![CDATA[<p>写博客的时候有些不常用的语法会有遗漏，今天重新学习markdown常用语法并把记录下来。</p><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>   兼容HTML。不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。<br>   <span id="jump">用于瞄点测试</span></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>方法一：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 第一级标题 `&lt;h1&gt;`</span><br><span class="line">## 第二级标题 `&lt;h2&gt;`</span><br><span class="line">### 第三级标题 `&lt;h3&gt;`</span><br><span class="line">#### 第二四级标题 `&lt;h4&gt;`</span><br><span class="line">##### 第五级标题 `&lt;h5&gt;`</span><br><span class="line">###### 第六级标题 `&lt;h6&gt;`</span><br></pre></td></tr></table></figure></code></pre><p>方法二：</p><p>任何数量的 = 和 - 都可以有效果。</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">=</span><br><span class="line">二级标题</span><br><span class="line">-</span><br></pre></td></tr></table></figure></code></pre><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p><strong>如果* 和 _ 两边都有空白的话，它们就只会被当成普通的符号</strong><br>如果要在文字前后直接插入普通的星号或底线，可以用反斜线。</p><p>斜体 <code>*内容*</code>或者<code>_内容_</code>   （em）<br>加粗 <code>**内容**</code>或者<code>__内容__</code>   （strong）<br>倾斜加粗 <code>***内容***</code><br>删除线 <code>~~内容~~</code></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>行内式</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[我的博客](https://biubiuins.github.io/)</span><br><span class="line">自动生成连接  &lt;https://biubiuins.github.io/&gt;</span><br></pre></td></tr></table></figure></code></pre><p>效果：<br><a href="https://biubiuins.github.io/" target="_blank" rel="noopener">我的博客</a><br>自动生成连接  <a href="https://biubiuins.github.io/" target="_blank" rel="noopener">https://biubiuins.github.io/</a></p><p>添加图片形式和链接类似。</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：![图片描述](url)</span><br><span class="line">![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)</span><br></pre></td></tr></table></figure></code></pre><p>效果：</p><p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><ol><li>只要简单地缩进 4 个空格或是 1 个制表符就可以。 <strong>需要和普通段落之间存在空行！</strong></li><li>`内容`</li><li>多行代码块与语法高亮：在需要高亮的代码块的前一行及后一行使用三个单反引号`包裹，就可以了。</li><li>代码块中包含html代码。在代码区块里面， &amp; 、&lt; 和 > 会自动转成 HTML 实体</li></ol><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ol><li>在被引用的文本前加上&gt;符号，以及一个空格就可以了，如果只输入了一个&gt;符号会产生一个空白的引用。</li><li>引用可以嵌套</li><li>引用的区块内也可以使用其他的Markdown 语法</li></ol><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong>符号后面一定要有一个空格，起到缩进的作用。</strong><br>还需要注意的是在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\就可以了。</p><ol><li>无序列表<br>使用 *，+，- 表示无序列表。</li><li>有序列表<br>使用数字和一个英文句点表示有序列表。</li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">姓名|分数</span><br><span class="line">-|-</span><br><span class="line">张三|50</span><br><span class="line">李四|80</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>张三</td><td>50</td></tr><tr><td>李四</td><td>80</td></tr></tbody></table><p>表格对齐方式：我们可以指定表格单元格的对齐方式，冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">姓名|分数</span><br><span class="line">:-|-:</span><br><span class="line">张三|50</span><br><span class="line">李四|80</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th style="text-align:left">姓名</th><th style="text-align:right">分数</th></tr></thead><tbody><tr><td style="text-align:left">张三</td><td style="text-align:right">50</td></tr><tr><td style="text-align:left">李四</td><td style="text-align:right">80</td></tr></tbody></table><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure><h2 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h2><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>方法1: 连续两个以上空格+回车<br>方法2：使用html语言换行标签</p><h3 id="其他特殊字符"><a href="#其他特殊字符" class="headerlink" title="其他特殊字符"></a>其他特殊字符</h3><p><a href="https://unicode-table.com/cn/" target="_blank" rel="noopener">unicode字符编码</a></p><h3 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构，需要独占一行才能生效。</p><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><p>Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span>我是华文彩云<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span>color=gray<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0099ff</span> <span class="attr">size</span>=<span class="string">5</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span>color=#0099ff size=5 face="黑体"<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><p>背景色需要借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色的功能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">pink</span>&gt;</span>背景色是：pink<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><table><tr><td bgcolor="pink">背景色是：pink</td></tr></table><h3 id="瞄点"><a href="#瞄点" class="headerlink" title="瞄点"></a>瞄点</h3><p>自定义瞄点</p><p>标签形式的锚点目标的id特性值中是不能含有中文字符；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//建立一个跳转链接</span><br><span class="line">[说明文字](#jump)</span><br><span class="line">//需要跳转到的位置</span><br><span class="line">&lt;span id = &quot;jump&quot;&gt;跳转到的位置&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>效果：<a href="#jump">瞄点</a></p><p>Markdown会自动给每一个h1~h6标题生成一个锚，其id就是标题内容。如<a href="#表格">表格</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写博客的时候有些不常用的语法会有遗漏，今天重新学习markdown常用语法并把记录下来。&lt;/p&gt;
&lt;h2 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h2&gt;&lt;p&gt;   兼容HTML。不在 Markd
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>less学习笔记</title>
    <link href="http://yoursite.com/2019/05/13/less%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/13/less学习笔记/</id>
    <published>2019-05-13T14:21:01.000Z</published>
    <updated>2019-05-15T13:48:17.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="less"><a href="#less" class="headerlink" title="less"></a>less</h1><blockquote><p>参考文章:<a href="https://segmentfault.com/a/1190000012360995" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012360995</a></p></blockquote><p> less属于css的一种预处理器（处理在浏览器运行前）,作为css的扩展，是一种动态样式语言。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p> //开头的注释，不会被编译到css文件中，以/<em> </em>/注释的内容会被编译到css文件</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p> 以<code>@</code>开头定义变量，使用是直接 @定义的名称<br> 变量名必须使用大括号包裹<br> 声明变量（类比于写好的css引用）类似于混合方法  结构: @name: { 属性: 值 ;};  使用：@name();</p><p> 使用@来申明一个变量: @pink:pink //不要添加引号</p><ol><li>作为普通属性值只是来使用：直接使用@pink</li><li>作为选择器和属性名: @{selector的值}的形式（不常用）</li><li>作为URL：@{url} （@images:’../img’ 注意要加引号）</li><li><p>变量的延迟加载（一个块级域解析完再加载变量）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">@color: #999;</span><br><span class="line">@bgColor: skyblue;//不要添加引号</span><br><span class="line">@width: 50%;</span><br><span class="line">#wrap &#123;</span><br><span class="line">  color: @color;</span><br><span class="line">  width: @width;</span><br><span class="line">&#125;</span><br><span class="line">/* 选择器变量 */</span><br><span class="line">  @mySelector: #wrap;</span><br><span class="line">   @Wrap: wrap;</span><br><span class="line">   @&#123;mySelector&#125;&#123; //变量名 必须使用大括号包裹</span><br><span class="line">     color: #999;</span><br><span class="line">     width: 50%;</span><br><span class="line">   &#125;</span><br><span class="line">   .@&#123;Wrap&#125;&#123;</span><br><span class="line">     color:#ccc;</span><br><span class="line">   &#125;</span><br><span class="line">   #@&#123;Wrap&#125;&#123;</span><br><span class="line">     color:#666;</span><br><span class="line">   &#125;</span><br><span class="line"> /* url 变量*/</span><br><span class="line">  @images: &quot;../img&quot;;//需要加引号</span><br><span class="line">       body &#123;</span><br><span class="line">         background: url(&quot;@&#123;images&#125;/dog.png&quot;);//变量名 必须使用大括号包裹</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">/* 声明变量 */</span><br><span class="line">      @background: &#123;background:red;&#125;;</span><br><span class="line">      #main&#123;</span><br><span class="line">          @background();</span><br><span class="line">      &#125;</span><br><span class="line">      @Rules:&#123;</span><br><span class="line">          width: 200px;</span><br><span class="line">          height: 200px;</span><br><span class="line">          border: solid 1px red;</span><br><span class="line">      &#125;;</span><br><span class="line">      #con&#123;</span><br><span class="line">        @Rules();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /* 生成的 CSS */</span><br><span class="line">      #main&#123;</span><br><span class="line">        background:red;</span><br><span class="line">      &#125;</span><br><span class="line">      #con&#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        border: solid 1px red;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="变量的运算"><a href="#变量的运算" class="headerlink" title="变量的运算"></a>变量的运算</h3><p>注意点：</p></li><li>加减法时，以第一个数据的单位为基准</li><li><p>乘除法时，注意单位一定要统一</p><h2 id="less嵌套规则"><a href="#less嵌套规则" class="headerlink" title="less嵌套规则"></a>less嵌套规则</h2><p>和html结构相似，层层嵌套<br><code>&amp;</code>代表的上一层选择器的名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">#header&#123;</span><br><span class="line">  &amp;:after&#123;</span><br><span class="line">    content:&quot;Less is more!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  .title&#123;</span><br><span class="line">    font-weight:bold;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;_content&#123;//理解方式：直接把 &amp; 替换成 #header</span><br><span class="line">    margin:20px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/* 生成的 CSS */</span><br><span class="line">#header::after&#123;</span><br><span class="line">  content:&quot;Less is more!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">#header .title&#123; //嵌套了</span><br><span class="line">  font-weight:bold;</span><br><span class="line">&#125;</span><br><span class="line">#header_content&#123;//没有嵌套！</span><br><span class="line">    margin:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="less中的混合"><a href="#less中的混合" class="headerlink" title="less中的混合"></a>less中的混合</h2><p> 混合：将一系列的规则集引入另一个规则集中<br> 普通混合(编译到原生css中)<br> 不带输出的混合(加括号)<br> 混合使用<code>.</code>或 <code>#</code>的形式来定义；声明变量使用的是<code>@</code>来定义，@变量名（）来使用</p><h3 id="普通混合"><a href="#普通混合" class="headerlink" title="普通混合"></a>普通混合</h3><p> 最好写成后面带（）的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">    .card &#123; // 等价于 .card()</span><br><span class="line">        background: #f6f6f6;</span><br><span class="line">        -webkit-box-shadow: 0 1px 2px rgba(151, 151, 151, .58);</span><br><span class="line">        box-shadow: 0 1px 2px rgba(151, 151, 151, .58);</span><br><span class="line">    &#125;</span><br><span class="line">    #wrap&#123;</span><br><span class="line">      .card;//等价于.card();</span><br><span class="line">    &#125;</span><br><span class="line">    //其中 .card 与 .card() 是等价的。</span><br></pre></td></tr></table></figure><h3 id="带参数的混合"><a href="#带参数的混合" class="headerlink" title="带参数的混合"></a>带参数的混合</h3><p>注意点：</p><ol><li>Less 可以使用默认参数，如果 没有传参数，那么将使用默认参数。冒号后面的是默认值<br><code>2. @arguments</code>代表全部参数，实参列表</li><li><p>传的参数中必须带单位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">     .border(@a:10px,@b:50px,@c:30px,@color:#000)&#123;</span><br><span class="line">         border:solid 1px @color;</span><br><span class="line">         box-shadow: @arguments;//指代的是 全部参数</span><br><span class="line">     &#125;</span><br><span class="line">     #main&#123;</span><br><span class="line">         .border(0px,5px,30px,red);//必须带着单位</span><br><span class="line">     &#125;</span><br><span class="line">     #wrap&#123;</span><br><span class="line">         .border(0px);</span><br><span class="line">     &#125;</span><br><span class="line">     /*  命名参数 */</span><br><span class="line">     #wrap&#123;</span><br><span class="line">       .border(@color:black);</span><br><span class="line">         &#125;</span><br><span class="line">     #content&#123;</span><br><span class="line">       .border;//等价于 .border()</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     /* 生成的 CSS */</span><br><span class="line">     #main&#123;</span><br><span class="line">         border:solid 1px red;</span><br><span class="line">         box-shadow:0px,5px,30px,red;</span><br><span class="line">     &#125;</span><br><span class="line">     #wrap&#123;</span><br><span class="line">         border:solid 1px #000;</span><br><span class="line">         box-shadow: 0px 50px 30px #000;</span><br><span class="line">     &#125;</span><br><span class="line">     #content&#123;</span><br><span class="line">         border:solid 1px #000;</span><br><span class="line">         box-shadow: 10px 50px 30px #000;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><p>注意点：</p><ol><li><p>第一个参数 <code>left</code> 要会找到方法中匹配程度最高的，如果匹配程度相同，将全部选择，并存在着样式覆盖替换。</p></li><li><p>如果匹配的参数 是变量， <code>@_</code>表示的会被调用任意标志的 。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">      .triangle(top,@width:20px,@color:#000)&#123;</span><br><span class="line">          border-color:transparent  transparent @color transparent ;</span><br><span class="line">      &#125;</span><br><span class="line">      .triangle(right,@width:20px,@color:#000)&#123;</span><br><span class="line">          border-color:transparent @color transparent  transparent ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .triangle(bottom,@width:20px,@color:#000)&#123;</span><br><span class="line">          border-color:@color transparent  transparent  transparent ;</span><br><span class="line">      &#125;</span><br><span class="line">      .triangle(left,@width:20px,@color:#000)&#123;</span><br><span class="line">          border-color:transparent  transparent  transparent @color;</span><br><span class="line">      &#125;</span><br><span class="line">      .triangle(@_,@width:20px,@color:#000)&#123;</span><br><span class="line">          border-style: solid;</span><br><span class="line">          border-width: @width;</span><br><span class="line">      &#125;</span><br><span class="line">      #main&#123;</span><br><span class="line">          .triangle(left, 50px, #999)</span><br><span class="line">      &#125;</span><br><span class="line">      /* 生成的 CSS */</span><br><span class="line">      #main&#123;</span><br><span class="line">        border-color:transparent  transparent  transparent #999;</span><br><span class="line">        border-style: solid;</span><br><span class="line">        border-width: 50px;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="方法的命名规范"><a href="#方法的命名规范" class="headerlink" title="方法的命名规范"></a>方法的命名规范</h2><p>注意点：</p><ul><li>在 CSS 中<code>&gt;</code> 选择器，选择的是 儿子元素，就是 必须与父元素 有直接血源的元素。</li><li>在引入命令空间时，如使用 <code>&gt;</code> 选择器，父元素不能加 括号。</li><li>不得单独使用命名空间的方法 必须先引入命名空间，才能使用 其中方法。</li><li><p>子方法 可以使用上一层传进来的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">#card()&#123;</span><br><span class="line">    background: #723232;</span><br><span class="line">    .d(@w:300px)&#123;</span><br><span class="line">        width: @w;</span><br><span class="line"></span><br><span class="line">        #a(@h:300px)&#123;</span><br><span class="line">            height: @h;//可以使用上一层传进来的方法</span><br><span class="line">            width: @w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#wrap&#123;</span><br><span class="line">    #card &gt; .d &gt; #a(100px); // 父元素不能加 括号</span><br><span class="line">&#125;</span><br><span class="line">#main&#123;</span><br><span class="line">    #card .d();</span><br><span class="line">&#125;</span><br><span class="line">#con&#123;</span><br><span class="line">    //不得单独使用命名空间的方法</span><br><span class="line">    //.d() 如果前面没有引入命名空间 #card ，将会报错</span><br><span class="line"></span><br><span class="line">    #card; // 等价于 #card();</span><br><span class="line">    .d(20px); //必须先引入 #card</span><br><span class="line">&#125;</span><br><span class="line">/* 生成的 CSS */</span><br><span class="line">#wrap&#123;</span><br><span class="line">  height:100px;</span><br><span class="line">  width:300px;</span><br><span class="line">&#125;</span><br><span class="line">#main&#123;</span><br><span class="line">  width:300px;</span><br><span class="line">&#125;</span><br><span class="line">#con&#123;</span><br><span class="line">  width:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="less的继承"><a href="#less的继承" class="headerlink" title="less的继承"></a>less的继承</h2><p>extend 是 Less 的一个伪类。它可继承 所匹配声明中的全部样式。<br>extend（这里放规则）是一个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">//规则的定义，没有参数</span><br><span class="line">.animation&#123;</span><br><span class="line">    transition: all .3s ease-out;</span><br><span class="line">    .hide&#123;</span><br><span class="line">      transform:scale(0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#main&#123;</span><br><span class="line">    &amp;:extend(.animation);</span><br><span class="line">&#125;</span><br><span class="line">#con&#123;</span><br><span class="line">    &amp;:extend(.animation .hide);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 生成后的 CSS */</span><br><span class="line">.animation,#main&#123;</span><br><span class="line">  transition: all .3s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">.animation .hide , #con&#123;</span><br><span class="line">    transform:scale(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="all全局搜索替换"><a href="#all全局搜索替换" class="headerlink" title="all全局搜索替换"></a>all全局搜索替换</h3><p>使用选择器匹配到的 全部声明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* Less */</span><br><span class="line">#main&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">#main &#123;</span><br><span class="line">  &amp;:after &#123;</span><br><span class="line">    content:&quot;Less is good!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#wrap:extend(#main all) &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* 生成的 CSS */</span><br><span class="line">#main,#wrap&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">#main:after, #wrap:after &#123;</span><br><span class="line">    content: &quot;Less is good!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>从表面 看来，extend 与 方法 最大的差别，就是 extend 是同个选择器共用同一个声明，而 方法 是使用自己的声明。</p></li><li><p>~”XXXXX” less之中避免编译，让浏览器编译</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;less&quot;&gt;&lt;a href=&quot;#less&quot; class=&quot;headerlink&quot; title=&quot;less&quot;&gt;&lt;/a&gt;less&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;参考文章:&lt;a href=&quot;https://segmentfault.com/a/11900000
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>element-ui总结</title>
    <link href="http://yoursite.com/2019/04/19/element-ui%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/19/element-ui总结/</id>
    <published>2019-04-19T07:37:38.000Z</published>
    <updated>2019-05-13T14:26:14.717Z</updated>
    
    <content type="html"><![CDATA[<p>在一次项目中用到了element-ui框架，对在使用过程中遇见的问题进行总结（持续更新）。</p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="1-数据为二级对象时"><a href="#1-数据为二级对象时" class="headerlink" title="1.数据为二级对象时"></a>1.数据为二级对象时</h3><p>数据为二级对象时，验证的数据要用字符串形式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rules:&#123;</span><br><span class="line">   <span class="string">"captainInformation.name"</span>: [</span><br><span class="line">     &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入姓名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;,</span><br><span class="line">     ],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-动态添加的数据"><a href="#2-动态添加的数据" class="headerlink" title="2.动态添加的数据"></a>2.动态添加的数据</h3><p>动态添加的输入框或表单绑定数据时注意 <code>:prop=&quot;&#39;v-for绑定的数组.&#39; + index + &#39;.v-model绑定的变量&#39;&quot;</code><br>   我是直接把验证写在标签里面的</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;姓名&quot; :prop=&quot;&apos;memberInformation.&apos;+index+&apos;.name&apos;&quot; :rules=&quot;[ &#123; required: true, message: &apos;请输入姓名&apos;, trigger: &apos;blur&apos; &#125;]&quot;&gt;</span><br></pre></td></tr></table></figure><p>   增加与减少成员<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//增加成员</span><br><span class="line"> addmember() &#123;</span><br><span class="line">   let newmember = &#123;</span><br><span class="line">         name: &quot;&quot;,</span><br><span class="line">         studentId: &quot;&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">        this.form.memberInformation.push(newmember)</span><br><span class="line">      &#125;,</span><br><span class="line">      //减少成员</span><br><span class="line">      reducemember(index) &#123;</span><br><span class="line">        this.form.memberInformation.splice(index, 1)</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></p><blockquote><p>这个是我在项目中用到的办法，在阅读时发现了另一种情况的解决办法：<a href="https://blog.csdn.net/weixin_41041379/article/details/81908788" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41041379/article/details/81908788</a></p></blockquote><h3 id="3-普通输入验证"><a href="#3-普通输入验证" class="headerlink" title="3.普通输入验证"></a>3.普通输入验证</h3><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rules:&#123;</span><br><span class="line">data1:[</span><br><span class="line"><span class="comment">//必填，trigger是触发类型</span></span><br><span class="line">&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入学号'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;,</span><br><span class="line"><span class="comment">//数字类型 'number', 整数: 'integer', 浮点数: 'float'</span></span><br><span class="line"><span class="comment">//使用整数的时候，首先要保证数据类型为数字，可以v-model.number绑定数据</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">'integer'</span>, <span class="attr">message</span>: <span class="string">'格式错误'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;,</span><br><span class="line"><span class="comment">//长度限制</span></span><br><span class="line">&#123; <span class="attr">min</span>: <span class="number">2</span>, <span class="attr">max</span>: <span class="number">4</span>, <span class="attr">message</span>: <span class="string">'长度在 2 到 4 个字符'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="4-手动验证"><a href="#4-手动验证" class="headerlink" title="4.手动验证"></a>4.手动验证</h3><p>   第一种是直接写在rules的里面<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rules:&#123;</span><br><span class="line">data1:[</span><br><span class="line">     &#123; validator:(rule,value,callback)=&gt;&#123;</span><br><span class="line">                if(/^\d+$/.test(value) == false)&#123;</span><br><span class="line">                  callback(new Error(&quot;只能输入数字&quot;));</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                  callback();</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>   第二种写法是抽离出来</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//注意书写位置</span><br><span class="line"> data()&#123;</span><br><span class="line">  let checkAge = (rule, value, callback) =&gt; &#123;</span><br><span class="line">     if (!value) &#123;</span><br><span class="line">       return callback(new Error(&apos;年龄不能为空&apos;));</span><br><span class="line">     &#125;</span><br><span class="line">      if (!Number.isInteger(value)) &#123;</span><br><span class="line">         callback(new Error(&apos;请输入数字值&apos;));</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">         if (value &lt; 18) &#123;</span><br><span class="line">           callback(new Error(&apos;必须年满18岁&apos;));</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">           callback();</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> return &#123;</span><br><span class="line"> rules:&#123;</span><br><span class="line">     age: [</span><br><span class="line">    &#123; trigger: &apos;blur&apos;, validator: checkAge &#125;</span><br><span class="line">           ]</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="5-手动上传文件"><a href="#5-手动上传文件" class="headerlink" title="5.手动上传文件"></a>5.手动上传文件</h3><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line">     <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">          <span class="attr">action</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ref</span>=<span class="string">"upload"</span></span></span><br><span class="line"><span class="tag">          //覆盖默认的上传行为，自定义上传的实现</span></span><br><span class="line"><span class="tag">          <span class="attr">:http-request</span>=<span class="string">"finish"</span></span></span><br><span class="line"><span class="tag">          //取消自动上传</span></span><br><span class="line"><span class="tag">          <span class="attr">:auto-upload</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">slot</span>=<span class="string">"trigger"</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>选取文件<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"tip"</span> <span class="attr">class</span>=<span class="string">"el-upload__tip"</span>&gt;</span>请上传您的项目功能清单<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">//js</span><br><span class="line"> finish() &#123;</span><br><span class="line">  this.$refs.form.validate(valid =&gt; &#123;</span><br><span class="line">         // 验证成功</span><br><span class="line">         if (valid) &#123;</span><br><span class="line">         //这里的需求是必须上传文件</span><br><span class="line">           const file = this.$refs.upload.uploadFiles[0];</span><br><span class="line">           if (!file) &#123;</span><br><span class="line">                     this.$message(&#123;</span><br><span class="line">                       type: "warning",</span><br><span class="line">                       message: "请选择文件"</span><br><span class="line">                     &#125;);</span><br><span class="line">                     return;</span><br><span class="line">                   &#125;</span><br><span class="line">           //数据处理</span><br><span class="line">           let formData = new FormData();</span><br><span class="line">           formData.append("projectId", this.runId);</span><br><span class="line">           formData.append("timeNode",JSON.stringify(this.form.timeNode));</span><br><span class="line">           formData.append("teamId", 1);</span><br><span class="line">           formData.append("functionFile",file.raw );</span><br><span class="line">           //....中间的弹框确定等省略</span><br><span class="line">           submitApply(formData)</span><br><span class="line">         &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="6-动态获取选项-模糊查询"><a href="#6-动态获取选项-模糊查询" class="headerlink" title="6.动态获取选项+模糊查询"></a>6.动态获取选项+模糊查询</h3><p><img src="/img/element-ui/element-ui.png" alt="演示图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在一次项目中用到了element-ui框架，对在使用过程中遇见的问题进行总结（持续更新）。&lt;/p&gt;
&lt;h2 id=&quot;表单&quot;&gt;&lt;a href=&quot;#表单&quot; class=&quot;headerlink&quot; title=&quot;表单&quot;&gt;&lt;/a&gt;表单&lt;/h2&gt;&lt;h3 id=&quot;1-数据为二级对象时&quot;&gt;
      
    
    </summary>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="库" scheme="http://yoursite.com/tags/%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>js页面属性</title>
    <link href="http://yoursite.com/2018/12/18/js%E9%A1%B5%E9%9D%A2%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2018/12/18/js页面属性/</id>
    <published>2018-12-18T14:03:56.000Z</published>
    <updated>2018-12-18T14:09:59.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="页面属性"><a href="#页面属性" class="headerlink" title="页面属性"></a>页面属性</h2><ul><li><p>offsetWidth /offsetHeight</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//js对元素操作，只能获取不可以改变</span><br><span class="line">//获取对象自身的宽度和高度 ，包括内容、边框和内边距，即：offsetWidth = width +     border + padding</span><br><span class="line">box.offsetWidth</span><br><span class="line">//注意：和 div.style.width 的区别，其只能获取到行内的数值</span><br><span class="line">div.style.width</span><br></pre></td></tr></table></figure></li><li><p>offsetLeft 和 offsetTop</p></li></ul><p>距离第一个有定位的父级盒子左边和上边的距离，<br><strong>注意：父级盒子必须要有定位，如果没有，则最终以body为准！</strong><br>offsetLeft和offsetTop从从父标签的padding开始计算，不包括border。即：从子盒子边框到定位父盒子边框的距离。</p><ul><li>offsetParent</li></ul><p>返回当前对象的父级（带有定位）盒子，若爷爷也有则选择进近的</p><ul><li>clientWidth/clientHeight</li></ul><p>网页可见区域宽和高</p><ul><li>clientLeft，clientTop</li></ul><p>返回的是元素边框的borderWidth，<br>如果不指定一个边框或者不定位改元素，其值就为0</p><ul><li>document.body.scrollWidth;</li><li>document.body.scrollHeight;</li></ul><p>网页正文全文宽<br>网页正文全文高</p><ul><li>document.body.scrollTop;</li></ul><p>网页被卷去的高</p><ul><li>document.body.scrollLeft;</li></ul><p>网页被卷去的左</p><p><strong>区别</strong></p><ul><li><p>left和top分析：</p><ul><li>clientLeft: 左边边框的宽度；clientTop: 上边边框的宽度</li><li>offsetLeft: 当前元素距离有定位的父盒子左边的距离；offsetTop: 当前元素距离有定位的父盒子上边的距离</li><li>scrollLeft: 左边滚动的长度; scrollTop: 上边滚动的长度;</li></ul></li><li><p>width和height分析</p><ul><li>clientWidth\/Height: 内容 + 内边距</li><li>offsetWidth\/Height: 内容 + 内边距 + 边框</li><li>scrollWidth\/Height: 滚动内容的宽度和高度</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;页面属性&quot;&gt;&lt;a href=&quot;#页面属性&quot; class=&quot;headerlink&quot; title=&quot;页面属性&quot;&gt;&lt;/a&gt;页面属性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;offsetWidth /offsetHeight&lt;/p&gt;
  &lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vuex流程总结</title>
    <link href="http://yoursite.com/2018/12/09/vuex%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/12/09/vuex流程总结/</id>
    <published>2018-12-09T14:04:49.000Z</published>
    <updated>2019-01-28T11:26:14.393Z</updated>
    
    <content type="html"><![CDATA[<p>对如何异步显示数据效果的编码流程进行了总结</p><ol><li><p>ajax<br>ajax请求函数，抛出接口</p></li><li><p>vuex</p><ul><li><p>store里面新建index完成基本配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">vuex最核心的管理对象store</span><br><span class="line">组装模块并导出 store 的地方</span><br><span class="line"> */</span><br><span class="line">// 首先引入Vue及Vuex</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">// 引入四个基本模块</span><br><span class="line">import state from &apos;./state&apos;</span><br><span class="line">import mutations from &apos;./mutations&apos;</span><br><span class="line">import actions from &apos;./actions&apos;</span><br><span class="line">import getters from &apos;./getters&apos;</span><br><span class="line"></span><br><span class="line">// 一定要声明使用插件</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>现在Vue对象里面挂载store</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import store from &apos;./store&apos;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    components: &#123; App &#125;,</span><br><span class="line">    template: &apos;&lt;App/&gt;&apos;,</span><br><span class="line">    store //所有的组件都多了一个$store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在store下新建state.js<br>  state：用于存储状态对象</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">user:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在store下新建mutation-types.js<br>  mutation是操作state状态的，mutation-types是存放操作state的方法名</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const RECEIVE_USER_INFO = &apos;receive_user_info&apos; // 接收用户信息</span><br></pre></td></tr></table></figure></li><li><p>在store下新建actions.js<br>  action是通过操作mutation间接更新state的多个方法的对象<br>  起连接作用。<br>  异步获取数据。(注意需要引入api接口函数)把数据传给mutation。(因为mutation的方法名是放在mutation-types里面，所以注意要引入mutation-types里面对应的方法名)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">reqUserInfo,</span><br><span class="line">&#125; from &apos;../api&apos;</span><br><span class="line">import &#123;</span><br><span class="line">  RECEIVE_USER_INFO,</span><br><span class="line">&#125; from &apos;./mutation-types&apos;</span><br><span class="line"></span><br><span class="line"> // 异步获取用户信息</span><br><span class="line"> async getUserInfo (&#123;commit&#125;) &#123;</span><br><span class="line">  const result = await reqUserInfo()</span><br><span class="line">  //如果请求成功，返回code=0</span><br><span class="line">  if (result.code === 0) &#123;</span><br><span class="line">   const userInfo = result.data</span><br><span class="line">   //提交mutation</span><br><span class="line">   //把结果&#123;userInfo&#125;提交给RECEIVE_USER_INFO方法</span><br><span class="line">   commit(RECEIVE_USER_INFO, &#123;userInfo&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>  参数除了commit以外，还可以有state<code>{commit,state}</code></p></li><li><p>在store里面新建mutations.js<br>  mutations直接对state进行操作，<code>[方法名](state,{param}){}</code> 默认第一个参数state，所以需要引入vue与方法名</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import &#123;</span><br><span class="line">  RECEIVE_USER_INFO,</span><br><span class="line">  &#125; from &apos;./mutation-types&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  [RECEIVE_USER_INFO] (state, &#123;userInfo&#125;) &#123;</span><br><span class="line">    state.userInfo = userInfo</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用数据</p></li></ol><p>一般放在<code>computed</code>中进行接收，有利于state的值发生改变的时候及时响应给子组件。</p><ul><li>mapState辅助函数<pre><code>mapState返回的是一个对象其实就是返回值:{return this.$store.XXXX}</code></pre></li></ul><pre><code>   当一个组件需要获取多个状态时候，用mapState辅助函数更为方便   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapState &#125; from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">computed:mapState(&#123;</span><br><span class="line">//方法一：箭头函数</span><br><span class="line">count: state =&gt; state.count;</span><br><span class="line">//方法二：传字符串参数&apos;count&apos;等同于‘state=&gt;state.count’</span><br><span class="line">count:&apos;count&apos;;</span><br><span class="line">//方法三，使用this获取局部状态，必须使用常规函数</span><br><span class="line">count(state)&#123;</span><br><span class="line"> return this.count</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">computed:mapState([ &quot;count&quot;])</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>…mapState()</p><pre><code>...mapState是state的语法糖，使用时需要从vuex中引入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">...mapState(&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>mapGetters 辅助函数</p><p>  mapGetters辅助函数仅仅是将store中的getter映射到局部属性</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapGetters &#125; from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  computed: &#123;</span><br><span class="line">  // 使用对象展开运算符将 getter 混入 computed 对象中</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      &apos;doneTodosCount&apos;,</span><br><span class="line">      &apos;anotherGetter&apos;,</span><br><span class="line">      // ...</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapActions<br>  类似mapState</p></li></ul><ul><li><p>getter计算属性</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line"> doneTodosCount () &#123;</span><br><span class="line">   return this.$store.state.todos.filter(todo =&gt; todo.done).length</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></code></pre><p> 如果有多个组件需要用到这个属性，可以在store里面定义‘getter’，可以说是store的计算属性，像计算属性一样，getter的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    const store = new Vuex.Store(&#123;</span><br><span class="line">      state: &#123;</span><br><span class="line">        todos: [</span><br><span class="line">          &#123; id: 1, text: &apos;...&apos;, done: true &#125;,</span><br><span class="line">          &#123; id: 2, text: &apos;...&apos;, done: false &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      getters: &#123;</span><br><span class="line">      //state作为第一个参数</span><br><span class="line">        doneTodos: state =&gt; &#123;</span><br><span class="line">          return state.todos.filter(todo =&gt; todo.done)</span><br><span class="line">        &#125;</span><br><span class="line">        //可以接收其他getter作为第二个参数</span><br><span class="line">          doneTodosCount: (state, getters) =&gt; &#123;</span><br><span class="line">            return getters.doneTodos.length</span><br><span class="line">          &#125;</span><br><span class="line">          //可以通过让getter返回一个函数，来实现给getter传参,对store里的数组进行查询时非常有作用</span><br><span class="line">           getTodoById: (state) =&gt; (id) =&gt; &#123;</span><br><span class="line">              return state.todos.find(todo =&gt; todo.id === id)</span><br><span class="line">            &#125;</span><br><span class="line">            //</span><br><span class="line">store.getters.getTodoById(2) // -&gt; &#123; id: 2, text: &apos;...&apos;, done: false &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //在组件中使用，同计算属性的调用，不用加括号</span><br><span class="line"></span><br><span class="line">    this.$store.getters.doneTodosCount</span><br></pre></td></tr></table></figure></li><li><p>dispatch方法</p><p> dispatch(actionName,data)分发调用action，第一个参数是方法名，第二个是数据<br> 触发store里面的action对应方法名的函数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.dispatch(&quot;&quot;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对如何异步显示数据效果的编码流程进行了总结&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ajax&lt;br&gt;ajax请求函数，抛出接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;vuex&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;store里面新建index完成基本配置&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>summary_js</title>
    <link href="http://yoursite.com/2018/11/24/summary_js/"/>
    <id>http://yoursite.com/2018/11/24/summary_js/</id>
    <published>2018-11-24T05:32:22.000Z</published>
    <updated>2018-11-24T05:03:29.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="enter回车"><a href="#enter回车" class="headerlink" title="enter回车"></a>enter回车</h2><blockquote><p>持续更新</p></blockquote><p>在修改项目的过程中，学习到了关于表单enter键提交是否可以触发</p><ul><li>如果type是submit，一个文本或者多个文本都会提交</li><li>如果是button，仅一个文本的时候提交</li><li>type为image的按钮，等同于type为submit的效果</li><li>用button时，fx和IE有不同的表现。radio和checkbox在FX下也会触发提交表单，在IE下不会</li></ul><h2 id="事件代理，事件委托"><a href="#事件代理，事件委托" class="headerlink" title="事件代理，事件委托"></a>事件代理，事件委托</h2><p>利用的是冒泡原理，与事件源。<br>还可以用来给动态添加的元素绑定事件</p><h3 id="事件源"><a href="#事件源" class="headerlink" title="事件源"></a>事件源</h3><ul><li><p>兼容</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let e = e || window.event;</span><br><span class="line">var target = e.target || e.srcElement;</span><br></pre></td></tr></table></figure></li><li><p>属性</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.log(e.target);</span><br><span class="line">console.log(e.target.id);</span><br><span class="line">console.log(e.target.tagName);</span><br><span class="line">console.log(e.target.nodeName);</span><br><span class="line"> console.log(e.target.classList);</span><br><span class="line">console.log(e.target.className);</span><br><span class="line">console.log(e.target.innerHTML);</span><br><span class="line">console.log(e.target.innerText);</span><br></pre></td></tr></table></figure></li></ul><h2 id="es6-箭头函数"><a href="#es6-箭头函数" class="headerlink" title="es6 箭头函数"></a>es6 箭头函数</h2><blockquote><p>回调函数为匿名函数时，回调函数的this会指向window，需要对回调函数bind(this)。<br>回调函数为箭头函数时，回调函数的this会指向他的直接上层，本例中指向obj,objx。<br>回调函数就是一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数。这个过程就叫做回调。</p></blockquote><h3 id="不绑定this"><a href="#不绑定this" class="headerlink" title="不绑定this"></a>不绑定this</h3><p>箭头函数的this其实就是在定义的时候就确定好的，以后不管怎么调用这个箭头函数，箭头函数的this始终为定义时的this</p><ul><li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。所以说在箭头函数中的this指向是固定的</li><li>最好不要用箭头函数作为对象的方法。</li><li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li><li><p>箭头函数还有一个比较有特点的地方就是其不绑定arguments,或者用rest参数代替</p><p>  但是如果在箭头函数需要参数时，可以使用剩余参数来取代arguments</p></li></ul><p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure></p><p>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 报错</span><br><span class="line">let getTempItem = id =&gt; &#123; id: id, name: &quot;Temp&quot; &#125;;</span><br><span class="line"></span><br><span class="line">// 不报错</span><br><span class="line">let getTempItem = id =&gt; (&#123; id: id, name: &quot;Temp&quot; &#125;);</span><br></pre></td></tr></table></figure><h2 id="es6-module模块"><a href="#es6-module模块" class="headerlink" title="es6 module模块"></a>es6 module模块</h2><p>通过export抛出，import引入</p><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><ul><li><p>抛出一个变量</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="comment">//写法二</span></span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;firstName&#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>as关键字重命名</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>抛出默认</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  xxx</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><ul><li><p>接收一个变量</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;firstName&#125; from &apos;./profile.js&apos;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>as关键字重命名</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; firstName as surname &#125; from &apos;./profile.js&apos;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>import命令输入的变量都是只读的，因为它的本质是输入接口，不可以修改</p></li><li><p>整体加载</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import * as XXX from &apos;./profile.js&apos;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>引入默认抛出的接口，可以自己随便命名</p></li></ul><h2 id="js跳转"><a href="#js跳转" class="headerlink" title="js跳转"></a>js跳转</h2><p><a href="https://www.cnblogs.com/Renyi-Fan/p/9130325.html" target="_blank" rel="noopener">https://www.cnblogs.com/Renyi-Fan/p/9130325.html</a></p><p>js对打开的页面ULR进行跳转，</p><ul><li>location的href属性</li><li>open 方法</li><li>histoty的三个方法</li><li>location的assign方法</li></ul><h3 id="常规的js页面跳转"><a href="#常规的js页面跳转" class="headerlink" title="常规的js页面跳转"></a>常规的js页面跳转</h3><ul><li><p>在原来的窗口中直接跳转</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.location.href=&quot;你所要跳转的页面&quot;;</span><br></pre></td></tr></table></figure></li><li><p>在新窗口中打开页面用</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.open(&apos;你所要跳转的页面&apos;);</span><br><span class="line">//open属性的参数　&apos;page.html&apos; 弹出窗口的文件名；&apos;newwindow&apos; 弹出窗口的名字（不是文件名），非必须，可用空&apos;代替；height=100 窗口高度；width=500 窗口宽度；top=0 窗口距离屏幕上方的象素值；left=0 窗口距离屏幕左侧的象素值。</span><br></pre></td></tr></table></figure></li></ul><p>##[object Object]</p><p>这个不是两个对象的意思，是对象的字符串形式，是隐式调用了Object对象的toString()方法，形式是”[object Object]”.<br>[object objcet]      自定义的对象   没有覆盖toString方法，返回默认<br>[object]            window对象      覆盖了toString方法，显式调用返回[object Object]<br>123                  字条串         覆盖了toString方法，显式调用返回[object String]</p><p>在我做项目的时候遇见了一个问题，把对象放进cookie之后，cookie存储的格式变成了object Object<br>,解决办法是转化成字符串之后存入,使用时再解析成json对象</p><ul><li><p>JSON.parse()【从一个字符串中解析出json对象】</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//定义一个字符串</span><br><span class="line">var data=&apos;&#123;&quot;name&quot;:&quot;goatling&quot;&#125;&apos;</span><br><span class="line">//解析对象​</span><br><span class="line">​JSON.parse(data)</span><br><span class="line">结果是：</span><br><span class="line">​name:&quot;goatling&quot;</span><br></pre></td></tr></table></figure></li><li><p>JSON.stringify()【从一个对象中解析出字符串】</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var data=&#123;name:&apos;goatling&apos;&#125;</span><br><span class="line">JSON.stringify(data)</span><br><span class="line">结果是：</span><br><span class="line">&apos;&#123;&quot;name&quot;:&quot;goatling&quot;&#125;&apos;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;enter回车&quot;&gt;&lt;a href=&quot;#enter回车&quot; class=&quot;headerlink&quot; title=&quot;enter回车&quot;&gt;&lt;/a&gt;enter回车&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;持续更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在修改项目的过程中，学
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>rem</title>
    <link href="http://yoursite.com/2018/11/18/rem/"/>
    <id>http://yoursite.com/2018/11/18/rem/</id>
    <published>2018-11-18T11:13:05.000Z</published>
    <updated>2018-11-18T12:19:17.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h1><ul><li>rem是相对于根元素<html>的字体大小相对单位</html></li><li>类似与em，不过rem是依赖根元素计算的，em是依赖父元素计算的</li><li>rem能等比例适配所有屏幕</li><li>这里有个插件flexible.js就是用rem实现的</li></ul><p>这个button按钮的宽度为120px，高度为60px</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">html&#123;</span><br><span class="line">    font-size:20px;</span><br><span class="line">&#125;</span><br><span class="line">.btn &#123;</span><br><span class="line">    width: 6rem;</span><br><span class="line">    height: 3rem;</span><br><span class="line">    line-height: 3rem;</span><br><span class="line">    font-size: 1.2rem;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    background: #06c;</span><br><span class="line">    color: #fff;</span><br><span class="line">    border-radius: .5rem;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是不同分辨率下的font-size的值，应该如何计算<br><img src="/img/rem/rem.png"><br>计算之后可以用媒体查询设置html的font-size值</p><h2 id="移动端页面自适应解决方案"><a href="#移动端页面自适应解决方案" class="headerlink" title="移动端页面自适应解决方案"></a>移动端页面自适应解决方案</h2><ul><li>不需要手动设置viewport了</li><li>原理是根据设备屏幕的DPR(设备像素比，比如dpr=2时，表示1个CSS像素由4个物理像素点组成） 动态设置 html 的font-size, 同时根据设备DPR调整页面的缩放值，进而达到高清效果。)</li><li>绝不是每个地方都要用rem，rem只适合与固定宽度</li><li>此方案也是默认1rem=100px</li></ul><p>比如你在效果图上量取的某个按钮元素长 55px, 宽37px</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.myBtn &#123;</span><br><span class="line">   width: 0.55rem;</span><br><span class="line">   height: 0.37rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rem&quot;&gt;&lt;a href=&quot;#rem&quot; class=&quot;headerlink&quot; title=&quot;rem&quot;&gt;&lt;/a&gt;rem&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;rem是相对于根元素&lt;html&gt;的字体大小相对单位&lt;/html&gt;&lt;/li&gt;
&lt;li&gt;类似与em，不过rem是依赖根元素计
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vuex</title>
    <link href="http://yoursite.com/2018/11/11/vuex/"/>
    <id>http://yoursite.com/2018/11/11/vuex/</id>
    <published>2018-11-11T06:38:13.000Z</published>
    <updated>2018-11-11T07:03:41.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><p>主要是状态管理，将数据统一管理(state)</p><p> <img src="/img/vue/liucheng.jpg" alt="流程图"></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul><li>状态对象 stat</li><li>操作state 直接更新state的多个方法对象 mutations</li><li>操作mutations 间接更新state的多个方法对象 actions</li><li>包含多个基于state的getter计算属性的对象 getters</li><li>包含n个mutations的type名称常量 mutations-type</li></ul><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>共享的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const state=&#123;&#125;;</span><br></pre></td></tr></table></figure></p><p>建立统一数据容器，唯一的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let store = new Vuex.Store(&#123;</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>store(容器)注册到实例上，main.js里面，所有的组件都会有一个属性this.$store<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">store,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在组件中使用，加不加this都一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;this.$store.state.XXX&#125;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="state-单向数据流"><a href="#state-单向数据流" class="headerlink" title="state(单向数据流)"></a>state(单向数据流)</h2><p> 注意,在组件中最好不要直接更改共享的数据，共享的数据仅仅给组件染</p><h2 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h2><p> 通过mutation(管理员)来更改状态，可以在store里面设置成严格模式<br> <code>strict：true</code>，mutation不支持异步</p><ol><li><p>告诉mutations需要更改,mutations相当于methods</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations=&#123;</span><br><span class="line">    add(state,count)&#123;</span><br><span class="line">        <span class="comment">//state是自动放入的，默认指的就是当前的state</span></span><br><span class="line">        <span class="comment">//操作state的属性</span></span><br><span class="line">        state.XXX +=count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state，</span><br><span class="line">mutations,</span><br><span class="line">strict：<span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件通过mutations提交,第一个参数是与mutatioons里面的方法绑定，第二个参数是自定义参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.commit(&apos;add&apos;,2)</span><br></pre></td></tr></table></figure></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>打印日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import logger from &apos;vuex/dist/logger&apos;</span><br><span class="line">const store = new Vuex.store(&#123;</span><br><span class="line">    plugins:[logger()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><p>src下面创建一个store文件\index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span></span><br><span class="line"><span class="keyword">const</span> state=&#123;&#125;;</span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state，</span><br><span class="line">    mutations,</span><br><span class="line">    strict：<span class="literal">true</span>,</span><br><span class="line">    plugins:[logger()]</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>store下面再创建一个mutations.js,里面存放mutations的相关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import * as Types from &apos;mutations.types.js&apos;</span><br><span class="line">const mutations = &#123;</span><br><span class="line"> // [方法名](state,&#123;param&#125;)&#123;&#125;</span><br><span class="line">[Types.INCREMENT](state)&#123;</span><br><span class="line">   state.count+=1</span><br><span class="line">&#125;,</span><br><span class="line">[Types.DECREMENT](state)&#123;</span><br><span class="line">    state.count-=1</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default mutations;</span><br></pre></td></tr></table></figure></p><p>宏(一般大写)<br>store下面再创建一个mutations.types.js里面存放mutations的方法的名字，方便查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//增加</span><br><span class="line">export const INCREMENT=&apos;INCREMENT&apos;</span><br><span class="line">//减少</span><br><span class="line">export const DECREMENT=&apos;DECREMENT&apos;</span><br></pre></td></tr></table></figure></p><p>组件中引入同mutations.js中引入一样,只不过不加中括号<br>import * as Types from ‘mutations.types.js’</p><p>Types.INCREMENT<br>Types.DECREMENT</p><h2 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h2><p>相当于computed,如果数据多了可以模仿mutations的抽离<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const getters=&#123;</span><br><span class="line"> val(state)&#123;</span><br><span class="line"> state.count%2?&apos;奇数&apos;:&apos;偶数&apos;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default new Vuex.store(&#123;</span><br><span class="line">getters,</span><br><span class="line">&#125;)</span><br><span class="line">//引用时</span><br><span class="line">&#123;&#123;$store.getters.val&#125;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h2><ul><li>和后台交互的异步action，后台数据也需要修改</li></ul><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><ol><li>引入api以及mutation-types</li><li><p>异步获取数据</p><ul><li>异步获取地址</li><li>发送异步ajax请求</li><li><p>提交一个mutation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> //async 方法名(&#123;commit,参数可选&#125;&#123;&#125;)</span><br><span class="line">// 异步获取地址</span><br><span class="line"> async getAddress (&#123;commit, state&#125;) &#123;</span><br><span class="line"> // 从state状态中获取到经纬度用来设置reqAddress的参数（看接口文档）</span><br><span class="line"> const geohash = state.latitude + &apos;,&apos; + state.longitude</span><br><span class="line"> // 1. 发送异步ajax请求</span><br><span class="line"> const result = await reqAddress(geohash)</span><br><span class="line"> // 2. 根据结果提交一个mutation</span><br><span class="line"> commit(RECEIVE_ADDRESS, &#123;address: result.data&#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vuex&quot;&gt;&lt;a href=&quot;#vuex&quot; class=&quot;headerlink&quot; title=&quot;vuex&quot;&gt;&lt;/a&gt;vuex&lt;/h1&gt;&lt;p&gt;主要是状态管理，将数据统一管理(state)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/img/vue/liucheng.jpg
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>stylus</title>
    <link href="http://yoursite.com/2018/10/29/stylus/"/>
    <id>http://yoursite.com/2018/10/29/stylus/</id>
    <published>2018-10-29T06:08:13.000Z</published>
    <updated>2018-10-29T08:34:58.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stylus学习笔记"><a href="#stylus学习笔记" class="headerlink" title="stylus学习笔记"></a>stylus学习笔记</h1><ul><li>冒号可选，分号可选，逗号可选，括号可选</li><li><p>缩进与空格很重要</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">body</span><br><span class="line">  color white</span><br></pre></td></tr></table></figure></li><li><p>父级引用 &amp;</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">textarea</span><br><span class="line">input</span><br><span class="line">  color #A7A7A7</span><br><span class="line">  &amp;:hover</span><br><span class="line">    color #000</span><br><span class="line">//等于</span><br><span class="line">textarea,</span><br><span class="line">  input &#123;</span><br><span class="line">    color: #a7a7a7;</span><br><span class="line">  &#125;</span><br><span class="line">  textarea:hover,</span><br><span class="line">  input:hover &#123;</span><br><span class="line">    color: #000;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>变量</p></li><li><p>属性查找 @</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#logo</span><br><span class="line">  position: absolute</span><br><span class="line">  top: 50%</span><br><span class="line">  left: 50%</span><br><span class="line">  width: 150px</span><br><span class="line">  height: 80px</span><br><span class="line">  margin-left: -(@width / 2)</span><br><span class="line">  margin-top: -(@height / 2)</span><br></pre></td></tr></table></figure></li><li><p>运算符</p><ul><li>范围 .. 包含界限 …包含开头不包含结尾</li><li>存在操作符in</li><li>实例检查 is a</li><li>条件赋值：?= :=</li><li>变量定义：is defined</li></ul></li><li>混合书写</li><li>方法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;stylus学习笔记&quot;&gt;&lt;a href=&quot;#stylus学习笔记&quot; class=&quot;headerlink&quot; title=&quot;stylus学习笔记&quot;&gt;&lt;/a&gt;stylus学习笔记&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;冒号可选，分号可选，逗号可选，括号可选&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>demo_vue-book</title>
    <link href="http://yoursite.com/2018/10/27/vue-book/"/>
    <id>http://yoursite.com/2018/10/27/vue-book/</id>
    <published>2018-10-27T07:33:54.000Z</published>
    <updated>2018-10-27T08:51:35.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-book"><a href="#vue-book" class="headerlink" title="vue-book"></a>vue-book</h1><hr><p>接下来会学习vuex，在学习一门预处理语言，之后用我学过的所有东西做一个练习的项目<br>vue学习之后，用vue-cli做的一个练习。<br>这是学习vue的过程中走通了一遍流程，但还有很多功能没有实现</p><ul><li>上拉下拉刷新</li><li>图片的懒加载</li><li>打包之后如何上线</li><li>vuex的学习</li><li>如何连接数据库等</li></ul><p>github:<a href="https://github.com/biubiuins/vue-book" target="_blank" rel="noopener">https://github.com/biubiuins/vue-book</a></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul><li>npm install vue</li><li>npm install -g webpack</li><li>npm install -g vue-cli</li><li>npm install less less-loader axios vuex bootstrap</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>build 打包后的脚本文件</li><li>src 源码文件</li><li>mock后台代码，模拟数据</li><li>src/api 代表的是所有的接口,获取数据给前端调用</li><li>src/base 基础组件</li><li>src/components 页面组件<br><img src="/img/vue-book/lujing.jpg" width="90%"><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3>根据页面划分了5个页面组件</li><li>首页 Home.vue</li><li>列表 List.vue</li><li>收藏 Collect.vue</li><li>添加 Add.vue</li><li>详情 Detail.vue</li></ul><p>配置路由，配置路由映射表并new个实例,挂载在根组件上，router-view显示在App.vue<br>router/index.js</p><p><font color="red">Vue.use()是用来安装Vue插件</font><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">Vue.use(Router);</span><br></pre></td></tr></table></figure></p><blockquote><p>这里用了模板，将会另外写一篇，关于前端的模板与node的</p></blockquote><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><p>base/Tab.vue<br>scoped 表示是当前组件的样式，并不是全局的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>less预处理语言，学习之后会写一篇博客</p></blockquote><p>点击导航之后会通过to跳转页面，并且样式改变<br>这里需要注意<br>/home 确切激活，仅仅这个路径有效。router-link-exact-active<br>/home /home/a 都可以。router-link-active<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/add&quot;&gt;</span><br><span class="line">&lt;i class=&quot;iconfont icon-add&quot;&gt;&lt;/i&gt;&lt;span&gt;添加&lt;/span&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></p><p>基础组件Tab挂载在App.vue上（导航很多页面都需要），并在App.vue上写全局的样式，清除默认样式。<br>新学习到的清除输入框和按钮的默认样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input，button&#123;appearance:none;&#125;</span><br></pre></td></tr></table></figure></p><p>App.vue的组件中有<code>name: &#39;App&#39;</code>，这里<code>name: &#39;app&#39;</code> 相当于一个全局 ID。可以不写，写了可以提供更好的调试信息。<br>页面渲染也是在App.vue中实现的</p><h4 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h4><p><a href="http://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2" target="_blank" rel="noopener">http://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2</a><br>图标打包好了之后在index.html中引入\<br>iconfont是必须类名表明是个icon，后面根据页面选择<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;iconfont icon-shouye&quot;&gt;&lt;/i&gt;&lt;span&gt;首页&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><p>base/Mheader.vue<br>头部的标题不是全部一样的，并且比如首页是没有返回键的，所以这里用到的插槽和父组件给子组件传值<br>这里用Home.vue-Mheader.vue为例</p><ol><li>在父组件上挂载Mheader.vue</li><li>&lt;Mheader.vue&gt;首页，首页需要显示出来，需要在子组件Mheader.vue中放个匿名插槽接收</li><li><p>父组件需要传递一个值告诉子组件是否显示返回键。子组件接收back，不需要验证的时候用数组，需要验证的时候用对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;i class=&quot;iconfont icon-fanhui&quot; v-if=&quot;back&quot;&gt;&lt;/i&gt;</span><br><span class="line">...</span><br><span class="line">props:&#123;</span><br><span class="line"> back:&#123;type:Boolean,default:false&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>点击返回键，返回上一个操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$router.go(-1);</span><br></pre></td></tr></table></figure></li></ol><ul><li>扩展一下,back也可以返回。this.$router.back()</li><li>强制跳转页面，在后面追加，点返回还可以回去。this.$router.push(‘/XXX’)</li><li>路由替换，将原来的替换。this.$router.replace(‘/XXX’)<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3>base/Swiper.vue<br>安装依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-awesome-swiper --save-dev</span><br></pre></td></tr></table></figure></li></ul><p>在main.js中引入vue-awesome-swiper插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import VueAwesomeSwiper from &apos;vue-awesome-swiper&apos;</span><br><span class="line">import &apos;swiper/dist/css/swiper.css&apos;</span><br><span class="line">Vue.use(VueAwesomeSwiper)</span><br></pre></td></tr></table></figure></p><h3 id="后台获取图片信息"><a href="#后台获取图片信息" class="headerlink" title="后台获取图片信息"></a>后台获取图片信息</h3><p>mock/sliders.js 存放图片连接<br>mock/server.js 配置服务器<br>url.parse()可以将一个完整的URL地址，分为很多部分，常用的有：host、port、pathname、path、query。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let sliders = require(&apos;./sliders&apos;)</span><br><span class="line">http.createServer((req,res)=&gt;&#123;</span><br><span class="line">let&#123;pathname,query&#125; = url.parse(req.url);</span><br><span class="line">  if (pathname === &apos;/sliders&apos;)&#123;</span><br><span class="line">     res.setHeader(&apos;Content-Type&apos;,&apos;application/json;charset=utf-8&apos;)</span><br><span class="line">     res.end(JSON.stringify(sliders))</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是当前段发起ajax请求的时候，是8080端口请求3000端口的数据，所以有跨域的问题，这里需要在服务器中加入跨域头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">res.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type,Content-Length, Authorization, Accept,X-Requested-With&quot;);</span><br><span class="line">res.setHeader(&quot;Access-Control-Allow-Methods&quot;,&quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">res.setHeader(&quot;X-Powered-By&quot;,&apos; 3.2.1&apos;)</span><br><span class="line">if(req.method==&quot;OPTIONS&quot;) return res.end();/*让options请求快速返回*/</span><br></pre></td></tr></table></figure></p><h3 id="轮播图的api"><a href="#轮播图的api" class="headerlink" title="轮播图的api"></a>轮播图的api</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="comment">//设置基本的默认请求路径</span></span><br><span class="line">axios.defaults.baseURL =<span class="string">'http://localhost:3000'</span>;</span><br><span class="line"><span class="comment">//获取轮播图数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> getSliders=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"> <span class="comment">//因为设置了了efaults.baseURL，所以它请求的路径其实是http://localhost:3000/sliders,返回的是一个promise对象</span></span><br><span class="line"> <span class="keyword">return</span> axios.get(<span class="string">'/sliders'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>axios 笔记待整理</p></blockquote><h3 id="前端获取数据"><a href="#前端获取数据" class="headerlink" title="前端获取数据"></a>前端获取数据</h3><p>获取的数据父子组件传值，传给子组件，子组件渲染出图片<br>如果给接收到的data一个新的名字 slider {data：slider}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">async created()&#123;</span><br><span class="line"> let &#123;data&#125; = await getSliders().then()</span><br><span class="line"> this.sliders=data</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><blockquote><p>async/await 已整理</p></blockquote><h3 id="热门图书-删除图书"><a href="#热门图书-删除图书" class="headerlink" title="热门图书/删除图书"></a>热门图书/删除图书</h3><ul><li>先写服务端，确保数据能正常返回</li><li>增加api方法，实现调取数据的功能</li><li>在哪个组件中应用这个api，如果是一个基础组件需要这些数据，在使用这个组件的父级中调用这个方法，将数据传递给基础组件</li></ul><h3 id="详情页面"><a href="#详情页面" class="headerlink" title="详情页面"></a>详情页面</h3><p>如果用对象作为to的属性，并且使用了参数，必须给路由起个名字，通过名字跳转<br>router/index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;path:&apos;/detail/:bid&apos;,component:Detail,name:&apos;detail&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>component/List.vue<br>需要配置路径参数，点击哪个li跳转哪个详情<br>这是跳转用到router-link，把之前的li改为router-link，</p><ul><li>params是路径参数</li><li>循环组件，需要加上key</li><li>router-link是a标签，这里需要的是li，在taf里面修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link v-for=&quot;(book,index) in books&quot; :to=&quot;&#123;name:&apos;detail&apos;,params:&#123;bid:book.bookId&#125;&#125;&quot; :key=&quot;index&quot; tag=&quot;li&quot; &gt;</span><br></pre></td></tr></table></figure></li></ul><p>因为点击li跳转，删除按钮也在li里面，所以这个应该阻止删除按钮<br>冒泡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click.stop=&quot;remove(book.bookId)&quot;&gt;删除&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>component/Detail.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取通过传过来的参数</span><br><span class="line">$route.params.XXX</span><br></pre></td></tr></table></figure></p><p>获取当前id的图书信息渲染到界面。</p><ul><li>问题一:</li></ul><p>当修改的时候，价格原本是数字，修改之后会变成字符串,加上数字的修饰符<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model.number=&quot;book.bookPrice&quot; id=&quot;bookPrice&quot;&gt;</span><br></pre></td></tr></table></figure></p><ul><li><p>问题二<br>修改url的时候，页面没有刷新，因为模板已经渲染出来了，不会在走created办法。所以，需要监控url的变化，路径参数发生变化，通过监控参数的变化来发送ajax</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">//路径参数发生变化，通过监控参数的变化来发送ajax</span><br><span class="line">$route()&#123;</span><br><span class="line">     this.getData() ;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>问题三<br>如果没有找到对应id的书，那返回的是空对象，如果是空，需要跳转回列表页<br>Object.keys()，该方法返回一个数组,里面是对象的所有属性。如果是空对象那么返回一个空数组。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.keys(this.book).length&gt;0?void 0:this.$ruoter.push(&apos;/List&apos;)</span><br></pre></td></tr></table></figure><p>  处理一下url,server.js查询book的条件变一下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!isNaN(id))</span><br></pre></td></tr></table></figure></li></ul><p>数据改变之后，需要用put更新数据<br>PUT：<br>参数1：url:/book?id=3<br>参数2：请求体发送<br>server.js获取put/post请求体中的数据<br>使用这两个事件就可以获取来自服务器端的响应内容。</p><ul><li>data，数据传递时触发，</li><li>end，没有更多数据提供时触发<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;&quot;;</span><br><span class="line">   res.on(&apos;data&apos;,(chunk)=&gt;&#123;</span><br><span class="line">       str += chunk;</span><br><span class="line">   &#125;);</span><br><span class="line">   res.on(&apos;end&apos;,()=&gt;&#123;</span><br><span class="line">       console.log(str);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h3><p>同详情页面</p><h2 id="优化与其他功能"><a href="#优化与其他功能" class="headerlink" title="优化与其他功能"></a>优化与其他功能</h2><h3 id="loading"><a href="#loading" class="headerlink" title="loading"></a>loading</h3><p>轮播图和热门图书是分开获取的，这里改成一起获取<br>api/index<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return axios.all([getSliders(),getHotBook()])</span><br></pre></td></tr></table></figure></p><p>数据返回的是一个数组，里面是两个promise对象。</p><p>新建base/Loading.vue,挂载在Home.vue<br><a href="https://www.cnblogs.com/lhb25/p/loading-spinners-animated-with-css3.html" target="_blank" rel="noopener">https://www.cnblogs.com/lhb25/p/loading-spinners-animated-with-css3.html</a></p><h3 id="实现页面缓存"><a href="#实现页面缓存" class="headerlink" title="实现页面缓存"></a>实现页面缓存</h3><p>分页面缓存，路由元信息。<br>在配置路由映射的时候有meta(备注)属性,这条对象可以通过<code>this.$route</code>获取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;path:&apos;/home&apos;,component:Home,meta:&#123;keepAlive:true&#125;&#125;,</span><br></pre></td></tr></table></figure></p><p>修改APP.vue,写两个router-view，一个用于，显示缓存的，一个用于显示一般的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">     &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;Tab&gt;&lt;/Tab&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><h3 id="实现路由动画"><a href="#实现路由动画" class="headerlink" title="实现路由动画"></a>实现路由动画</h3><p>给router-view外面包裹一个<transition name="fadeIn"></transition>标签,注意点：一个只能包裹一个标签<br>写css样式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.fadeIn-enter&#123;</span><br><span class="line">  opacity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.fadeIn-enter-active&#123;</span><br><span class="line">  transition:all <span class="number">0.3</span>s;</span><br><span class="line">&#125;</span><br><span class="line">.fadeIn-leave-active&#123;</span><br><span class="line">  transition: all <span class="number">0.3</span>s;</span><br><span class="line">  opacity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="下拉加载更多"><a href="#下拉加载更多" class="headerlink" title="下拉加载更多"></a>下拉加载更多</h3><h3 id="打包上线"><a href="#打包上线" class="headerlink" title="打包上线"></a>打包上线</h3><h3 id="history路由"><a href="#history路由" class="headerlink" title="history路由"></a>history路由</h3><p>在路由中改变mode:’history’</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>router/index<br>meta:{title:XXX}<br>main.js<br>全局钩子，在进入路由之前每一次都会执行此方法。有拦截的作用<br>router.beforeEach(function(from.to,next){<br>   document.title = to.meta.title;<br>   next();<br>});</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-book&quot;&gt;&lt;a href=&quot;#vue-book&quot; class=&quot;headerlink&quot; title=&quot;vue-book&quot;&gt;&lt;/a&gt;vue-book&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;接下来会学习vuex，在学习一门预处理语言，之后用我学过的所有东西做一个练习的项目
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>express学习笔记</title>
    <link href="http://yoursite.com/2018/10/12/express%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/12/express学习笔记/</id>
    <published>2018-10-12T06:09:06.000Z</published>
    <updated>2019-07-26T14:09:51.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="express-学习笔记"><a href="#express-学习笔记" class="headerlink" title="express 学习笔记"></a>express 学习笔记</h1><hr><h2 id="搭建简单服务器"><a href="#搭建简单服务器" class="headerlink" title="搭建简单服务器"></a>搭建简单服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//express() 是一个由 express 模块导出的入口（top-level）函数</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">//创建一个express应用实例名app</span></span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="comment">// 设置端口号：3000</span></span><br><span class="line"><span class="comment">//process.env.PORT：读取当前目录下环境变量port的值</span></span><br><span class="line"><span class="keyword">let</span> port = process.env.PORT || <span class="number">3000</span> ;</span><br><span class="line"><span class="comment">//在端口号上开启服务</span></span><br><span class="line">app.listen(port,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="app-listen-port-hostname-backlog-callback"><a href="#app-listen-port-hostname-backlog-callback" class="headerlink" title="app.listen(port, [hostname], [backlog], [callback])"></a>app.listen(port, [hostname], [backlog], [callback])</h3><p>类似于node中的http.Server.listen()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置端口号：3000</span></span><br><span class="line"><span class="comment">//process.env.PORT：读取当前目录下环境变量port的值</span></span><br><span class="line"><span class="keyword">let</span> port = process.env.PORT || <span class="number">3000</span> ;</span><br><span class="line"><span class="comment">//在端口号上开启服务</span></span><br><span class="line">app.listen(port,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>服务器启动时候，<br>默认端口3000：node app.js<br>设置端口8080：PORT=8080 node app.js</p><h3 id="app-set-name-value"><a href="#app-set-name-value" class="headerlink" title="app.set(name,value)"></a>app.set(name,value)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 views 文件夹为存放视图文件的目录, 即存放模板文件的地方,__dirname 为全局变量,存储当前正在执行的脚本所在的目录。</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">"views"</span>,<span class="string">"./views"</span>);</span><br><span class="line"><span class="comment">//设置使用的模板引擎</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs’)</span></span><br><span class="line"><span class="string">app.set("view engine","jade")</span></span><br><span class="line"><span class="string">npm install --save express-art-template</span></span><br><span class="line"><span class="string">//设置art模板引擎，后缀为art</span></span><br><span class="line"><span class="string">app.engine('</span>art<span class="string">', require('</span>express-art-template<span class="string">'));</span></span><br></pre></td></tr></table></figure><h3 id="app-get-name"><a href="#app-get-name" class="headerlink" title="app.get(name)"></a>app.get(name)</h3><p>返回name的value值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例一</span></span><br><span class="line">app.get(<span class="string">'title'</span>);</span><br><span class="line"><span class="comment">// =&gt; undefined</span></span><br><span class="line">app.set(<span class="string">'title'</span>, <span class="string">'My Site'</span>);</span><br><span class="line">app.get(<span class="string">'title'</span>);</span><br><span class="line"><span class="comment">// =&gt; "My Site"</span></span><br><span class="line"><span class="comment">//实例二</span></span><br><span class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="app-get-path-callback-callback-…"><a href="#app-get-path-callback-callback-…" class="headerlink" title="app.get(path, callback [, callback …])"></a>app.get(path, callback [, callback …])</h3><h3 id="app-all-path-callback-callback-…"><a href="#app-all-path-callback-callback-…" class="headerlink" title="app.all(path, callback [, callback …])"></a>app.all(path, callback [, callback …])</h3><p>这种方法就像标准的app.METHOD()方法, 除了它匹配所有HTTP动词。<br>访问path路径的所有方法执行的回调函数.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//* 表示匹配所有的路径</span></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.end(req.method + <span class="string">'user'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一般放在最后面防止前面的被覆盖</span></span><br></pre></td></tr></table></figure></p><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'hello world'</span>);</span><br><span class="line">  res.status(<span class="number">404</span>).send(错误请求)<span class="comment">//访问这个路径是设定状态码为404</span></span><br><span class="line">  <span class="comment">//通过res.send（）接口向客户端发送hello world，send只能响应一次，意思是只能出现一个send</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>res.send（）只能出现一次<br>如果要响应多次，用node原生的write和end，但是如果只有write会处于一个挂起状态<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.write(<span class="string">'hello world'</span>);</span><br><span class="line">  res.write(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>res.send有结束响应的作用</li><li>res.write没有结束响应的作用，需要res.end结束中间件挂起<h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3>下表中响应对象（res）的方法向客户端返回响应，终结请求响应的循环。如果在路由句柄中一个方法也不调用，来自客户端的请求会一直挂起。<br><img src="/img/express/response.jpg" width="80%"><h4 id="res-render"><a href="#res-render" class="headerlink" title="res.render()"></a>res.render()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 views 文件夹为存放视图文件的目录, 即存放模板文件的地方,__dirname 为全局变量,存储当前正在执行的脚本所在的目录。</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">"views"</span>,<span class="string">"./views"</span>);</span><br><span class="line"><span class="comment">//第一个是渲染的views文件夹下面的index，第二个是传递的数据,注意需要设置模板引擎</span></span><br><span class="line">res.render(<span class="string">"index"</span>,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="res-setHeader"><a href="#res-setHeader" class="headerlink" title="res.setHeader()"></a>res.setHeader()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//Content-Type的作用 该实体头的作用是让服务器告诉浏览器它发送的数据属于什么文件类型。</span><br><span class="line">res.setHeader(&quot;Content-Type&quot;,&apos;text/html;charset=utf-8&apos;)</span><br></pre></td></tr></table></figure><h4 id="res-redirect"><a href="#res-redirect" class="headerlink" title="res.redirect()"></a>res.redirect()</h4><p>调用redirect()方法后，其后的代码都不会被执行。<br>而使用redirect()设置的状态码不是301或302也不会发生跳转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.redirect([status,] path)</span><br><span class="line">//重定义到path所指定的URL，重定向时可以同时指定HTTP状态码，不指定状态码默认为302</span><br></pre></td></tr></table></figure></p><h4 id="res-location"><a href="#res-location" class="headerlink" title="res.location()"></a>res.location()</h4><p>location()方法本质上是调用了ServerResponse对象的setHeader()方法，但并没有设置状态码。<br>使用location()设置头信息，而不设置状态码或状态码不是301或302，并不会发生重定向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.location(path)</span><br></pre></td></tr></table></figure></p><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p><img src="/img/express/request.jpg" alt="response"></p><h4 id="req-query"><a href="#req-query" class="headerlink" title="req.query"></a>req.query</h4><p>处理 get 请求，获取 get 请求参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /search?q=tobi+ferret</span></span><br><span class="line">req.query.q</span><br><span class="line"><span class="comment">// =&gt; "tobi ferret"</span></span><br><span class="line"><span class="comment">// GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse</span></span><br><span class="line">req.query.order</span><br><span class="line"><span class="comment">// =&gt; "desc"</span></span><br><span class="line">req.query.shoe.color</span><br><span class="line"><span class="comment">// =&gt; "blue"</span></span><br><span class="line">req.query.shoe.type</span><br><span class="line"><span class="comment">// =&gt; "converse"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-body"><a href="#req-body" class="headerlink" title="req.body"></a>req.body</h4><p>处理 post 请求，获取 post 请求体<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// POST user[name]=tobi&amp;user[email]=tobi@learnboost.com</span></span><br><span class="line">req.body.user.name</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line">req.body.user.email</span><br><span class="line"><span class="comment">// =&gt; "tobi@learnboost.com"</span></span><br><span class="line"><span class="comment">// POST &#123; "name": "tobi" &#125;</span></span><br><span class="line">req.body.name</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-params"><a href="#req-params" class="headerlink" title="req.params"></a>req.params</h4><p>处理 /:xxx 形式的 get 或 post 请求，获取请求参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /user/tj</span></span><br><span class="line">req.params.name</span><br><span class="line"><span class="comment">// =&gt; "tj"</span></span><br><span class="line"><span class="comment">// GET /file/javascripts/jquery.js</span></span><br><span class="line">req.params[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// =&gt; "javascripts/jquery.js"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-param-name"><a href="#req-param-name" class="headerlink" title="req.param(name)"></a>req.param(name)</h4><p>处理 get 和 post 请求，但查找优先级由高到低为 req.params→req.body→req.query<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ?name=tobi</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line"><span class="comment">// POST name=tobi</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line"><span class="comment">// /user/tobi for /user/:name</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br></pre></td></tr></table></figure></p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>用于客户端与服务器路由匹配之前的中间操作，正常中间件放在路由上面，中间件通过next()往下走。</p><h4 id="app-use（-path-function）"><a href="#app-use（-path-function）" class="headerlink" title="app.use（[path],function）"></a>app.use（[path],function）</h4><p>利用express托管静态文件<br>node.js不能通过目录来引入文件，而express可以，public为静态目录<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置public文件夹为存放静态文件的目录。</span></span><br><span class="line"><span class="keyword">let</span> path=<span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="comment">//ex4里面唯一的内置中间件</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br></pre></td></tr></table></figure></p><p>一个中间件处理器，请求来了，让那些中间件先处理一遍</p><ul><li>没有挂载路径的中间件，应用的每个请求都会执行该中间件</li><li>挂载至 /path 的中间件，任何指向 /path 的请求都会执行它<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(&quot;/name&quot;,function(req,res,next)&#123;</span><br><span class="line">res.setHeader(&quot;Content-Type&quot;,&apos;text/html;charset=utf-8&apos;)</span><br><span class="line">next();</span><br><span class="line">&#125;)</span><br><span class="line">app.get(&quot;/name/n&quot;,function(req,res)&#123;</span><br><span class="line">&#125;)</span><br><span class="line">//也可以匹配到，在执行get请求/name/n时先执行上面的中间件</span><br></pre></td></tr></table></figure></li></ul><h4 id="错误中间件"><a href="#错误中间件" class="headerlink" title="错误中间件"></a>错误中间件</h4><p>错误处理中间件和其他中间件定义类似，只是必须要使用 4 个参数(err, req, res, next)。即使不需要 next 对象，也必须在签名中声明它，否则中间件会被识别为一个常规中间件，不能处理错误。遇见错误之后直接执行错误中间件。<br>错误处理中间件应当在在其他 app.use() 和路由调用之后才能加载，一般放在路由的最底部，比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> methodOverride = <span class="built_in">require</span>(<span class="string">'method-override'</span>);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line">app.use(methodOverride());</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">'Something broke!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="应用生成器"><a href="#应用生成器" class="headerlink" title="应用生成器"></a>应用生成器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">$ npm install express-generator -g</span><br><span class="line"><span class="comment">//view=XXX 使用引擎名字  myapp项目名称</span></span><br><span class="line">$ express --view=pug myapp</span><br><span class="line"><span class="comment">//安装所有依赖</span></span><br><span class="line">$ cd myapp</span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动myapp项目</span></span><br><span class="line">$ set DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure><hr><p>我的石墨文档链接：<a href="https://shimo.im/docs/TXeewzaE8Jsdgn0I/" target="_blank" rel="noopener">https://shimo.im/docs/TXeewzaE8Jsdgn0I/</a><br>练习的简易聊天室连接：<a href="https://github.com/biubiuins/demo_chat" target="_blank" rel="noopener">https://github.com/biubiuins/demo_chat</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;express-学习笔记&quot;&gt;&lt;a href=&quot;#express-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;express 学习笔记&quot;&gt;&lt;/a&gt;express 学习笔记&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;搭建简单服务器&quot;&gt;&lt;a href=&quot;#搭
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>project_email</title>
    <link href="http://yoursite.com/2018/10/11/project-email/"/>
    <id>http://yoursite.com/2018/10/11/project-email/</id>
    <published>2018-10-11T07:16:32.000Z</published>
    <updated>2018-10-12T06:37:09.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="邮件收发项目"><a href="#邮件收发项目" class="headerlink" title="邮件收发项目"></a>邮件收发项目</h2><p>大二上开始学html，css，js之后做的暑假做的前端页面，很感谢老师可以给一个练手的机会，在做的过程中发现了很多问题，以及项目完成之后的收获。<br>&nbsp;&nbsp;&nbsp;&nbsp;虽然是一个很简单的界面，但是之前学习的时候不太仔细，也没有demo练习，还是做的磕磕绊绊，还好最后做的差不多了。TAT<br>&nbsp;&nbsp;针对过程中的问题，阅读了很多关于语法规范的文章，js，jq又重新学习了一遍（练习了很多），大二下期基本在学习之中度过的。希望在以后的项目中可以有所进步，彻底的实现前后端分离！！！</p><h2 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h2><ul><li>完成时间：大二上期寒假  2018-3月左右</li><li>bootsrap框架，layui框架，jquery</li></ul><h2 id="项目不足"><a href="#项目不足" class="headerlink" title="项目不足"></a>项目不足</h2><ul><li>语法不规范，复用性不强，后面修改过一次感觉修改起来很复杂</li><li>js不熟练，项目之后大二下期又重新开始学习了一遍js，并写了总结 (<a href="https://biubiuins.github.io/2018/10/11/summary-2018-9/" target="_blank" rel="noopener">https://biubiuins.github.io/2018/10/11/summary-2018-9/</a>)</li><li><p>技术不足，没有实现前后端分离</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2></li><li><p>首页 <a href="http://mailroom.sicau.edu.cn/email/public/" target="_blank" rel="noopener">http://mailroom.sicau.edu.cn/email/public/</a></p><ul><li>bootsrap做了响应式，用了ajax请求数据</li></ul></li><li>管理页面（需要登陆仅提供图片）<br><img src="/img/project_email/admin.png" width="85%"><ul><li>实现全选与批量删除</li><li>点击已取之后，重新获取数据（保证筛选邮件之后点击已取仍显示的是筛选之后的邮件)</li><li>邮件类型默认显示上一次选择的类型，可输入筛选的下拉框<br><img src="/img/project_email/admin1.png" width="85%"></li><li>超级管理员界面实现了原生js模态框，并做了根据屏幕居中</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;邮件收发项目&quot;&gt;&lt;a href=&quot;#邮件收发项目&quot; class=&quot;headerlink&quot; title=&quot;邮件收发项目&quot;&gt;&lt;/a&gt;邮件收发项目&lt;/h2&gt;&lt;p&gt;大二上开始学html，css，js之后做的暑假做的前端页面，很感谢老师可以给一个练手的机会，在做的过程中发现
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>summary-2018.9</title>
    <link href="http://yoursite.com/2018/10/11/summary-2018-9/"/>
    <id>http://yoursite.com/2018/10/11/summary-2018-9/</id>
    <published>2018-10-11T04:32:50.000Z</published>
    <updated>2018-10-11T06:11:08.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="summary-2018-9"><a href="#summary-2018-9" class="headerlink" title="summary-2018-9"></a>summary-2018-9</h1><hr><p>这是在学会搭建博客之后的第一篇博客，以前学习的时候也有记笔记，所以把之前学习笔记上面整理的常见的功能、封装以及遇到的问题写出来，这篇仅限于js，jq。现在正在学习vue，希望在过段时间，自己也能写出关于vue学习的总结。<br>在此之前还需要了解markdown的语法TAT</p><blockquote><p>原来的笔记记录在石墨文档，<a href="https://shimo.im/docs/c8YrJy4obNICaWiS/" target="_blank" rel="noopener">https://shimo.im/docs/c8YrJy4obNICaWiS/</a></p></blockquote><h2 id="ID处理"><a href="#ID处理" class="headerlink" title="ID处理"></a>ID处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 获取id */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> id === <span class="string">"string"</span> ? <span class="built_in">document</span>.getElementById(id) : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="匀速动画"><a href="#匀速动画" class="headerlink" title="匀速动画"></a>匀速动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素，目标，步数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constant</span>(<span class="params">obj, target, speed</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 清除定时器</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="comment">//2.判断方向</span></span><br><span class="line">    <span class="comment">//如果现在的距离小于目标值,则往右，否则向左</span></span><br><span class="line">    <span class="keyword">let</span> dir =obj.offsetLeft&lt;target?speed:-speed;</span><br><span class="line">    <span class="comment">//3. 设置定时器</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        obj.style.left = obj.offsetLeft + dir + <span class="string">"px"</span>;</span><br><span class="line">        <span class="comment">//若超出目标值或者不到目标值</span></span><br><span class="line">        <span class="comment">//最后相减的值取绝对值后，总是小于步数的</span></span><br><span class="line">        <span class="comment">//Math.abs(dir)||speed</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(target-obj.offsetLeft)&lt;<span class="built_in">Math</span>.abs(dir))&#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">//根据目标值板正</span></span><br><span class="line">            obj.style.left =target+<span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buffer</span>(<span class="params">obj, json, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 清除定时器</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="keyword">var</span> begin = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 设置定时器</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.0 旗帜, 决定动画是否结束</span></span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 2.1 遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> json)&#123;</span><br><span class="line">            <span class="comment">// 2.2.-1 求出起始值 和 结束值</span></span><br><span class="line">            <span class="keyword">if</span>(k === <span class="string">'opacity'</span>)&#123; <span class="comment">// 透明度</span></span><br><span class="line">                begin = <span class="built_in">parseInt</span>( <span class="built_in">parseFloat</span>(getCssAttr(obj, k)) * <span class="number">100</span>);</span><br><span class="line">                end = <span class="built_in">parseInt</span>(<span class="built_in">parseFloat</span>(json[k]) * <span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'scrollTop'</span>)&#123; <span class="comment">// 滚动到头部</span></span><br><span class="line">                begin = obj.scrollTop;</span><br><span class="line">                end = <span class="built_in">parseInt</span>(json[k]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">// 正常情况</span></span><br><span class="line">                begin = <span class="built_in">parseInt</span>(getCssAttr(obj, k));</span><br><span class="line">                end = <span class="built_in">parseInt</span>(json[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2.0 求出步长</span></span><br><span class="line">            <span class="comment">//步长公式</span></span><br><span class="line">            <span class="keyword">let</span> step = (end - begin) * <span class="number">0.2</span>;</span><br><span class="line">            step = step &gt;=<span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">            <span class="comment">// 2.2.1 计算起始位置</span></span><br><span class="line">            <span class="keyword">if</span>(k === <span class="string">'opacity'</span>)&#123;</span><br><span class="line">                obj.style.opacity = (begin + step) / <span class="number">100</span>;</span><br><span class="line">                obj.style.filter = <span class="string">'alpha(opacity='</span> + (begin + end)+<span class="string">')'</span>; <span class="comment">// 针对IE</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'scrollTop'</span>)&#123;</span><br><span class="line">                obj.scrollTop = begin + step;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'zIndex'</span>)&#123;</span><br><span class="line">                obj.style[k] = json[k];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                obj.style[k] = begin + step + <span class="string">'px'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2.2 判断</span></span><br><span class="line">            <span class="keyword">if</span>(begin !== end)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.0 结束动画</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">// 开启动画组中的下一组动画</span></span><br><span class="line">            <span class="keyword">if</span>(fn)&#123; <span class="comment">// 判断有没有这个函数</span></span><br><span class="line">                fn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="js获取CSS"><a href="#js获取CSS" class="headerlink" title="js获取CSS"></a>js获取CSS</h4><p>利用 [] 访问属性 元素.style[“属性”];<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种语法的好处就是可以动态的传递参数作为属性</span></span><br><span class="line"><span class="comment">//只能获取行类标签</span></span><br><span class="line">     <span class="keyword">var</span> h = <span class="string">'height'</span>;</span><br><span class="line">     box.style[h] = <span class="number">300</span> + <span class="string">'px'</span>;</span><br><span class="line"><span class="comment">//获取外部css或页内的css</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyleAttr</span>(<span class="params">obj, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.currentStyle)&#123; <span class="comment">// IE 和 opera</span></span><br><span class="line">         <span class="keyword">return</span> obj.currentStyle[attr];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//window.getComputedStyle("元素", "伪类") （ 注意：两个选项是必须的，没有伪类 用 null 替代 ）</span></span><br><span class="line">    <span class="comment">//也可以点选，但是为了传递参数作为属性</span></span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(obj, <span class="literal">null</span>)[attr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><ul><li>在定时器事件前，先设置接收定时器的变量指向null</li><li>在定时器事件里，先要清除定时器再设置定时器，先清除是防止定时器累加<h2 id="轮播"><a href="#轮播" class="headerlink" title="轮播"></a>轮播</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3>这种不适合多图<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slider</span> (<span class="params">sliderid,olStyleClassName,imgWidth,speed,second</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//高级排他</span></span><br><span class="line">    <span class="comment">//lastIndex 选中的小圆点样式 currentIndex 小圆点索引  picIndex 图片索引</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex=<span class="number">0</span>,currentIndex=<span class="number">0</span>,picIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1. 获取需要的标签</span></span><br><span class="line">    <span class="keyword">let</span> ul=$(sliderid).children[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span>  ol=$(sliderid).children[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> list=ul.children;</span><br><span class="line">    <span class="keyword">let</span> olList= ol.children;</span><br><span class="line">    <span class="comment">// 2.克隆最后一个li标签</span></span><br><span class="line">    ul.appendChild(list[<span class="number">0</span>].cloneNode(<span class="literal">true</span>));</span><br><span class="line">    <span class="comment">// 3.动态创建小圆点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;list.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> li =<span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">        ol.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.第一个小圆点选中</span></span><br><span class="line">    olList[<span class="number">0</span>].className=olStyleClassName;</span><br><span class="line">    <span class="comment">//5.监听每个li的进入事件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;olList.length;i++)&#123;</span><br><span class="line">        <span class="comment">//5.1 每一个li绑定自己的事件</span></span><br><span class="line">        olList[i].onmouseover=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//先清除之前的选中状态，在把当前选中的索引给lastIndex</span></span><br><span class="line">            lastIndex=currentIndex;</span><br><span class="line">            olList[lastIndex].className=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">this</span>.className=olStyleClassName;</span><br><span class="line">            lastIndex=i;</span><br><span class="line">            <span class="comment">//5.2图片动起来</span></span><br><span class="line">            constant(ul,-(i * imgWidth),speed);</span><br><span class="line">            currentIndex=picIndex=i;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.定时器</span></span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    timer = setInterval(autoPlay, second);</span><br><span class="line">    <span class="comment">// 7. 清除和设置定时器</span></span><br><span class="line">    $(sliderid).onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;;</span><br><span class="line">    $(sliderid).onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        timer = setInterval(autoPlay, second);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        picIndex++;</span><br><span class="line">        currentIndex++;</span><br><span class="line">        <span class="comment">//如果图片到了最后一张</span></span><br><span class="line">        <span class="keyword">if</span> (picIndex &gt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">            ul.style.left = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//从第二张图片开始</span></span><br><span class="line">            picIndex = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        constant(ul, -(picIndex * imgWidth), speed);</span><br><span class="line">        <span class="comment">//小原点的选中</span></span><br><span class="line">        <span class="keyword">if</span> (currentIndex &gt; olList.length - <span class="number">1</span>) &#123;</span><br><span class="line">            currentIndex = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;olList.length;i++)&#123;</span><br><span class="line">            olList[i].className=<span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        olList[currentIndex].className=olStyleClassName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>两个图片宽度的位置，第一个位置显示（当前），第二位置隐藏<br><img src="/img/summary-2018.9/summary01.png" alt="轮播图"></p><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>改变透明度，循环一遍让所有的opacity动画为0，然后当前为opacity动画为1，索引++、<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opacityAutoPlay</span>(<span class="params">ulid,speed</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取所有的li标签</span></span><br><span class="line">    <span class="keyword">var</span> lis = $(ulid).getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 开始定时器</span></span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.1 改变透明度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;lis.length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> singerLi = lis[i];</span><br><span class="line">            buffer(singerLi, &#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer(lis[index], &#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 2.2 索引++</span></span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(index === lis.length)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, speed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h2><ul><li>父盒子居中<ol><li>Math.floor(屏幕宽度/子盒子宽度)=cols</li><li>子盒子的宽度*cols=父盒子的宽度</li><li>margin:0 auto;</li></ol></li><li><p>子盒子定位<br>第一行不变，其他子盒子接在第一行最矮的盒子的后面（反复）</p><ol><li>拿到所有盒子的高度。把第一行的盒子的高度放在一个数组里面（i&lt;cols,heightArr[])</li><li>在剩下的盒子里面(i&gt;=cols),找出第一行最矮的盒子的高度（Math.min(…heightArr)||Math.min.apply(this.height)）<br>2.1 找出最矮盒子的索引(遍历heightArr[],找出和第二步盒子高度一样的i返回)<br>2.2 剩下盒子定位（left=第2.1步的索引*子盒子宽度，top=最矮的盒子高度）<br>2.3 更新最矮盒子的高度 （heightArr[最矮盒子的高度]+=当前盒子的高度）</li></ol><ul><li>滚动加载图片</li></ul><ol><li>监听窗口的滚动，滚动到你需要的位置加载</li></ol><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 实现瀑布流布局</span></span><br><span class="line">    waterFull(<span class="string">"main"</span>, <span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 动态加载图片</span></span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(checkWillLoadImage())&#123;</span><br><span class="line">            <span class="comment">// 2.1 造数据</span></span><br><span class="line">            <span class="keyword">var</span> dataArr = [</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img04.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img06.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img08.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img09.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img10.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img12.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img14.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img16.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img18.jpg"</span>&#125;</span><br><span class="line">            ];</span><br><span class="line">            <span class="comment">// 2.2 创建元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;dataArr.length; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> newBox = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">                newBox.className = <span class="string">"box"</span>;</span><br><span class="line">                $(<span class="string">"main"</span>).appendChild(newBox);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> newPic = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">                newPic.className = <span class="string">"pic"</span>;</span><br><span class="line">                newBox.appendChild(newPic);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> newImg = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">                newImg.src = <span class="string">"images/"</span> + dataArr[i].src;</span><br><span class="line">                newPic.appendChild(newImg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.3 重新布局</span></span><br><span class="line">            waterFull(<span class="string">"main"</span>, <span class="string">"box"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现瀑布流布局</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterFull</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 父盒子居中</span></span><br><span class="line">    <span class="comment">// 1.1 获取所有的盒子</span></span><br><span class="line">    <span class="keyword">var</span> allBox = $(parent).getElementsByClassName(child);</span><br><span class="line">    <span class="comment">// 1.2 获取子盒子的宽度</span></span><br><span class="line">    <span class="keyword">var</span> boxWidth = allBox[<span class="number">0</span>].offsetWidth;</span><br><span class="line">    <span class="comment">// 1.3 获取屏幕的宽度</span></span><br><span class="line">    <span class="keyword">var</span> screenW = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">    <span class="comment">// 1.4 求出列数</span></span><br><span class="line">    <span class="keyword">var</span> cols = <span class="built_in">parseInt</span>(screenW / boxWidth);</span><br><span class="line">    <span class="comment">// 1.5 父盒子居中</span></span><br><span class="line">    $(parent).style.width = cols * boxWidth + <span class="string">'px'</span>;</span><br><span class="line">    $(parent).style.margin = <span class="string">"0</span></span><br><span class="line"><span class="string">    // 2. 子盒子的定位</span></span><br><span class="line"><span class="string">    // 2.1 定义高度数组</span></span><br><span class="line"><span class="string">    var heightArr = [], boxHeight = 0, minBoxHeight = 0, minBoxIndex = 0;</span></span><br><span class="line"><span class="string">    // 2.2 遍历子盒子</span></span><br><span class="line"><span class="string">    for (var i = 0; i &lt; allBox.length; i++) &#123;</span></span><br><span class="line"><span class="string">        // 2.2.1 求出每一个子盒子的高度</span></span><br><span class="line"><span class="string">        boxHeight = allBox[i].offsetHeight;</span></span><br><span class="line"><span class="string">        // 2.2.2 取出第一行盒子的高度放入高度数组</span></span><br><span class="line"><span class="string">        if (i &lt; cols) &#123; // 第一行</span></span><br><span class="line"><span class="string">            heightArr.push(boxHeight);</span></span><br><span class="line"><span class="string">        &#125; else &#123; // 剩余行</span></span><br><span class="line"><span class="string">            // 1. 取出最矮的盒子高度</span></span><br><span class="line"><span class="string">            // minBoxHeight = _.min(heightArr);</span></span><br><span class="line"><span class="string">            minBoxHeight=Math.min(...heightArr);</span></span><br><span class="line"><span class="string">            // 2. 求出最矮盒子对应的索引</span></span><br><span class="line"><span class="string">            minBoxIndex = getMinBoxIndex(heightArr, minBoxHeight);</span></span><br><span class="line"><span class="string">            // 3. 子盒子定位</span></span><br><span class="line"><span class="string">            allBox[i].style.position = "</span>absolute<span class="string">";</span></span><br><span class="line"><span class="string">            allBox[i].style.left = minBoxIndex * boxWidth + 'px';</span></span><br><span class="line"><span class="string">            allBox[i].style.top = minBoxHeight + 'px';</span></span><br><span class="line"><span class="string">            // 4. 更新数组中的高度</span></span><br><span class="line"><span class="string">            heightArr[minBoxIndex] += boxHeight;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    console.log(heightArr, minBoxHeight, minBoxIndex);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 获取数组中最矮盒子高度的索引</span></span><br><span class="line"><span class="string"> * @param arr</span></span><br><span class="line"><span class="string"> * @param val</span></span><br><span class="line"><span class="string"> * @returns &#123;number&#125;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function getMinBoxIndex(arr, val) &#123;</span></span><br><span class="line"><span class="string">    for(var i=0; i&lt;arr.length; i++)&#123;</span></span><br><span class="line"><span class="string">        if(arr[i] === val)&#123;</span></span><br><span class="line"><span class="string">            return i;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 判断是否具备加载图片的条件</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function checkWillLoadImage() &#123;</span></span><br><span class="line"><span class="string">    // 1. 获取最后一个盒子</span></span><br><span class="line"><span class="string">    var allBox = document.getElementsByClassName("</span>box<span class="string">");</span></span><br><span class="line"><span class="string">    var lastBox = allBox[allBox.length - 1];</span></span><br><span class="line"><span class="string">    // 2. 求出最后一个盒子自身高度的一半 + offsetTop</span></span><br><span class="line"><span class="string">    var lastBoxDis = lastBox.offsetHeight * 0.5 + lastBox.offsetTop;</span></span><br><span class="line"><span class="string">    // 3. 求出屏幕的高度</span></span><br><span class="line"><span class="string">    var screenW = document.body.clientHeight || document.documentElement.clientHeight;</span></span><br><span class="line"><span class="string">    // 4. 求出页面偏离浏览器的高度</span></span><br><span class="line"><span class="string">    var scrollTop = scroll().top;</span></span><br><span class="line"><span class="string">    return lastBoxDis &lt;= screenW + scrollTop;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>jq<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当页面加载完毕</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'load'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//1.实现瀑布流布局</span></span><br><span class="line">waterFall();</span><br><span class="line"><span class="comment">//2.滚动加载</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//判断是否加载</span></span><br><span class="line"><span class="keyword">if</span> (checkWillLoad())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">////创造假数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="string">'dataImg'</span>:[&#123;<span class="string">'img'</span>:<span class="string">'23.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'24.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'25.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'26.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'27.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'28.jpg'</span>&#125;]&#125;;</span><br><span class="line"><span class="comment">//遍历创建盒子</span></span><br><span class="line">$.each(data.dataImg,<span class="function"><span class="keyword">function</span> (<span class="params">index,value</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个div标签 设置它的类为'box' 添加到'main'里面去</span></span><br><span class="line"><span class="keyword">var</span> newBox = $(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'box'</span>).appendTo($(<span class="string">'#main'</span>));</span><br><span class="line">    <span class="keyword">var</span> newPic = $(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'pic'</span>).appendTo($(newBox));</span><br><span class="line">        <span class="comment">//创建img  取出遍历的对象value的img属性对应的值</span></span><br><span class="line">     $(<span class="string">'&lt;img&gt;'</span>).attr(<span class="string">'src'</span>,<span class="string">'images/'</span>+$(value).attr(<span class="string">'img'</span>)).appendTo($(newPic));</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//1.实现瀑布流布局</span></span><br><span class="line">        waterFall();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//实现瀑布流布局</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">waterFall</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//拿到所有的盒子</span></span><br><span class="line">        <span class="keyword">var</span> allBox = $(<span class="string">'#main &gt; .box'</span>);</span><br><span class="line">        <span class="comment">//取出其中一个盒子的宽度</span></span><br><span class="line">        <span class="keyword">var</span> boxWidth = $(allBox).eq(<span class="number">0</span>).outerWidth();</span><br><span class="line">        <span class="comment">//取出屏幕的高度</span></span><br><span class="line">        <span class="keyword">var</span> screenWidth = $(<span class="built_in">window</span>).width();</span><br><span class="line">        <span class="comment">//求出列数 //取整函数取整</span></span><br><span class="line">        <span class="keyword">var</span> cols = <span class="built_in">Math</span>.floor( screenWidth/boxWidth);</span><br><span class="line">        <span class="comment">//父标签居中</span></span><br><span class="line">        $(<span class="string">'#main'</span>).css(&#123;</span><br><span class="line">        <span class="string">'width'</span>:cols * boxWidth + <span class="string">'px'</span>,</span><br><span class="line">        <span class="string">'margin'</span>:<span class="string">'0 auto'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//对子盒子定位</span></span><br><span class="line">        <span class="keyword">var</span> heightArr = [];</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        $.each(allBox,<span class="function"><span class="keyword">function</span> (<span class="params">index,value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//取出单独盒子的高度</span></span><br><span class="line">        <span class="keyword">var</span> boxHeight = $(value).outerHeight();</span><br><span class="line">        <span class="comment">//判断是否第一行</span></span><br><span class="line">        <span class="keyword">if</span>(index &lt; cols)</span><br><span class="line">        &#123;</span><br><span class="line">        heightArr[index] = boxHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">//剩余的盒子要瀑布流布局</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//求出最矮的盒子高度</span></span><br><span class="line">        <span class="keyword">var</span> minBoxHeight = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,heightArr);</span><br><span class="line">        <span class="comment">//取出最矮高度对应的索引  封装了js的这个方法</span></span><br><span class="line">        <span class="keyword">var</span> minBoxIndex = $.inArray(minBoxHeight,heightArr);</span><br><span class="line">        <span class="comment">//定位</span></span><br><span class="line">        $(value).css(&#123;</span><br><span class="line">        <span class="string">'position'</span>:<span class="string">'absolute'</span>,</span><br><span class="line">        <span class="string">'top'</span>:minBoxHeight + <span class="string">'px'</span>,</span><br><span class="line">        <span class="string">'left'</span>:minBoxIndex * boxWidth + <span class="string">'px'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//更新数组中最矮的高度</span></span><br><span class="line">        heightArr[minBoxIndex] += boxHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否符合加载条件</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkWillLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//直接取出最后一个盒子</span></span><br><span class="line">        <span class="keyword">var</span> lastBox = $(<span class="string">'#main &gt; div'</span>).last();</span><br><span class="line">        <span class="comment">//取出最后一个盒子高度的一半 + 头部偏离的位置</span></span><br><span class="line">        <span class="keyword">var</span> lastBoxDis = $(lastBox).outerHeight() + $(lastBox).offset().top;</span><br><span class="line">        <span class="comment">//求出浏览器的高度</span></span><br><span class="line">        <span class="keyword">var</span> clientHeight = $(<span class="built_in">window</span>).height();</span><br><span class="line">        <span class="comment">//求出页面偏离浏览器高度</span></span><br><span class="line">        <span class="keyword">var</span> scrollTopHeight = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">        <span class="comment">//比较返回</span></span><br><span class="line">        <span class="keyword">return</span> lastBoxDis &lt;= clientHeight + scrollTopHeight;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h4 id="margin-0-auto"><a href="#margin-0-auto" class="headerlink" title="margin:0 auto"></a>margin:0 auto</h4><ol><li>块级元素</li><li>给定要居中的块级元素的宽度。</li><li>所有元素也可以通过对父元素设置<code>text-align：center；</code>的方式来实现居中。而对于块元素来说，对要居中的元素自身进行设置<code>text-align:center</code>也能实现居中</li><li><code>margin:0 auto;</code>可以使盒子居中，<code>text-align:center;</code>可以使文本居中，<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4>onresize举列子<br>窗口大小一变化就执行，太过灵敏，所以需要阻止<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用定时器</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    <span class="comment">// 节流</span></span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        waterFull(<span class="string">'main'</span>, <span class="string">'box'</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装之后的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(fn, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="apply-call"><a href="#apply-call" class="headerlink" title="apply/call"></a>apply/call</h4><p>这个面试中常考到，现在只做初步了解<br>(<a href="https://www.cnblogs.com/gaowx/p/4837687.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaowx/p/4837687.html</a> )</p><ul><li>改变函数的this指向</li><li>apply可以改变传递给函数参数的形式<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newDate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//声明日期对象，里面可以设置参数表示其他时间</span></span><br><span class="line">  <span class="keyword">let</span> date =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="comment">//获取时间里面的年</span></span><br><span class="line">  date.getFullYear()</span><br><span class="line">  <span class="comment">//月0-11</span></span><br><span class="line">  date.getMonth()+<span class="number">1</span></span><br><span class="line">  <span class="comment">//日1-31</span></span><br><span class="line">  date.getDate()</span><br><span class="line">  <span class="comment">//获取星期0-6</span></span><br><span class="line">  data.Day</span><br><span class="line">  <span class="comment">//设置某一天</span></span><br><span class="line">  date.setDate（day）</span><br><span class="line">  <span class="comment">//时0-23</span></span><br><span class="line">  date.getHours()</span><br><span class="line">  <span class="comment">//分0-59</span></span><br><span class="line">  date.getMinutes()</span><br><span class="line">  <span class="comment">//秒0-59</span></span><br><span class="line">  date.getSeconds()</span><br><span class="line">  <span class="comment">//获取毫秒</span></span><br><span class="line">  date.getMilliSeconds()</span><br><span class="line">  <span class="comment">//时间戳</span></span><br><span class="line">  date.getTime()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ms转化时间"><a href="#ms转化时间" class="headerlink" title="ms转化时间"></a>ms转化时间</h3><p><img src="/img/summary-2018.9/data.jpg" alt="data"></p><h2 id="cookie封装"><a href="#cookie封装" class="headerlink" title="cookie封装"></a>cookie封装</h2><p>封装成插件，引入该文件后，$.addCookie(key,value,day,path,domain)来引用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$,window</span>) </span>&#123;</span><br><span class="line">    $.extend(&#123;</span><br><span class="line">        addCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">addCookie</span>(<span class="params">key,value,day,path,domain</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//1.处理默认保存的路径</span></span><br><span class="line">        <span class="keyword">var</span> index=<span class="built_in">window</span>.location.pathname.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line">        <span class="keyword">var</span> currentPath=<span class="built_in">window</span>.location.pathname.slice(<span class="number">0</span>,index)</span><br><span class="line">        path=path||currentPath</span><br><span class="line">        <span class="comment">//2.处理默认domain</span></span><br><span class="line">        domain=domain||<span class="built_in">document</span>.domain</span><br><span class="line">        <span class="comment">//3.处理默认的过期时间</span></span><br><span class="line">        <span class="keyword">if</span>(!day)&#123;</span><br><span class="line">          <span class="built_in">document</span>.cookie=key+<span class="string">"="</span>+value+<span class="string">";path="</span>+path+<span class="string">";domain="</span>+domain+<span class="string">';'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> date =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            date.setDate(date.getDate()+day)</span><br><span class="line">            <span class="built_in">document</span>.cookie=key+<span class="string">"="</span>+value+<span class="string">";expires="</span>+date.toGMTString()+<span class="string">";path="</span>+path+<span class="string">";domain="</span>+domain+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        getCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> res=<span class="built_in">document</span>.cookie.split(<span class="string">';'</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++)&#123;</span><br><span class="line">        <span class="comment">//把key和value切割</span></span><br><span class="line">            <span class="keyword">var</span> temp=res[i].split(<span class="string">'='</span>)</span><br><span class="line">            <span class="comment">//前后可能有空格，把空格删除</span></span><br><span class="line">            <span class="keyword">if</span>(temp[<span class="number">0</span>].trim()===key)&#123;</span><br><span class="line">                <span class="keyword">return</span> temp[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        delCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">delCookie</span>(<span class="params">key, path</span>) </span>&#123;</span><br><span class="line">         <span class="comment">//默认情况下只能删除默认路径中保存的cookie，如果要删除指定路径保存的cookie，要把路径值传出去</span></span><br><span class="line">         <span class="comment">//设置过期时间为-1</span></span><br><span class="line">                addCookie(key, getCookie(key), <span class="number">-1</span>, path)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery,<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><h2 id="动态添加的元素绑定事件"><a href="#动态添加的元素绑定事件" class="headerlink" title="动态添加的元素绑定事件"></a>动态添加的元素绑定事件</h2><ul><li><p>delegate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;ul&apos;).delegate(&apos;li&apos;,&apos;click&apos;,function()&#123;</span><br><span class="line">//操作的还是li</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>onclick事件<br>在动态添加数据的时候，就给元素绑定onclick事件</p></li><li>on（）<br>常用  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//把动态添加的元素写在on里面，如果调用的函数是外部定义好的，则在调用的时候不加（）</span><br><span class="line">//不然会跳过点击事件直接执行函数</span><br><span class="line">$(&quot;父元素或祖辈元素&quot;).on(&quot;click&quot;,&quot;动态添加的元素&quot;,function()&#123;</span><br><span class="line">$(this).css(&quot;border&quot;,&quot;5px solid #000&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h3><p><a href="http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css" target="_blank" rel="noopener">http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css</a></p><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拿到select对象：</span></span><br><span class="line"><span class="keyword">var</span> myselect=<span class="built_in">document</span>.getElementById(<span class="string">"select"</span>);</span><br><span class="line"><span class="comment">//拿到选中项的索引</span></span><br><span class="line"><span class="keyword">var</span> index=myselect.selectedIndex ; <span class="comment">// selectedIndex代表的是你所选中项的index</span></span><br><span class="line"><span class="comment">//拿到选中项options的value：</span></span><br><span class="line">myselect.options[index].value;</span><br><span class="line"><span class="comment">//拿到选中项options的text：</span></span><br><span class="line">myselect.options[index].text;</span><br><span class="line"><span class="comment">//拿到选中项的其他值，比如这里的url：</span></span><br><span class="line"> myselect.options[index].getAttribute(<span class="string">'url'</span>);</span><br><span class="line"><span class="comment">//jquery</span></span><br><span class="line">var options=$(“#select option:selected”); //获取选中的项</span><br><span class="line">alert(options.val()); <span class="comment">//拿到选中项的值</span></span><br><span class="line">alert(options.text()); <span class="comment">//拿到选中项的文本</span></span><br><span class="line">alert(options.attr(<span class="string">'url'</span>)); <span class="comment">//拿到选中项的url值</span></span><br><span class="line"><span class="comment">//设置</span></span><br><span class="line"><span class="comment">//设置value为pxx的项选中</span></span><br><span class="line">$(<span class="string">".selector"</span>).val(<span class="string">"pxx"</span>)</span><br><span class="line"><span class="comment">//设置text为pxx的项选中</span></span><br><span class="line">$(<span class="string">".selector"</span>).find(<span class="string">"option[text='pxx']"</span>).attr(<span class="string">"selected"</span>,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="H5-datalist"><a href="#H5-datalist" class="headerlink" title="H5 datalist"></a>H5 datalist</h3><p>datalist 只是列表<br>赋值取值还是通过input.样式等都在input上操作<br><a href="https://www.zhangxinxu.com/wordpress/2013/03/html5-datalist-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8-%E5%8F%AF%E8%A1%8C%E6%80%A7/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2013/03/html5-datalist-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8-%E5%8F%AF%E8%A1%8C%E6%80%A7/</a></p><h4 id="邮箱的自动补全"><a href="#邮箱的自动补全" class="headerlink" title="邮箱的自动补全"></a>邮箱的自动补全</h4><p>HTML代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">邮箱：&lt;input type=&quot;email&quot; id=&quot;email&quot; list=&quot;emailList&quot; name=&quot;off_autocomplete&quot; /&gt;</span><br><span class="line">&lt;datalist id=&quot;emailList&quot;&gt;</span><br><span class="line">//其中*为占位符，当文本框输入内容的时候，*替换成邮箱地址的前半部分，于是，动态邮件地址提示的效果就实现了</span><br><span class="line">    &lt;option value=&quot;*@qq.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@163.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@gmail.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@yahoo.com.cn&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@126.com&quot;&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br></pre></td></tr></table></figure></p><p>JS代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eleList = <span class="built_in">document</span>.getElementById(<span class="string">"emailList"</span>)</span><br><span class="line">    , eleMail = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>)</span><br><span class="line">    , htmlListInit = <span class="string">''</span>, arrEmailList = [];</span><br><span class="line"><span class="keyword">if</span> (eleMail &amp;&amp; eleList &amp;&amp; (htmlListInit = eleList.innerHTML) !== <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// 得到类似["qq.com", "163.com", "gmail.com", ...]的数据</span></span><br><span class="line">    arrEmailList = [].slice.call(eleList.getElementsByTagName(<span class="string">"option"</span>)).map(<span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> option.value.replace(<span class="string">"*@"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    eleMail.fnListReplace = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arrValue = <span class="keyword">this</span>.value.trim().split(<span class="string">"@"</span>);</span><br><span class="line">        <span class="comment">// 修复FireFox浏览器下无限input问题</span></span><br><span class="line">        <span class="comment">// 如果值不完全匹配某option值，执行动态替换</span></span><br><span class="line">        <span class="keyword">if</span> (arrValue.length !== <span class="number">2</span> || arrEmailList.indexOf(arrValue[<span class="number">1</span>]) === <span class="number">-1</span>) &#123;</span><br><span class="line">            eleList.innerHTML = htmlListInit.replace(<span class="regexp">/\*/g</span>, arrValue[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 绑定输入事件侦听</span></span><br><span class="line">    eleMail.addEventListener(<span class="string">"input"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fnListReplace.call(<span class="keyword">this</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//  载入即匹配</span></span><br><span class="line">    eleMail.fnListReplace.call(eleMail).focus();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    eleList = <span class="built_in">document</span>.createElement(<span class="string">"datalist"</span>);</span><br><span class="line">    eleList.innerHTML = <span class="string">'&lt;p class=sorry&gt;抱歉，当前浏览器不支持HTML5 datalist.&lt;/p&gt;'</span>;</span><br><span class="line">    eleMail.parentNode.appendChild(eleList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="jquery-editable-select控件"><a href="#jquery-editable-select控件" class="headerlink" title="jquery.editable-select控件"></a>jquery.editable-select控件</h4><p>引入<br>jquery.editable-select.css<br>jquery.editable-select.js<br>调用方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#editable-select'</span>).editableSelect(&#123;</span><br><span class="line">    bg_iframe: <span class="literal">true</span>, <span class="comment">//是否加iframe</span></span><br><span class="line">    case_sensitive: <span class="literal">false</span>,</span><br><span class="line">    items_then_scroll: <span class="number">10</span> ,<span class="comment">//设置下拉选项的数目</span></span><br><span class="line">    isFilter:<span class="literal">false</span>/<span class="literal">true</span>,    <span class="comment">//是否根据条件过滤下拉选项</span></span><br><span class="line">    onCreate:,            <span class="comment">//当输入时触发</span></span><br><span class="line">    onShow：,             <span class="comment">//当下拉时触发</span></span><br><span class="line">    onHide：,              <span class="comment">//当下拉框隐藏时触发</span></span><br><span class="line">    onSelect：,            <span class="comment">//当下拉框中的选项被选中时触发</span></span><br><span class="line">    effects:<span class="keyword">default</span>/slide/fade， <span class="comment">//动画效果</span></span><br><span class="line">    duration：                   <span class="comment">//动画效果的时间</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;summary-2018-9&quot;&gt;&lt;a href=&quot;#summary-2018-9&quot; class=&quot;headerlink&quot; title=&quot;summary-2018-9&quot;&gt;&lt;/a&gt;summary-2018-9&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;这是在学会搭建博客之后的第一篇博客
      
    
    </summary>
    
    
      <category term="summary" scheme="http://yoursite.com/tags/summary/"/>
    
  </entry>
  
</feed>
