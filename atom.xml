<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>biubiu的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-13T15:02:56.884Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>biubiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>demo_todoList</title>
    <link href="http://yoursite.com/2018/10/13/todolist/"/>
    <id>http://yoursite.com/2018/10/13/todolist/</id>
    <published>2018-10-13T14:51:07.000Z</published>
    <updated>2018-10-13T15:02:56.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="demo-todoList"><a href="#demo-todoList" class="headerlink" title="demo_todoList"></a>demo_todoList</h1><hr><p><img src="/img/vue/todoList.png" width="85%"></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>将数据循坏到页面</li><li>敲回车时添加新数据（需要添加isSelected属性）</li><li>删除功能</li><li>计算当前没有被选中的，选中的有删除样式</li><li>双击任务可以修改任务,已经完成的不可以</li><li>自定义输入框聚焦</li><li>回车或者失去焦点的时候修改成功</li><li>计算属性 根据hash展示todolist</li><li>数据永久化，hash单页刷新</li></ul><hr><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><ul><li>监控todos的变化,当变化时更新数据</li><li>watch:todos(){} 只能监控一层的数据变化（删减）</li><li>watch:todos:handler(){},deep:true 深度监控<h3 id="directivess"><a href="#directivess" class="headerlink" title="directivess"></a>directivess</h3></li><li>自定义指令，指令是操作的dom</li><li>XXX(el,bindings){} 名字需要和v-XXX的相同，el指代的是当前的dom，bindings参数</li></ul><hr><p>github: <a href="https://github.com/biubiuins/demo_todolist" target="_blank" rel="noopener">https://github.com/biubiuins/demo_todolist</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;demo-todoList&quot;&gt;&lt;a href=&quot;#demo-todoList&quot; class=&quot;headerlink&quot; title=&quot;demo_todoList&quot;&gt;&lt;/a&gt;demo_todoList&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/img/vue/to
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://yoursite.com/2018/10/12/git/"/>
    <id>http://yoursite.com/2018/10/12/git/</id>
    <published>2018-10-12T06:13:03.000Z</published>
    <updated>2018-10-15T05:25:31.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git的基本操作"><a href="#git的基本操作" class="headerlink" title="git的基本操作"></a>git的基本操作</h1><hr><h2 id="初次配置"><a href="#初次配置" class="headerlink" title="初次配置"></a>初次配置</h2><p>第一步需要配置用户名和邮箱地址，因为git为每一次提交记录名字和邮箱地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &apos;runoob&apos;</span><br><span class="line">$ git config --global user.email test@runoob.com</span><br></pre></td></tr></table></figure></p><h3 id="ssh-key"><a href="#ssh-key" class="headerlink" title="ssh key"></a>ssh key</h3><ol><li><p>生成一对shh key（id_rsa私钥，id_rsa.pub公钥）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p> 注：在主目录下生成的密钥在 /c/Users/用户名/.ssh/id_rsa 里</p></li><li><p>查看公钥内容（需在.ssh目录下执行）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>复制密钥内容添加到 github 上</p></li><li><p>使用ssh协议上传文件到仓库</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot; &quot;</span><br><span class="line">git remote add origin git@github.com:...</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p> 注：若在创建新仓库时有readme.md 文件会上传失败</p></li></ol><h2 id="新建版本库"><a href="#新建版本库" class="headerlink" title="新建版本库"></a>新建版本库</h2><ol><li>git里面先进入新建库的文件夹下</li><li><p>初始化库<br>初始化目录，目录下回出现一个.git的目录，该目录包含了资源的所有元数据</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git init 目录名</span><br></pre></td></tr></table></figure></li><li><p>添加文件到暂存区<br>将当前目录下几个文件纳入版本控制，需要先用git add 命令告诉git开始对这些文件进行跟踪</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .//添加当前项目的所有文件</span><br><span class="line">git add README //添加名为README的文件</span><br><span class="line">git add -A 所有修改的内容添加到缓存区</span><br></pre></td></tr></table></figure></li><li><p>增加到版本库中<br>使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit -m将缓存区内容添加到仓库中。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -a 跳过这一步</span><br><span class="line">git commit -m&quot;版本留言描述&quot;</span><br></pre></td></tr></table></figure></li><li><p>连接远程仓库（现在GitHub上面新建仓库）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 仓库地址</span><br></pre></td></tr></table></figure></li><li><p>讲本地仓库推送到远程库上</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br><span class="line">git push -u origin master //首次执行，说明上传到仓库的master分支上</span><br></pre></td></tr></table></figure></li></ol><hr><p>问题：![rejected] master -&gt; master (fetch first)<br>解决办法：1. 先执行<code>git pull</code>.</p><ol start="2"><li>然后再执行git push –force origin master替换原先的 git push -u origin master<h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2></li></ol><p>先把别人的fork进自己的库里面</p><ol><li><p>克隆仓库到指定目录</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//自己在本地进入需要克隆进的文件夹下执行下面第一条指令</span><br><span class="line">git clone 仓库地址</span><br><span class="line">git clone 仓库地址 本地目录</span><br></pre></td></tr></table></figure></li><li><p>add commit push</p></li></ol><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ol><li><p>本地删除文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//或者直接在文件管理器中把没用的文件删了</span><br><span class="line">//需要git进入文件夹下</span><br><span class="line">$ rm test.txt</span><br></pre></td></tr></table></figure><p> Git知道你删除了文件，这个时候只是本地删除了文件，而版本库里面还有文件，所以可以恢复文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure></li><li><p>远程库删除文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm test.txt</span><br></pre></td></tr></table></figure><p> 记得还需要commit</p><hr><p> 我的石墨文档：<a href="https://shimo.im/docs/2Eg0gszciPEQBPxG/" target="_blank" rel="noopener">https://shimo.im/docs/2Eg0gszciPEQBPxG/</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git的基本操作&quot;&gt;&lt;a href=&quot;#git的基本操作&quot; class=&quot;headerlink&quot; title=&quot;git的基本操作&quot;&gt;&lt;/a&gt;git的基本操作&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;初次配置&quot;&gt;&lt;a href=&quot;#初次配置&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>express学习笔记</title>
    <link href="http://yoursite.com/2018/10/12/express%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/12/express学习笔记/</id>
    <published>2018-10-12T06:09:06.000Z</published>
    <updated>2018-10-12T06:36:03.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="express-学习笔记"><a href="#express-学习笔记" class="headerlink" title="express 学习笔记"></a>express 学习笔记</h1><hr><h2 id="搭建简单服务器"><a href="#搭建简单服务器" class="headerlink" title="搭建简单服务器"></a>搭建简单服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//express() 是一个由 express 模块导出的入口（top-level）函数</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">//创建一个express应用实例名app</span></span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="comment">// 设置端口号：3000</span></span><br><span class="line"><span class="comment">//process.env.PORT：读取当前目录下环境变量port的值</span></span><br><span class="line"><span class="keyword">let</span> port = process.env.PORT || <span class="number">3000</span> ;</span><br><span class="line"><span class="comment">//在端口号上开启服务</span></span><br><span class="line">app.listen(port,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="app-listen-port-hostname-backlog-callback"><a href="#app-listen-port-hostname-backlog-callback" class="headerlink" title="app.listen(port, [hostname], [backlog], [callback])"></a>app.listen(port, [hostname], [backlog], [callback])</h3><p>类似于node中的http.Server.listen()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置端口号：3000</span></span><br><span class="line"><span class="comment">//process.env.PORT：读取当前目录下环境变量port的值</span></span><br><span class="line"><span class="keyword">let</span> port = process.env.PORT || <span class="number">3000</span> ;</span><br><span class="line"><span class="comment">//在端口号上开启服务</span></span><br><span class="line">app.listen(port,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>服务器启动时候，<br>默认端口3000：node app.js<br>设置端口8080：PORT=8080 node app.js</p><h3 id="app-set-name-value"><a href="#app-set-name-value" class="headerlink" title="app.set(name,value)"></a>app.set(name,value)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 views 文件夹为存放视图文件的目录, 即存放模板文件的地方,__dirname 为全局变量,存储当前正在执行的脚本所在的目录。</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">"views"</span>,<span class="string">"./views"</span>);</span><br><span class="line"><span class="comment">//设置使用的模板引擎</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs’)</span></span><br><span class="line"><span class="string">app.set("view engine","jade")</span></span><br><span class="line"><span class="string">npm install --save express-art-template</span></span><br><span class="line"><span class="string">//设置art模板引擎，后缀为art</span></span><br><span class="line"><span class="string">app.engine('</span>art<span class="string">', require('</span>express-art-template<span class="string">'));</span></span><br></pre></td></tr></table></figure><h3 id="app-get-name"><a href="#app-get-name" class="headerlink" title="app.get(name)"></a>app.get(name)</h3><p>返回name的value值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例一</span></span><br><span class="line">app.get(<span class="string">'title'</span>);</span><br><span class="line"><span class="comment">// =&gt; undefined</span></span><br><span class="line">app.set(<span class="string">'title'</span>, <span class="string">'My Site'</span>);</span><br><span class="line">app.get(<span class="string">'title'</span>);</span><br><span class="line"><span class="comment">// =&gt; "My Site"</span></span><br><span class="line"><span class="comment">//实例二</span></span><br><span class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"server start"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="app-get-path-callback-callback-…"><a href="#app-get-path-callback-callback-…" class="headerlink" title="app.get(path, callback [, callback …])"></a>app.get(path, callback [, callback …])</h3><h3 id="app-all-path-callback-callback-…"><a href="#app-all-path-callback-callback-…" class="headerlink" title="app.all(path, callback [, callback …])"></a>app.all(path, callback [, callback …])</h3><p>这种方法就像标准的app.METHOD()方法, 除了它匹配所有HTTP动词。<br>访问path路径的所有方法执行的回调函数.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//* 表示匹配所有的路径</span></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.end(req.method + <span class="string">'user'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一般放在最后面防止前面的被覆盖</span></span><br></pre></td></tr></table></figure></p><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'hello world'</span>);</span><br><span class="line">  res.status(<span class="number">404</span>).send(错误请求)<span class="comment">//访问这个路径是设定状态码为404</span></span><br><span class="line">  <span class="comment">//通过res.send（）接口向客户端发送hello world，send只能响应一次，意思是只能出现一个send</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>res.send（）只能出现一次<br>如果要响应多次，用node原生的write和end，但是如果只有write会处于一个挂起状态<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.write(<span class="string">'hello world'</span>);</span><br><span class="line">  res.write(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>res.send有结束响应的作用</li><li>res.write没有结束响应的作用，需要res.end结束中间件挂起<h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3>下表中响应对象（res）的方法向客户端返回响应，终结请求响应的循环。如果在路由句柄中一个方法也不调用，来自客户端的请求会一直挂起。<br><img src="/img/express/response.jpg" width="80%"><h4 id="res-render"><a href="#res-render" class="headerlink" title="res.render()"></a>res.render()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 views 文件夹为存放视图文件的目录, 即存放模板文件的地方,__dirname 为全局变量,存储当前正在执行的脚本所在的目录。</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">"views"</span>,<span class="string">"./views"</span>);</span><br><span class="line"><span class="comment">//第一个是渲染的views文件夹下面的index，第二个是传递的数据,注意需要设置模板引擎</span></span><br><span class="line">res.render(<span class="string">"index"</span>,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="res-setHeader"><a href="#res-setHeader" class="headerlink" title="res.setHeader()"></a>res.setHeader()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//Content-Type的作用 该实体头的作用是让服务器告诉浏览器它发送的数据属于什么文件类型。</span><br><span class="line">res.setHeader(&quot;Content-Type&quot;,&apos;text/html;charset=utf-8&apos;)</span><br></pre></td></tr></table></figure><h4 id="res-redirect"><a href="#res-redirect" class="headerlink" title="res.redirect()"></a>res.redirect()</h4><p>调用redirect()方法后，其后的代码都不会被执行。<br>而使用redirect()设置的状态码不是301或302也不会发生跳转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.redirect([status,] path)</span><br><span class="line">//重定义到path所指定的URL，重定向时可以同时指定HTTP状态码，不指定状态码默认为302</span><br></pre></td></tr></table></figure></p><h4 id="res-location"><a href="#res-location" class="headerlink" title="res.location()"></a>res.location()</h4><p>location()方法本质上是调用了ServerResponse对象的setHeader()方法，但并没有设置状态码。<br>使用location()设置头信息，而不设置状态码或状态码不是301或302，并不会发生重定向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.location(path)</span><br></pre></td></tr></table></figure></p><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p><img src="/img/express/request.jpg" alt="response"></p><h4 id="req-query"><a href="#req-query" class="headerlink" title="req.query"></a>req.query</h4><p>处理 get 请求，获取 get 请求参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /search?q=tobi+ferret</span></span><br><span class="line">req.query.q</span><br><span class="line"><span class="comment">// =&gt; "tobi ferret"</span></span><br><span class="line"><span class="comment">// GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse</span></span><br><span class="line">req.query.order</span><br><span class="line"><span class="comment">// =&gt; "desc"</span></span><br><span class="line">req.query.shoe.color</span><br><span class="line"><span class="comment">// =&gt; "blue"</span></span><br><span class="line">req.query.shoe.type</span><br><span class="line"><span class="comment">// =&gt; "converse"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-body"><a href="#req-body" class="headerlink" title="req.body"></a>req.body</h4><p>处理 post 请求，获取 post 请求体<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// POST user[name]=tobi&amp;user[email]=tobi@learnboost.com</span></span><br><span class="line">req.body.user.name</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line">req.body.user.email</span><br><span class="line"><span class="comment">// =&gt; "tobi@learnboost.com"</span></span><br><span class="line"><span class="comment">// POST &#123; "name": "tobi" &#125;</span></span><br><span class="line">req.body.name</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-params"><a href="#req-params" class="headerlink" title="req.params"></a>req.params</h4><p>处理 /:xxx 形式的 get 或 post 请求，获取请求参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /user/tj</span></span><br><span class="line">req.params.name</span><br><span class="line"><span class="comment">// =&gt; "tj"</span></span><br><span class="line"><span class="comment">// GET /file/javascripts/jquery.js</span></span><br><span class="line">req.params[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// =&gt; "javascripts/jquery.js"</span></span><br></pre></td></tr></table></figure></p><h4 id="req-param-name"><a href="#req-param-name" class="headerlink" title="req.param(name)"></a>req.param(name)</h4><p>处理 get 和 post 请求，但查找优先级由高到低为 req.params→req.body→req.query<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ?name=tobi</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line"><span class="comment">// POST name=tobi</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br><span class="line"><span class="comment">// /user/tobi for /user/:name</span></span><br><span class="line">req.param(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// =&gt; "tobi"</span></span><br></pre></td></tr></table></figure></p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>用于客户端与服务器路由匹配之前的中间操作，正常中间件放在路由上面，中间件通过next()往下走。</p><h4 id="app-use（-path-function）"><a href="#app-use（-path-function）" class="headerlink" title="app.use（[path],function）"></a>app.use（[path],function）</h4><p>利用express托管静态文件<br>node.js不能通过目录来引入文件，而express可以，public为静态目录<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置public文件夹为存放静态文件的目录。</span></span><br><span class="line"><span class="keyword">let</span> path=<span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="comment">//ex4里面唯一的内置中间件</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br></pre></td></tr></table></figure></p><p>一个中间件处理器，请求来了，让那些中间件先处理一遍</p><ul><li>没有挂载路径的中间件，应用的每个请求都会执行该中间件</li><li>挂载至 /path 的中间件，任何指向 /path 的请求都会执行它<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(&quot;/name&quot;,function(req,res,next)&#123;</span><br><span class="line">res.setHeader(&quot;Content-Type&quot;,&apos;text/html;charset=utf-8&apos;)</span><br><span class="line">next();</span><br><span class="line">&#125;)</span><br><span class="line">app.get(&quot;/name/n&quot;,function(req,res)&#123;</span><br><span class="line">&#125;)</span><br><span class="line">//也可以匹配到，在执行get请求/name/n时先执行上面的中间件</span><br></pre></td></tr></table></figure></li></ul><h4 id="错误中间件"><a href="#错误中间件" class="headerlink" title="错误中间件"></a>错误中间件</h4><p>错误处理中间件和其他中间件定义类似，只是必须要使用 4 个参数(err, req, res, next)。即使不需要 next 对象，也必须在签名中声明它，否则中间件会被识别为一个常规中间件，不能处理错误。遇见错误之后直接执行错误中间件。<br>错误处理中间件应当在在其他 app.use() 和路由调用之后才能加载，一般放在路由的最底部，比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> methodOverride = <span class="built_in">require</span>(<span class="string">'method-override'</span>);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line">app.use(methodOverride());</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">'Something broke!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="应用生成器"><a href="#应用生成器" class="headerlink" title="应用生成器"></a>应用生成器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">$ npm install express-generator -g</span><br><span class="line"><span class="comment">//view=XXX 使用引擎名字  myapp项目名称</span></span><br><span class="line">$ express --view=pug myapp</span><br><span class="line"><span class="comment">//安装所有依赖</span></span><br><span class="line">$ cd myapp</span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动myapp项目</span></span><br><span class="line">$ set DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure><hr><p>我的石墨文档链接：<a href="https://shimo.im/docs/TXeewzaE8Jsdgn0I/" target="_blank" rel="noopener">https://shimo.im/docs/TXeewzaE8Jsdgn0I/</a><br>练习的简易聊天室连接：<a href="https://github.com/biubiuins/demo_chat" target="_blank" rel="noopener">https://github.com/biubiuins/demo_chat</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;express-学习笔记&quot;&gt;&lt;a href=&quot;#express-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;express 学习笔记&quot;&gt;&lt;/a&gt;express 学习笔记&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;搭建简单服务器&quot;&gt;&lt;a href=&quot;#搭
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>project_email</title>
    <link href="http://yoursite.com/2018/10/11/project-email/"/>
    <id>http://yoursite.com/2018/10/11/project-email/</id>
    <published>2018-10-11T07:16:32.000Z</published>
    <updated>2018-10-12T06:37:09.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="邮件收发项目"><a href="#邮件收发项目" class="headerlink" title="邮件收发项目"></a>邮件收发项目</h2><p>大二上开始学html，css，js之后做的暑假做的前端页面，很感谢老师可以给一个练手的机会，在做的过程中发现了很多问题，以及项目完成之后的收获。<br>&nbsp;&nbsp;&nbsp;&nbsp;虽然是一个很简单的界面，但是之前学习的时候不太仔细，也没有demo练习，还是做的磕磕绊绊，还好最后做的差不多了。TAT<br>&nbsp;&nbsp;针对过程中的问题，阅读了很多关于语法规范的文章，js，jq又重新学习了一遍（练习了很多），大二下期基本在学习之中度过的。希望在以后的项目中可以有所进步，彻底的实现前后端分离！！！</p><h2 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h2><ul><li>完成时间：大二上期寒假  2018-3月左右</li><li>bootsrap框架，layui框架，jquery</li></ul><h2 id="项目不足"><a href="#项目不足" class="headerlink" title="项目不足"></a>项目不足</h2><ul><li>语法不规范，复用性不强，后面修改过一次感觉修改起来很复杂</li><li>js不熟练，项目之后大二下期又重新开始学习了一遍js，并写了总结 (<a href="https://biubiuins.github.io/2018/10/11/summary-2018-9/" target="_blank" rel="noopener">https://biubiuins.github.io/2018/10/11/summary-2018-9/</a>)</li><li><p>技术不足，没有实现前后端分离</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2></li><li><p>首页 <a href="http://mailroom.sicau.edu.cn/email/public/" target="_blank" rel="noopener">http://mailroom.sicau.edu.cn/email/public/</a></p><ul><li>bootsrap做了响应式，用了ajax请求数据</li></ul></li><li>管理页面（需要登陆仅提供图片）<br><img src="/img/project_email/admin.png" width="85%"><ul><li>实现全选与批量删除</li><li>点击已取之后，重新获取数据（保证筛选邮件之后点击已取仍显示的是筛选之后的邮件)</li><li>邮件类型默认显示上一次选择的类型，可输入筛选的下拉框<br><img src="/img/project_email/admin1.png" width="85%"></li><li>超级管理员界面实现了原生js模态框，并做了根据屏幕居中</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;邮件收发项目&quot;&gt;&lt;a href=&quot;#邮件收发项目&quot; class=&quot;headerlink&quot; title=&quot;邮件收发项目&quot;&gt;&lt;/a&gt;邮件收发项目&lt;/h2&gt;&lt;p&gt;大二上开始学html，css，js之后做的暑假做的前端页面，很感谢老师可以给一个练手的机会，在做的过程中发现
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>summary-2018.9</title>
    <link href="http://yoursite.com/2018/10/11/summary-2018-9/"/>
    <id>http://yoursite.com/2018/10/11/summary-2018-9/</id>
    <published>2018-10-11T04:32:50.000Z</published>
    <updated>2018-10-11T06:11:08.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="summary-2018-9"><a href="#summary-2018-9" class="headerlink" title="summary-2018-9"></a>summary-2018-9</h1><hr><p>这是在学会搭建博客之后的第一篇博客，以前学习的时候也有记笔记，所以把之前学习笔记上面整理的常见的功能、封装以及遇到的问题写出来，这篇仅限于js，jq。现在正在学习vue，希望在过段时间，自己也能写出关于vue学习的总结。<br>在此之前还需要了解markdown的语法TAT</p><blockquote><p>原来的笔记记录在石墨文档，<a href="https://shimo.im/docs/c8YrJy4obNICaWiS/" target="_blank" rel="noopener">https://shimo.im/docs/c8YrJy4obNICaWiS/</a></p></blockquote><h2 id="ID处理"><a href="#ID处理" class="headerlink" title="ID处理"></a>ID处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 获取id */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> id === <span class="string">"string"</span> ? <span class="built_in">document</span>.getElementById(id) : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="匀速动画"><a href="#匀速动画" class="headerlink" title="匀速动画"></a>匀速动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素，目标，步数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constant</span>(<span class="params">obj, target, speed</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 清除定时器</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="comment">//2.判断方向</span></span><br><span class="line">    <span class="comment">//如果现在的距离小于目标值,则往右，否则向左</span></span><br><span class="line">    <span class="keyword">let</span> dir =obj.offsetLeft&lt;target?speed:-speed;</span><br><span class="line">    <span class="comment">//3. 设置定时器</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        obj.style.left = obj.offsetLeft + dir + <span class="string">"px"</span>;</span><br><span class="line">        <span class="comment">//若超出目标值或者不到目标值</span></span><br><span class="line">        <span class="comment">//最后相减的值取绝对值后，总是小于步数的</span></span><br><span class="line">        <span class="comment">//Math.abs(dir)||speed</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(target-obj.offsetLeft)&lt;<span class="built_in">Math</span>.abs(dir))&#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">//根据目标值板正</span></span><br><span class="line">            obj.style.left =target+<span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buffer</span>(<span class="params">obj, json, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 清除定时器</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="keyword">var</span> begin = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 设置定时器</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.0 旗帜, 决定动画是否结束</span></span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 2.1 遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> json)&#123;</span><br><span class="line">            <span class="comment">// 2.2.-1 求出起始值 和 结束值</span></span><br><span class="line">            <span class="keyword">if</span>(k === <span class="string">'opacity'</span>)&#123; <span class="comment">// 透明度</span></span><br><span class="line">                begin = <span class="built_in">parseInt</span>( <span class="built_in">parseFloat</span>(getCssAttr(obj, k)) * <span class="number">100</span>);</span><br><span class="line">                end = <span class="built_in">parseInt</span>(<span class="built_in">parseFloat</span>(json[k]) * <span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'scrollTop'</span>)&#123; <span class="comment">// 滚动到头部</span></span><br><span class="line">                begin = obj.scrollTop;</span><br><span class="line">                end = <span class="built_in">parseInt</span>(json[k]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">// 正常情况</span></span><br><span class="line">                begin = <span class="built_in">parseInt</span>(getCssAttr(obj, k));</span><br><span class="line">                end = <span class="built_in">parseInt</span>(json[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2.0 求出步长</span></span><br><span class="line">            <span class="comment">//步长公式</span></span><br><span class="line">            <span class="keyword">let</span> step = (end - begin) * <span class="number">0.2</span>;</span><br><span class="line">            step = step &gt;=<span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">            <span class="comment">// 2.2.1 计算起始位置</span></span><br><span class="line">            <span class="keyword">if</span>(k === <span class="string">'opacity'</span>)&#123;</span><br><span class="line">                obj.style.opacity = (begin + step) / <span class="number">100</span>;</span><br><span class="line">                obj.style.filter = <span class="string">'alpha(opacity='</span> + (begin + end)+<span class="string">')'</span>; <span class="comment">// 针对IE</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'scrollTop'</span>)&#123;</span><br><span class="line">                obj.scrollTop = begin + step;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k === <span class="string">'zIndex'</span>)&#123;</span><br><span class="line">                obj.style[k] = json[k];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                obj.style[k] = begin + step + <span class="string">'px'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2.2 判断</span></span><br><span class="line">            <span class="keyword">if</span>(begin !== end)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.0 结束动画</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">// 开启动画组中的下一组动画</span></span><br><span class="line">            <span class="keyword">if</span>(fn)&#123; <span class="comment">// 判断有没有这个函数</span></span><br><span class="line">                fn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="js获取CSS"><a href="#js获取CSS" class="headerlink" title="js获取CSS"></a>js获取CSS</h4><p>利用 [] 访问属性 元素.style[“属性”];<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种语法的好处就是可以动态的传递参数作为属性</span></span><br><span class="line"><span class="comment">//只能获取行类标签</span></span><br><span class="line">     <span class="keyword">var</span> h = <span class="string">'height'</span>;</span><br><span class="line">     box.style[h] = <span class="number">300</span> + <span class="string">'px'</span>;</span><br><span class="line"><span class="comment">//获取外部css或页内的css</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyleAttr</span>(<span class="params">obj, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.currentStyle)&#123; <span class="comment">// IE 和 opera</span></span><br><span class="line">         <span class="keyword">return</span> obj.currentStyle[attr];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//window.getComputedStyle("元素", "伪类") （ 注意：两个选项是必须的，没有伪类 用 null 替代 ）</span></span><br><span class="line">    <span class="comment">//也可以点选，但是为了传递参数作为属性</span></span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(obj, <span class="literal">null</span>)[attr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><ul><li>在定时器事件前，先设置接收定时器的变量指向null</li><li>在定时器事件里，先要清除定时器再设置定时器，先清除是防止定时器累加<h2 id="轮播"><a href="#轮播" class="headerlink" title="轮播"></a>轮播</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3>这种不适合多图<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slider</span> (<span class="params">sliderid,olStyleClassName,imgWidth,speed,second</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//高级排他</span></span><br><span class="line">    <span class="comment">//lastIndex 选中的小圆点样式 currentIndex 小圆点索引  picIndex 图片索引</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex=<span class="number">0</span>,currentIndex=<span class="number">0</span>,picIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1. 获取需要的标签</span></span><br><span class="line">    <span class="keyword">let</span> ul=$(sliderid).children[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span>  ol=$(sliderid).children[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> list=ul.children;</span><br><span class="line">    <span class="keyword">let</span> olList= ol.children;</span><br><span class="line">    <span class="comment">// 2.克隆最后一个li标签</span></span><br><span class="line">    ul.appendChild(list[<span class="number">0</span>].cloneNode(<span class="literal">true</span>));</span><br><span class="line">    <span class="comment">// 3.动态创建小圆点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;list.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> li =<span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">        ol.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.第一个小圆点选中</span></span><br><span class="line">    olList[<span class="number">0</span>].className=olStyleClassName;</span><br><span class="line">    <span class="comment">//5.监听每个li的进入事件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;olList.length;i++)&#123;</span><br><span class="line">        <span class="comment">//5.1 每一个li绑定自己的事件</span></span><br><span class="line">        olList[i].onmouseover=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//先清除之前的选中状态，在把当前选中的索引给lastIndex</span></span><br><span class="line">            lastIndex=currentIndex;</span><br><span class="line">            olList[lastIndex].className=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">this</span>.className=olStyleClassName;</span><br><span class="line">            lastIndex=i;</span><br><span class="line">            <span class="comment">//5.2图片动起来</span></span><br><span class="line">            constant(ul,-(i * imgWidth),speed);</span><br><span class="line">            currentIndex=picIndex=i;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.定时器</span></span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    timer = setInterval(autoPlay, second);</span><br><span class="line">    <span class="comment">// 7. 清除和设置定时器</span></span><br><span class="line">    $(sliderid).onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;;</span><br><span class="line">    $(sliderid).onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        timer = setInterval(autoPlay, second);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        picIndex++;</span><br><span class="line">        currentIndex++;</span><br><span class="line">        <span class="comment">//如果图片到了最后一张</span></span><br><span class="line">        <span class="keyword">if</span> (picIndex &gt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">            ul.style.left = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//从第二张图片开始</span></span><br><span class="line">            picIndex = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        constant(ul, -(picIndex * imgWidth), speed);</span><br><span class="line">        <span class="comment">//小原点的选中</span></span><br><span class="line">        <span class="keyword">if</span> (currentIndex &gt; olList.length - <span class="number">1</span>) &#123;</span><br><span class="line">            currentIndex = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;olList.length;i++)&#123;</span><br><span class="line">            olList[i].className=<span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        olList[currentIndex].className=olStyleClassName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>两个图片宽度的位置，第一个位置显示（当前），第二位置隐藏<br><img src="/img/summary-2018.9/summary01.png" alt="轮播图"></p><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>改变透明度，循环一遍让所有的opacity动画为0，然后当前为opacity动画为1，索引++、<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opacityAutoPlay</span>(<span class="params">ulid,speed</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取所有的li标签</span></span><br><span class="line">    <span class="keyword">var</span> lis = $(ulid).getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 开始定时器</span></span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.1 改变透明度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;lis.length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> singerLi = lis[i];</span><br><span class="line">            buffer(singerLi, &#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer(lis[index], &#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 2.2 索引++</span></span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(index === lis.length)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, speed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h2><ul><li>父盒子居中<ol><li>Math.floor(屏幕宽度/子盒子宽度)=cols</li><li>子盒子的宽度*cols=父盒子的宽度</li><li>margin:0 auto;</li></ol></li><li><p>子盒子定位<br>第一行不变，其他子盒子接在第一行最矮的盒子的后面（反复）</p><ol><li>拿到所有盒子的高度。把第一行的盒子的高度放在一个数组里面（i&lt;cols,heightArr[])</li><li>在剩下的盒子里面(i&gt;=cols),找出第一行最矮的盒子的高度（Math.min(…heightArr)||Math.min.apply(this.height)）<br>2.1 找出最矮盒子的索引(遍历heightArr[],找出和第二步盒子高度一样的i返回)<br>2.2 剩下盒子定位（left=第2.1步的索引*子盒子宽度，top=最矮的盒子高度）<br>2.3 更新最矮盒子的高度 （heightArr[最矮盒子的高度]+=当前盒子的高度）</li></ol><ul><li>滚动加载图片</li></ul><ol><li>监听窗口的滚动，滚动到你需要的位置加载</li></ol><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 实现瀑布流布局</span></span><br><span class="line">    waterFull(<span class="string">"main"</span>, <span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 动态加载图片</span></span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(checkWillLoadImage())&#123;</span><br><span class="line">            <span class="comment">// 2.1 造数据</span></span><br><span class="line">            <span class="keyword">var</span> dataArr = [</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img04.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img06.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img08.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img09.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img10.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img12.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img14.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img16.jpg"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"src"</span>: <span class="string">"img18.jpg"</span>&#125;</span><br><span class="line">            ];</span><br><span class="line">            <span class="comment">// 2.2 创建元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;dataArr.length; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> newBox = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">                newBox.className = <span class="string">"box"</span>;</span><br><span class="line">                $(<span class="string">"main"</span>).appendChild(newBox);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> newPic = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">                newPic.className = <span class="string">"pic"</span>;</span><br><span class="line">                newBox.appendChild(newPic);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> newImg = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">                newImg.src = <span class="string">"images/"</span> + dataArr[i].src;</span><br><span class="line">                newPic.appendChild(newImg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.3 重新布局</span></span><br><span class="line">            waterFull(<span class="string">"main"</span>, <span class="string">"box"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现瀑布流布局</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterFull</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 父盒子居中</span></span><br><span class="line">    <span class="comment">// 1.1 获取所有的盒子</span></span><br><span class="line">    <span class="keyword">var</span> allBox = $(parent).getElementsByClassName(child);</span><br><span class="line">    <span class="comment">// 1.2 获取子盒子的宽度</span></span><br><span class="line">    <span class="keyword">var</span> boxWidth = allBox[<span class="number">0</span>].offsetWidth;</span><br><span class="line">    <span class="comment">// 1.3 获取屏幕的宽度</span></span><br><span class="line">    <span class="keyword">var</span> screenW = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">    <span class="comment">// 1.4 求出列数</span></span><br><span class="line">    <span class="keyword">var</span> cols = <span class="built_in">parseInt</span>(screenW / boxWidth);</span><br><span class="line">    <span class="comment">// 1.5 父盒子居中</span></span><br><span class="line">    $(parent).style.width = cols * boxWidth + <span class="string">'px'</span>;</span><br><span class="line">    $(parent).style.margin = <span class="string">"0</span></span><br><span class="line"><span class="string">    // 2. 子盒子的定位</span></span><br><span class="line"><span class="string">    // 2.1 定义高度数组</span></span><br><span class="line"><span class="string">    var heightArr = [], boxHeight = 0, minBoxHeight = 0, minBoxIndex = 0;</span></span><br><span class="line"><span class="string">    // 2.2 遍历子盒子</span></span><br><span class="line"><span class="string">    for (var i = 0; i &lt; allBox.length; i++) &#123;</span></span><br><span class="line"><span class="string">        // 2.2.1 求出每一个子盒子的高度</span></span><br><span class="line"><span class="string">        boxHeight = allBox[i].offsetHeight;</span></span><br><span class="line"><span class="string">        // 2.2.2 取出第一行盒子的高度放入高度数组</span></span><br><span class="line"><span class="string">        if (i &lt; cols) &#123; // 第一行</span></span><br><span class="line"><span class="string">            heightArr.push(boxHeight);</span></span><br><span class="line"><span class="string">        &#125; else &#123; // 剩余行</span></span><br><span class="line"><span class="string">            // 1. 取出最矮的盒子高度</span></span><br><span class="line"><span class="string">            // minBoxHeight = _.min(heightArr);</span></span><br><span class="line"><span class="string">            minBoxHeight=Math.min(...heightArr);</span></span><br><span class="line"><span class="string">            // 2. 求出最矮盒子对应的索引</span></span><br><span class="line"><span class="string">            minBoxIndex = getMinBoxIndex(heightArr, minBoxHeight);</span></span><br><span class="line"><span class="string">            // 3. 子盒子定位</span></span><br><span class="line"><span class="string">            allBox[i].style.position = "</span>absolute<span class="string">";</span></span><br><span class="line"><span class="string">            allBox[i].style.left = minBoxIndex * boxWidth + 'px';</span></span><br><span class="line"><span class="string">            allBox[i].style.top = minBoxHeight + 'px';</span></span><br><span class="line"><span class="string">            // 4. 更新数组中的高度</span></span><br><span class="line"><span class="string">            heightArr[minBoxIndex] += boxHeight;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    console.log(heightArr, minBoxHeight, minBoxIndex);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 获取数组中最矮盒子高度的索引</span></span><br><span class="line"><span class="string"> * @param arr</span></span><br><span class="line"><span class="string"> * @param val</span></span><br><span class="line"><span class="string"> * @returns &#123;number&#125;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function getMinBoxIndex(arr, val) &#123;</span></span><br><span class="line"><span class="string">    for(var i=0; i&lt;arr.length; i++)&#123;</span></span><br><span class="line"><span class="string">        if(arr[i] === val)&#123;</span></span><br><span class="line"><span class="string">            return i;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 判断是否具备加载图片的条件</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function checkWillLoadImage() &#123;</span></span><br><span class="line"><span class="string">    // 1. 获取最后一个盒子</span></span><br><span class="line"><span class="string">    var allBox = document.getElementsByClassName("</span>box<span class="string">");</span></span><br><span class="line"><span class="string">    var lastBox = allBox[allBox.length - 1];</span></span><br><span class="line"><span class="string">    // 2. 求出最后一个盒子自身高度的一半 + offsetTop</span></span><br><span class="line"><span class="string">    var lastBoxDis = lastBox.offsetHeight * 0.5 + lastBox.offsetTop;</span></span><br><span class="line"><span class="string">    // 3. 求出屏幕的高度</span></span><br><span class="line"><span class="string">    var screenW = document.body.clientHeight || document.documentElement.clientHeight;</span></span><br><span class="line"><span class="string">    // 4. 求出页面偏离浏览器的高度</span></span><br><span class="line"><span class="string">    var scrollTop = scroll().top;</span></span><br><span class="line"><span class="string">    return lastBoxDis &lt;= screenW + scrollTop;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>jq<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当页面加载完毕</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'load'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//1.实现瀑布流布局</span></span><br><span class="line">waterFall();</span><br><span class="line"><span class="comment">//2.滚动加载</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//判断是否加载</span></span><br><span class="line"><span class="keyword">if</span> (checkWillLoad())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">////创造假数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="string">'dataImg'</span>:[&#123;<span class="string">'img'</span>:<span class="string">'23.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'24.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'25.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'26.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'27.jpg'</span>&#125;,&#123;<span class="string">'img'</span>:<span class="string">'28.jpg'</span>&#125;]&#125;;</span><br><span class="line"><span class="comment">//遍历创建盒子</span></span><br><span class="line">$.each(data.dataImg,<span class="function"><span class="keyword">function</span> (<span class="params">index,value</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个div标签 设置它的类为'box' 添加到'main'里面去</span></span><br><span class="line"><span class="keyword">var</span> newBox = $(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'box'</span>).appendTo($(<span class="string">'#main'</span>));</span><br><span class="line">    <span class="keyword">var</span> newPic = $(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'pic'</span>).appendTo($(newBox));</span><br><span class="line">        <span class="comment">//创建img  取出遍历的对象value的img属性对应的值</span></span><br><span class="line">     $(<span class="string">'&lt;img&gt;'</span>).attr(<span class="string">'src'</span>,<span class="string">'images/'</span>+$(value).attr(<span class="string">'img'</span>)).appendTo($(newPic));</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//1.实现瀑布流布局</span></span><br><span class="line">        waterFall();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//实现瀑布流布局</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">waterFall</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//拿到所有的盒子</span></span><br><span class="line">        <span class="keyword">var</span> allBox = $(<span class="string">'#main &gt; .box'</span>);</span><br><span class="line">        <span class="comment">//取出其中一个盒子的宽度</span></span><br><span class="line">        <span class="keyword">var</span> boxWidth = $(allBox).eq(<span class="number">0</span>).outerWidth();</span><br><span class="line">        <span class="comment">//取出屏幕的高度</span></span><br><span class="line">        <span class="keyword">var</span> screenWidth = $(<span class="built_in">window</span>).width();</span><br><span class="line">        <span class="comment">//求出列数 //取整函数取整</span></span><br><span class="line">        <span class="keyword">var</span> cols = <span class="built_in">Math</span>.floor( screenWidth/boxWidth);</span><br><span class="line">        <span class="comment">//父标签居中</span></span><br><span class="line">        $(<span class="string">'#main'</span>).css(&#123;</span><br><span class="line">        <span class="string">'width'</span>:cols * boxWidth + <span class="string">'px'</span>,</span><br><span class="line">        <span class="string">'margin'</span>:<span class="string">'0 auto'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//对子盒子定位</span></span><br><span class="line">        <span class="keyword">var</span> heightArr = [];</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        $.each(allBox,<span class="function"><span class="keyword">function</span> (<span class="params">index,value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//取出单独盒子的高度</span></span><br><span class="line">        <span class="keyword">var</span> boxHeight = $(value).outerHeight();</span><br><span class="line">        <span class="comment">//判断是否第一行</span></span><br><span class="line">        <span class="keyword">if</span>(index &lt; cols)</span><br><span class="line">        &#123;</span><br><span class="line">        heightArr[index] = boxHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">//剩余的盒子要瀑布流布局</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//求出最矮的盒子高度</span></span><br><span class="line">        <span class="keyword">var</span> minBoxHeight = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,heightArr);</span><br><span class="line">        <span class="comment">//取出最矮高度对应的索引  封装了js的这个方法</span></span><br><span class="line">        <span class="keyword">var</span> minBoxIndex = $.inArray(minBoxHeight,heightArr);</span><br><span class="line">        <span class="comment">//定位</span></span><br><span class="line">        $(value).css(&#123;</span><br><span class="line">        <span class="string">'position'</span>:<span class="string">'absolute'</span>,</span><br><span class="line">        <span class="string">'top'</span>:minBoxHeight + <span class="string">'px'</span>,</span><br><span class="line">        <span class="string">'left'</span>:minBoxIndex * boxWidth + <span class="string">'px'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//更新数组中最矮的高度</span></span><br><span class="line">        heightArr[minBoxIndex] += boxHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否符合加载条件</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkWillLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//直接取出最后一个盒子</span></span><br><span class="line">        <span class="keyword">var</span> lastBox = $(<span class="string">'#main &gt; div'</span>).last();</span><br><span class="line">        <span class="comment">//取出最后一个盒子高度的一半 + 头部偏离的位置</span></span><br><span class="line">        <span class="keyword">var</span> lastBoxDis = $(lastBox).outerHeight() + $(lastBox).offset().top;</span><br><span class="line">        <span class="comment">//求出浏览器的高度</span></span><br><span class="line">        <span class="keyword">var</span> clientHeight = $(<span class="built_in">window</span>).height();</span><br><span class="line">        <span class="comment">//求出页面偏离浏览器高度</span></span><br><span class="line">        <span class="keyword">var</span> scrollTopHeight = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">        <span class="comment">//比较返回</span></span><br><span class="line">        <span class="keyword">return</span> lastBoxDis &lt;= clientHeight + scrollTopHeight;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h4 id="margin-0-auto"><a href="#margin-0-auto" class="headerlink" title="margin:0 auto"></a>margin:0 auto</h4><ol><li>块级元素</li><li>给定要居中的块级元素的宽度。</li><li>所有元素也可以通过对父元素设置<code>text-align：center；</code>的方式来实现居中。而对于块元素来说，对要居中的元素自身进行设置<code>text-align:center</code>也能实现居中</li><li><code>margin:0 auto;</code>可以使盒子居中，<code>text-align:center;</code>可以使文本居中，<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4>onresize举列子<br>窗口大小一变化就执行，太过灵敏，所以需要阻止<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用定时器</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    <span class="comment">// 节流</span></span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        waterFull(<span class="string">'main'</span>, <span class="string">'box'</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装之后的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(fn, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="apply-call"><a href="#apply-call" class="headerlink" title="apply/call"></a>apply/call</h4><p>这个面试中常考到，现在只做初步了解<br>(<a href="https://www.cnblogs.com/gaowx/p/4837687.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaowx/p/4837687.html</a> )</p><ul><li>改变函数的this指向</li><li>apply可以改变传递给函数参数的形式<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newDate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//声明日期对象，里面可以设置参数表示其他时间</span></span><br><span class="line">  <span class="keyword">let</span> date =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="comment">//获取时间里面的年</span></span><br><span class="line">  date.getFullYear()</span><br><span class="line">  <span class="comment">//月0-11</span></span><br><span class="line">  date.getMonth()+<span class="number">1</span></span><br><span class="line">  <span class="comment">//日1-31</span></span><br><span class="line">  date.getDate()</span><br><span class="line">  <span class="comment">//获取星期0-6</span></span><br><span class="line">  data.Day</span><br><span class="line">  <span class="comment">//设置某一天</span></span><br><span class="line">  date.setDate（day）</span><br><span class="line">  <span class="comment">//时0-23</span></span><br><span class="line">  date.getHours()</span><br><span class="line">  <span class="comment">//分0-59</span></span><br><span class="line">  date.getMinutes()</span><br><span class="line">  <span class="comment">//秒0-59</span></span><br><span class="line">  date.getSeconds()</span><br><span class="line">  <span class="comment">//获取毫秒</span></span><br><span class="line">  date.getMilliSeconds()</span><br><span class="line">  <span class="comment">//时间戳</span></span><br><span class="line">  date.getTime()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ms转化时间"><a href="#ms转化时间" class="headerlink" title="ms转化时间"></a>ms转化时间</h3><p><img src="/img/summary-2018.9/data.jpg" alt="data"></p><h2 id="cookie封装"><a href="#cookie封装" class="headerlink" title="cookie封装"></a>cookie封装</h2><p>封装成插件，引入该文件后，$.addCookie(key,value,day,path,domain)来引用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$,window</span>) </span>&#123;</span><br><span class="line">    $.extend(&#123;</span><br><span class="line">        addCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">addCookie</span>(<span class="params">key,value,day,path,domain</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//1.处理默认保存的路径</span></span><br><span class="line">        <span class="keyword">var</span> index=<span class="built_in">window</span>.location.pathname.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line">        <span class="keyword">var</span> currentPath=<span class="built_in">window</span>.location.pathname.slice(<span class="number">0</span>,index)</span><br><span class="line">        path=path||currentPath</span><br><span class="line">        <span class="comment">//2.处理默认domain</span></span><br><span class="line">        domain=domain||<span class="built_in">document</span>.domain</span><br><span class="line">        <span class="comment">//3.处理默认的过期时间</span></span><br><span class="line">        <span class="keyword">if</span>(!day)&#123;</span><br><span class="line">          <span class="built_in">document</span>.cookie=key+<span class="string">"="</span>+value+<span class="string">";path="</span>+path+<span class="string">";domain="</span>+domain+<span class="string">';'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> date =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            date.setDate(date.getDate()+day)</span><br><span class="line">            <span class="built_in">document</span>.cookie=key+<span class="string">"="</span>+value+<span class="string">";expires="</span>+date.toGMTString()+<span class="string">";path="</span>+path+<span class="string">";domain="</span>+domain+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        getCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> res=<span class="built_in">document</span>.cookie.split(<span class="string">';'</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++)&#123;</span><br><span class="line">        <span class="comment">//把key和value切割</span></span><br><span class="line">            <span class="keyword">var</span> temp=res[i].split(<span class="string">'='</span>)</span><br><span class="line">            <span class="comment">//前后可能有空格，把空格删除</span></span><br><span class="line">            <span class="keyword">if</span>(temp[<span class="number">0</span>].trim()===key)&#123;</span><br><span class="line">                <span class="keyword">return</span> temp[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        delCookie:</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">delCookie</span>(<span class="params">key, path</span>) </span>&#123;</span><br><span class="line">         <span class="comment">//默认情况下只能删除默认路径中保存的cookie，如果要删除指定路径保存的cookie，要把路径值传出去</span></span><br><span class="line">         <span class="comment">//设置过期时间为-1</span></span><br><span class="line">                addCookie(key, getCookie(key), <span class="number">-1</span>, path)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery,<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><h2 id="动态添加的元素绑定事件"><a href="#动态添加的元素绑定事件" class="headerlink" title="动态添加的元素绑定事件"></a>动态添加的元素绑定事件</h2><ul><li><p>delegate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;ul&apos;).delegate(&apos;li&apos;,&apos;click&apos;,function()&#123;</span><br><span class="line">//操作的还是li</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>onclick事件<br>在动态添加数据的时候，就给元素绑定onclick事件</p></li><li>on（）<br>常用  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//把动态添加的元素写在on里面，如果调用的函数是外部定义好的，则在调用的时候不加（）</span><br><span class="line">//不然会跳过点击事件直接执行函数</span><br><span class="line">$(&quot;父元素或祖辈元素&quot;).on(&quot;click&quot;,&quot;动态添加的元素&quot;,function()&#123;</span><br><span class="line">$(this).css(&quot;border&quot;,&quot;5px solid #000&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h3><p><a href="http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css" target="_blank" rel="noopener">http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css</a></p><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拿到select对象：</span></span><br><span class="line"><span class="keyword">var</span> myselect=<span class="built_in">document</span>.getElementById(<span class="string">"select"</span>);</span><br><span class="line"><span class="comment">//拿到选中项的索引</span></span><br><span class="line"><span class="keyword">var</span> index=myselect.selectedIndex ; <span class="comment">// selectedIndex代表的是你所选中项的index</span></span><br><span class="line"><span class="comment">//拿到选中项options的value：</span></span><br><span class="line">myselect.options[index].value;</span><br><span class="line"><span class="comment">//拿到选中项options的text：</span></span><br><span class="line">myselect.options[index].text;</span><br><span class="line"><span class="comment">//拿到选中项的其他值，比如这里的url：</span></span><br><span class="line"> myselect.options[index].getAttribute(<span class="string">'url'</span>);</span><br><span class="line"><span class="comment">//jquery</span></span><br><span class="line">var options=$(“#select option:selected”); //获取选中的项</span><br><span class="line">alert(options.val()); <span class="comment">//拿到选中项的值</span></span><br><span class="line">alert(options.text()); <span class="comment">//拿到选中项的文本</span></span><br><span class="line">alert(options.attr(<span class="string">'url'</span>)); <span class="comment">//拿到选中项的url值</span></span><br><span class="line"><span class="comment">//设置</span></span><br><span class="line"><span class="comment">//设置value为pxx的项选中</span></span><br><span class="line">$(<span class="string">".selector"</span>).val(<span class="string">"pxx"</span>)</span><br><span class="line"><span class="comment">//设置text为pxx的项选中</span></span><br><span class="line">$(<span class="string">".selector"</span>).find(<span class="string">"option[text='pxx']"</span>).attr(<span class="string">"selected"</span>,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="H5-datalist"><a href="#H5-datalist" class="headerlink" title="H5 datalist"></a>H5 datalist</h3><p>datalist 只是列表<br>赋值取值还是通过input.样式等都在input上操作<br><a href="https://www.zhangxinxu.com/wordpress/2013/03/html5-datalist-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8-%E5%8F%AF%E8%A1%8C%E6%80%A7/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2013/03/html5-datalist-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8-%E5%8F%AF%E8%A1%8C%E6%80%A7/</a></p><h4 id="邮箱的自动补全"><a href="#邮箱的自动补全" class="headerlink" title="邮箱的自动补全"></a>邮箱的自动补全</h4><p>HTML代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">邮箱：&lt;input type=&quot;email&quot; id=&quot;email&quot; list=&quot;emailList&quot; name=&quot;off_autocomplete&quot; /&gt;</span><br><span class="line">&lt;datalist id=&quot;emailList&quot;&gt;</span><br><span class="line">//其中*为占位符，当文本框输入内容的时候，*替换成邮箱地址的前半部分，于是，动态邮件地址提示的效果就实现了</span><br><span class="line">    &lt;option value=&quot;*@qq.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@163.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@gmail.com&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@yahoo.com.cn&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;*@126.com&quot;&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br></pre></td></tr></table></figure></p><p>JS代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eleList = <span class="built_in">document</span>.getElementById(<span class="string">"emailList"</span>)</span><br><span class="line">    , eleMail = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>)</span><br><span class="line">    , htmlListInit = <span class="string">''</span>, arrEmailList = [];</span><br><span class="line"><span class="keyword">if</span> (eleMail &amp;&amp; eleList &amp;&amp; (htmlListInit = eleList.innerHTML) !== <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// 得到类似["qq.com", "163.com", "gmail.com", ...]的数据</span></span><br><span class="line">    arrEmailList = [].slice.call(eleList.getElementsByTagName(<span class="string">"option"</span>)).map(<span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> option.value.replace(<span class="string">"*@"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    eleMail.fnListReplace = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arrValue = <span class="keyword">this</span>.value.trim().split(<span class="string">"@"</span>);</span><br><span class="line">        <span class="comment">// 修复FireFox浏览器下无限input问题</span></span><br><span class="line">        <span class="comment">// 如果值不完全匹配某option值，执行动态替换</span></span><br><span class="line">        <span class="keyword">if</span> (arrValue.length !== <span class="number">2</span> || arrEmailList.indexOf(arrValue[<span class="number">1</span>]) === <span class="number">-1</span>) &#123;</span><br><span class="line">            eleList.innerHTML = htmlListInit.replace(<span class="regexp">/\*/g</span>, arrValue[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 绑定输入事件侦听</span></span><br><span class="line">    eleMail.addEventListener(<span class="string">"input"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fnListReplace.call(<span class="keyword">this</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//  载入即匹配</span></span><br><span class="line">    eleMail.fnListReplace.call(eleMail).focus();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    eleList = <span class="built_in">document</span>.createElement(<span class="string">"datalist"</span>);</span><br><span class="line">    eleList.innerHTML = <span class="string">'&lt;p class=sorry&gt;抱歉，当前浏览器不支持HTML5 datalist.&lt;/p&gt;'</span>;</span><br><span class="line">    eleMail.parentNode.appendChild(eleList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="jquery-editable-select控件"><a href="#jquery-editable-select控件" class="headerlink" title="jquery.editable-select控件"></a>jquery.editable-select控件</h4><p>引入<br>jquery.editable-select.css<br>jquery.editable-select.js<br>调用方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#editable-select'</span>).editableSelect(&#123;</span><br><span class="line">    bg_iframe: <span class="literal">true</span>, <span class="comment">//是否加iframe</span></span><br><span class="line">    case_sensitive: <span class="literal">false</span>,</span><br><span class="line">    items_then_scroll: <span class="number">10</span> ,<span class="comment">//设置下拉选项的数目</span></span><br><span class="line">    isFilter:<span class="literal">false</span>/<span class="literal">true</span>,    <span class="comment">//是否根据条件过滤下拉选项</span></span><br><span class="line">    onCreate:,            <span class="comment">//当输入时触发</span></span><br><span class="line">    onShow：,             <span class="comment">//当下拉时触发</span></span><br><span class="line">    onHide：,              <span class="comment">//当下拉框隐藏时触发</span></span><br><span class="line">    onSelect：,            <span class="comment">//当下拉框中的选项被选中时触发</span></span><br><span class="line">    effects:<span class="keyword">default</span>/slide/fade， <span class="comment">//动画效果</span></span><br><span class="line">    duration：                   <span class="comment">//动画效果的时间</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;summary-2018-9&quot;&gt;&lt;a href=&quot;#summary-2018-9&quot; class=&quot;headerlink&quot; title=&quot;summary-2018-9&quot;&gt;&lt;/a&gt;summary-2018-9&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;这是在学会搭建博客之后的第一篇博客
      
    
    </summary>
    
    
      <category term="summary" scheme="http://yoursite.com/tags/summary/"/>
    
  </entry>
  
</feed>
